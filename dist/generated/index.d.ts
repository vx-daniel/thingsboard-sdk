import { AxiosRequestConfig } from 'axios';
import { BaseVXOlympusClient } from '../base-client';
import * as schemas from './schemas';
export declare class VXOlympusClient extends BaseVXOlympusClient {
    constructor(baseURL: string, token?: string);
    getAutoCommitSettingsUsingGET(options?: AxiosRequestConfig): Promise<any>;
    saveAutoCommitSettingsUsingPOST(data: Record<string, schemas.AutoVersionCreateConfig>, options?: AxiosRequestConfig): Promise<any>;
    deleteAutoCommitSettingsUsingDELETE(options?: AxiosRequestConfig): Promise<any>;
    autoCommitSettingsExistsUsingGET(options?: AxiosRequestConfig): Promise<any>;
    getFeaturesInfoUsingGET(options?: AxiosRequestConfig): Promise<{}>;
    getJwtSettingsUsingGET(options?: AxiosRequestConfig): Promise<{}>;
    saveJwtSettingsUsingPOST(data: schemas.JWT_Settings, options?: AxiosRequestConfig): Promise<{}>;
    getLicenseUsageInfoUsingGET(options?: AxiosRequestConfig): Promise<{}>;
    getAuthorizationUrlUsingGET(options?: AxiosRequestConfig): Promise<any>;
    codeProcessingUrlUsingGET(code: string, state: string, options?: AxiosRequestConfig): Promise<any>;
    getMailProcessingUrlUsingGET(options?: AxiosRequestConfig): Promise<any>;
    getRepositorySettingsUsingGET(options?: AxiosRequestConfig): Promise<{}>;
    saveRepositorySettingsUsingPOST(data: schemas.RepositorySettings, options?: AxiosRequestConfig): Promise<{}>;
    deleteRepositorySettingsUsingDELETE(options?: AxiosRequestConfig): Promise<{}>;
    checkRepositoryAccessUsingPOST(data: schemas.RepositorySettings, options?: AxiosRequestConfig): Promise<{}>;
    repositorySettingsExistsUsingGET(options?: AxiosRequestConfig): Promise<any>;
    getRepositorySettingsInfoUsingGET(options?: AxiosRequestConfig): Promise<{}>;
    getSecuritySettingsUsingGET(options?: AxiosRequestConfig): Promise<{}>;
    saveSecuritySettingsUsingPOST(data: schemas.SecuritySettings, options?: AxiosRequestConfig): Promise<{}>;
    saveAdminSettingsUsingPOST(data: schemas.AdminSettings, options?: AxiosRequestConfig): Promise<{}>;
    sendTestMailUsingPOST(data: schemas.AdminSettings, options?: AxiosRequestConfig): Promise<any>;
    sendTestSmsUsingPOST(data: schemas.TestSmsRequest, options?: AxiosRequestConfig): Promise<any>;
    getAdminSettingsUsingGET(key: string, systemByDefault: boolean, options?: AxiosRequestConfig): Promise<{}>;
    getSystemInfoUsingGET(options?: AxiosRequestConfig): Promise<{}>;
    checkUpdatesUsingGET(options?: AxiosRequestConfig): Promise<{}>;
    loginPost(data: schemas.LoginRequest, options?: AxiosRequestConfig): Promise<{}>;
    saveAlarmCommentUsingPOST(alarmId: string, data: schemas.AlarmComment, options?: AxiosRequestConfig): Promise<{}>;
    deleteAlarmCommentUsingDELETE(alarmId: string, commentId: string, options?: AxiosRequestConfig): Promise<any>;
    getAlarmCommentsUsingGET(alarmId: string, pageSize: number, page: number, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    saveAlarmUsingPOST(data: schemas.Alarm, options?: AxiosRequestConfig): Promise<{}>;
    getHighestAlarmSeverityUsingGET(entityType: string, entityId: string, searchStatus: string, status: string, assigneeId: string, options?: AxiosRequestConfig): Promise<any>;
    getAlarmInfoByIdUsingGET(alarmId: string, options?: AxiosRequestConfig): Promise<{}>;
    getAlarmTypesUsingGET(pageSize: number, page: number, textSearch: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    getAlarmByIdUsingGET(alarmId: string, options?: AxiosRequestConfig): Promise<{}>;
    deleteAlarmUsingDELETE(alarmId: string, options?: AxiosRequestConfig): Promise<any>;
    ackAlarmUsingPOST(alarmId: string, options?: AxiosRequestConfig): Promise<{}>;
    unassignAlarmUsingDELETE(alarmId: string, options?: AxiosRequestConfig): Promise<{}>;
    assignAlarmUsingPOST(alarmId: string, assigneeId: string, options?: AxiosRequestConfig): Promise<{}>;
    clearAlarmUsingPOST(alarmId: string, options?: AxiosRequestConfig): Promise<{}>;
    getAlarmsUsingGET(entityType: string, entityId: string, searchStatus: string, status: string, assigneeId: string, pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, startTime: number, endTime: number, fetchOriginator: boolean, options?: AxiosRequestConfig): Promise<{}>;
    getAllAlarmsUsingGET(searchStatus: string, status: string, assigneeId: string, pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, startTime: number, endTime: number, fetchOriginator: boolean, options?: AxiosRequestConfig): Promise<{}>;
    getAlarmsV2UsingGET(entityType: string, entityId: string, statusList: string, severityList: string, typeList: string, assigneeId: string, pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, startTime: number, endTime: number, options?: AxiosRequestConfig): Promise<{}>;
    getAllAlarmsV2UsingGET(statusList: string, severityList: string, typeList: string, assigneeId: string, pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, startTime: number, endTime: number, options?: AxiosRequestConfig): Promise<{}>;
    processAssetBulkImportUsingPOST(data: schemas.BulkImportRequest, options?: AxiosRequestConfig): Promise<{}>;
    getAssetInfoByIdUsingGET(assetId: string, options?: AxiosRequestConfig): Promise<{}>;
    getAssetTypesUsingGET(options?: AxiosRequestConfig): Promise<any>;
    getAssetByIdUsingGET(assetId: string, options?: AxiosRequestConfig): Promise<{}>;
    deleteAssetUsingDELETE(assetId: string, options?: AxiosRequestConfig): Promise<any>;
    getAllAssetInfosUsingGET(pageSize: number, page: number, includeCustomers: boolean, assetProfileId: string, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    findByQueryUsingPOST(data: schemas.AssetSearchQuery, options?: AxiosRequestConfig): Promise<any>;
    getAssetsByIdsUsingGET(assetIds: string, options?: AxiosRequestConfig): Promise<any>;
    saveAssetUsingPOST(entityGroupId: string, entityGroupIds: string, data: schemas.Asset, options?: AxiosRequestConfig): Promise<{}>;
    getCustomerAssetInfosUsingGET(customerId: string, pageSize: number, page: number, includeCustomers: boolean, assetProfileId: string, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    getCustomerAssetsUsingGET(customerId: string, pageSize: number, page: number, type: string, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    getAssetsByEntityGroupIdUsingGET(entityGroupId: string, pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    getTenantAssetUsingGET(assetName: string, options?: AxiosRequestConfig): Promise<{}>;
    getTenantAssetsUsingGET(pageSize: number, page: number, type: string, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    getUserAssetsUsingGET(pageSize: number, page: number, type: string, assetProfileId: string, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    saveAssetProfileUsingPOST(data: schemas.AssetProfile, options?: AxiosRequestConfig): Promise<{}>;
    getAssetProfileNamesUsingGET(activeOnly: boolean, options?: AxiosRequestConfig): Promise<any>;
    deleteAssetProfileUsingDELETE(assetProfileId: string, options?: AxiosRequestConfig): Promise<any>;
    setDefaultAssetProfileUsingPOST(assetProfileId: string, options?: AxiosRequestConfig): Promise<{}>;
    getAssetProfileByIdUsingGET(assetProfileId: string, inlineImages: boolean, options?: AxiosRequestConfig): Promise<{}>;
    getDefaultAssetProfileInfoUsingGET(options?: AxiosRequestConfig): Promise<{}>;
    getAssetProfileInfoByIdUsingGET(assetProfileId: string, options?: AxiosRequestConfig): Promise<{}>;
    getAssetProfilesByIdsUsingGET(assetProfileIds: string, options?: AxiosRequestConfig): Promise<any>;
    getAssetProfileInfosUsingGET(pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    getAssetProfilesUsingGET(pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    getAuditLogsByCustomerIdUsingGET(customerId: string, pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, startTime: number, endTime: number, actionTypes: string, options?: AxiosRequestConfig): Promise<{}>;
    getAuditLogsByEntityIdUsingGET(entityType: string, entityId: string, pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, startTime: number, endTime: number, actionTypes: string, options?: AxiosRequestConfig): Promise<{}>;
    getAuditLogsByUserIdUsingGET(userId: string, pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, startTime: number, endTime: number, actionTypes: string, options?: AxiosRequestConfig): Promise<{}>;
    getAuditLogsUsingGET(pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, startTime: number, endTime: number, actionTypes: string, options?: AxiosRequestConfig): Promise<{}>;
    changePasswordUsingPOST(data: schemas.ChangePasswordRequest, options?: AxiosRequestConfig): Promise<{}>;
    logoutUsingPOST(options?: AxiosRequestConfig): Promise<any>;
    getUserUsingGET(options?: AxiosRequestConfig): Promise<{}>;
    checkActivateTokenUsingGET(activateToken: string, options?: AxiosRequestConfig): Promise<any>;
    activateUserUsingPOST(sendActivationMail: boolean, data: schemas.ActivateUserRequest, options?: AxiosRequestConfig): Promise<{}>;
    resetPasswordUsingPOST(data: schemas.ResetPasswordRequest, options?: AxiosRequestConfig): Promise<{}>;
    requestResetPasswordByEmailUsingPOST(data: schemas.ResetPasswordEmailRequest, options?: AxiosRequestConfig): Promise<any>;
    checkResetTokenUsingGET(resetToken: string, options?: AxiosRequestConfig): Promise<any>;
    getUserPasswordPolicyUsingGET(options?: AxiosRequestConfig): Promise<{}>;
    getBlobEntitiesByIdsUsingGET(blobEntityIds: string, options?: AxiosRequestConfig): Promise<any>;
    getBlobEntitiesUsingGET(pageSize: number, page: number, type: string, textSearch: string, sortProperty: string, sortOrder: string, startTime: number, endTime: number, options?: AxiosRequestConfig): Promise<{}>;
    getBlobEntityInfoByIdUsingGET(blobEntityId: string, options?: AxiosRequestConfig): Promise<{}>;
    deleteBlobEntityUsingDELETE(blobEntityId: string, options?: AxiosRequestConfig): Promise<any>;
    downloadBlobEntityUsingGET(blobEntityId: string, options?: AxiosRequestConfig): Promise<{}>;
    getComponentDescriptorByClazzUsingGET(componentDescriptorClazz: string, options?: AxiosRequestConfig): Promise<{}>;
    getComponentDescriptorsByTypeUsingGET(componentType: string, ruleChainType: string, options?: AxiosRequestConfig): Promise<any>;
    getComponentDescriptorsByTypesUsingGET(componentTypes: string, ruleChainType: string, options?: AxiosRequestConfig): Promise<any>;
    saveConverterUsingPOST(data: schemas.Converter, options?: AxiosRequestConfig): Promise<{}>;
    testDownLinkConverterUsingPOST(scriptLang: string, data: schemas.JsonNode, options?: AxiosRequestConfig): Promise<{}>;
    testUpLinkConverterUsingPOST(scriptLang: string, data: schemas.JsonNode, options?: AxiosRequestConfig): Promise<{}>;
    getConverterByIdUsingGET(converterId: string, options?: AxiosRequestConfig): Promise<{}>;
    deleteConverterUsingDELETE(converterId: string, options?: AxiosRequestConfig): Promise<any>;
    getLatestConverterDebugInputUsingGET(converterId: string, converterType: string, integrationType: string, integrationName: string, options?: AxiosRequestConfig): Promise<{}>;
    getConvertersByIdsUsingGET(converterIds: string, options?: AxiosRequestConfig): Promise<any>;
    getConvertersUsingGET(isEdgeTemplate: boolean, pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    getCurrentCustomMenuUsingGET(options?: AxiosRequestConfig): Promise<{}>;
    getCustomMenuUsingGET(options?: AxiosRequestConfig): Promise<{}>;
    saveCustomMenuUsingPOST(data: schemas.CustomMenu, options?: AxiosRequestConfig): Promise<{}>;
    getCurrentCustomTranslationUsingGET(options?: AxiosRequestConfig): Promise<{}>;
    getCustomTranslationUsingGET(options?: AxiosRequestConfig): Promise<{}>;
    saveCustomTranslationUsingPOST(data: schemas.CustomTranslation, options?: AxiosRequestConfig): Promise<{}>;
    getCustomerInfoByIdUsingGET(customerId: string, options?: AxiosRequestConfig): Promise<{}>;
    getCustomerByIdUsingGET(customerId: string, options?: AxiosRequestConfig): Promise<{}>;
    deleteCustomerUsingDELETE(customerId: string, options?: AxiosRequestConfig): Promise<any>;
    getCustomerCustomerInfosUsingGET(customerId: string, pageSize: number, page: number, includeCustomers: boolean, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    getShortCustomerInfoByIdUsingGET(customerId: string, options?: AxiosRequestConfig): Promise<{}>;
    getCustomerTitleByIdUsingGET(customerId: string, options?: AxiosRequestConfig): Promise<any>;
    getAllCustomerInfosUsingGET(pageSize: number, page: number, includeCustomers: boolean, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    getCustomersByIdsUsingGET(customerIds: string, options?: AxiosRequestConfig): Promise<any>;
    getCustomersUsingGET(pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    saveCustomerUsingPOST(entityGroupId: string, entityGroupIds: string, data: schemas.Customer, options?: AxiosRequestConfig): Promise<{}>;
    getCustomersByEntityGroupIdUsingGET(entityGroupId: string, pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    getTenantCustomerUsingGET(customerTitle: string, options?: AxiosRequestConfig): Promise<{}>;
    getUserCustomersUsingGET(pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    getCustomerHomeDashboardInfoUsingGET(options?: AxiosRequestConfig): Promise<{}>;
    setCustomerHomeDashboardInfoUsingPOST(data: schemas.HomeDashboardInfo, options?: AxiosRequestConfig): Promise<any>;
    getCustomerDashboardsUsingGET(customerId: string, pageSize: number, page: number, includeCustomers: boolean, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    getHomeDashboardUsingGET(options?: AxiosRequestConfig): Promise<{}>;
    getHomeDashboardInfoUsingGET(options?: AxiosRequestConfig): Promise<{}>;
    getDashboardInfoByIdUsingGET(dashboardId: string, options?: AxiosRequestConfig): Promise<{}>;
    getMaxDatapointsLimitUsingGET(options?: AxiosRequestConfig): Promise<any>;
    getServerTimeUsingGET(options?: AxiosRequestConfig): Promise<any>;
    deleteDashboardUsingDELETE(dashboardId: string, options?: AxiosRequestConfig): Promise<any>;
    getDashboardByIdUsingGET(dashboardId: string, inlineImages: boolean, options?: AxiosRequestConfig): Promise<{}>;
    getAllDashboardsUsingGET(pageSize: number, page: number, includeCustomers: boolean, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    getDashboardsByIdsUsingGET(dashboardIds: string, options?: AxiosRequestConfig): Promise<any>;
    saveDashboardUsingPOST(entityGroupId: string, entityGroupIds: string, data: schemas.Dashboard, options?: AxiosRequestConfig): Promise<{}>;
    exportGroupDashboardsUsingGET(entityGroupId: string, limit: number, options?: AxiosRequestConfig): Promise<any>;
    importGroupDashboardsUsingPOST(entityGroupId: string, overwrite: boolean, data: schemas.Dashboard[], options?: AxiosRequestConfig): Promise<any>;
    getDashboardsByEntityGroupIdUsingGET(entityGroupId: string, pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    getTenantHomeDashboardInfoUsingGET(options?: AxiosRequestConfig): Promise<{}>;
    setTenantHomeDashboardInfoUsingPOST(data: schemas.HomeDashboardInfo, options?: AxiosRequestConfig): Promise<any>;
    getTenantDashboardsUsingGET(pageSize: number, page: number, mobile: boolean, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    getTenantDashboardsUsingGET_1(tenantId: string, pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    getUserDashboardsUsingGET(pageSize: number, page: number, mobile: boolean, textSearch: string, sortProperty: string, sortOrder: string, operation: string, userId: string, options?: AxiosRequestConfig): Promise<{}>;
    downloadGatewayDockerComposeUsingGET(deviceId: string, options?: AxiosRequestConfig): Promise<{}>;
    getDevicePublishTelemetryCommandsUsingGET(deviceId: string, options?: AxiosRequestConfig): Promise<{}>;
    downloadServerCertificateUsingGET(protocol: string, options?: AxiosRequestConfig): Promise<{}>;
    reClaimDeviceUsingDELETE(deviceName: string, options?: AxiosRequestConfig): Promise<{}>;
    claimDeviceUsingPOST(deviceName: string, subCustomerId: string, data: schemas.ClaimRequest, options?: AxiosRequestConfig): Promise<{}>;
    getCustomerDeviceInfosUsingGET(customerId: string, pageSize: number, page: number, includeCustomers: boolean, deviceProfileId: string, active: boolean, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    getCustomerDevicesUsingGET(customerId: string, pageSize: number, page: number, type: string, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    saveDeviceWithCredentialsUsingPOST(entityGroupId: string, entityGroupIds: string, data: schemas.SaveDeviceWithCredentialsRequest, options?: AxiosRequestConfig): Promise<{}>;
    processDevicesBulkImportUsingPOST(data: schemas.BulkImportRequest, options?: AxiosRequestConfig): Promise<{}>;
    updateDeviceCredentialsUsingPOST(data: schemas.DeviceCredentials, options?: AxiosRequestConfig): Promise<{}>;
    getDeviceInfoByIdUsingGET(deviceId: string, options?: AxiosRequestConfig): Promise<{}>;
    getDeviceTypesUsingGET(options?: AxiosRequestConfig): Promise<any>;
    getDeviceByIdUsingGET(deviceId: string, options?: AxiosRequestConfig): Promise<{}>;
    deleteDeviceUsingDELETE(deviceId: string, options?: AxiosRequestConfig): Promise<any>;
    getDeviceCredentialsByDeviceIdUsingGET(deviceId: string, options?: AxiosRequestConfig): Promise<{}>;
    getAllDeviceInfosUsingGET(pageSize: number, page: number, includeCustomers: boolean, deviceProfileId: string, active: boolean, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    findByQueryUsingPOST_1(data: schemas.DeviceSearchQuery, options?: AxiosRequestConfig): Promise<any>;
    countByDeviceProfileAndEmptyOtaPackageUsingGET(otaPackageType: string, deviceProfileId: string, options?: AxiosRequestConfig): Promise<any>;
    countByDeviceGroupAndEmptyOtaPackageUsingGET(otaPackageType: string, otaPackageId: string, entityGroupId: string, options?: AxiosRequestConfig): Promise<any>;
    getDevicesByIdsUsingGET(deviceIds: string, options?: AxiosRequestConfig): Promise<any>;
    saveDeviceUsingPOST(accessToken: string, entityGroupId: string, entityGroupIds: string, data: schemas.Device, options?: AxiosRequestConfig): Promise<{}>;
    getDevicesByEntityGroupIdUsingGET(entityGroupId: string, pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    getTenantDeviceUsingGET(deviceName: string, options?: AxiosRequestConfig): Promise<{}>;
    getTenantDevicesUsingGET(pageSize: number, page: number, type: string, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    assignDeviceToTenantUsingPOST(tenantId: string, deviceId: string, options?: AxiosRequestConfig): Promise<{}>;
    getUserDevicesUsingGET(pageSize: number, page: number, type: string, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    saveDeviceGroupOtaPackageUsingPOST(data: schemas.DeviceGroupOtaPackage, options?: AxiosRequestConfig): Promise<{}>;
    getFirmwareByIdUsingGET(groupId: string, firmwareType: string, options?: AxiosRequestConfig): Promise<{}>;
    deleteDeviceGroupOtaPackageUsingDELETE(id: string, options?: AxiosRequestConfig): Promise<any>;
    saveDeviceProfileUsingPOST(data: schemas.DeviceProfile, options?: AxiosRequestConfig): Promise<{}>;
    getAttributesKeysUsingGET(deviceProfileId: string, options?: AxiosRequestConfig): Promise<any>;
    getTimeseriesKeysUsingGET(deviceProfileId: string, options?: AxiosRequestConfig): Promise<any>;
    getDeviceProfileNamesUsingGET(activeOnly: boolean, options?: AxiosRequestConfig): Promise<any>;
    deleteDeviceProfileUsingDELETE(deviceProfileId: string, options?: AxiosRequestConfig): Promise<any>;
    setDefaultDeviceProfileUsingPOST(deviceProfileId: string, options?: AxiosRequestConfig): Promise<{}>;
    getDeviceProfileByIdUsingGET(deviceProfileId: string, inlineImages: boolean, options?: AxiosRequestConfig): Promise<{}>;
    getDefaultDeviceProfileInfoUsingGET(options?: AxiosRequestConfig): Promise<{}>;
    getDeviceProfileInfoByIdUsingGET(deviceProfileId: string, options?: AxiosRequestConfig): Promise<{}>;
    getDeviceProfilesByIdsUsingGET(deviceProfileIds: string, options?: AxiosRequestConfig): Promise<any>;
    getDeviceProfileInfosUsingGET(pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, transportType: string, options?: AxiosRequestConfig): Promise<{}>;
    getDeviceProfilesUsingGET(pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    getCustomerEdgeInfosUsingGET(customerId: string, pageSize: number, page: number, includeCustomers: boolean, type: string, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    getCustomerEdgesUsingGET(customerId: string, pageSize: number, page: number, type: string, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    processEdgesBulkImportUsingPOST(data: schemas.BulkImportRequest, options?: AxiosRequestConfig): Promise<{}>;
    getEdgeInfoByIdUsingGET(edgeId: string, options?: AxiosRequestConfig): Promise<{}>;
    getEdgeInstallInstructionsUsingGET(edgeId: string, method: string, options?: AxiosRequestConfig): Promise<{}>;
    getEdgeUpgradeInstructionsUsingGET(edgeVersion: string, method: string, options?: AxiosRequestConfig): Promise<{}>;
    findMissingToRelatedRuleChainsUsingGET(edgeId: string, options?: AxiosRequestConfig): Promise<any>;
    syncEdgeUsingPOST(edgeId: string, options?: AxiosRequestConfig): Promise<{}>;
    getEdgeTypesUsingGET(options?: AxiosRequestConfig): Promise<any>;
    getEdgeByIdUsingGET(edgeId: string, options?: AxiosRequestConfig): Promise<{}>;
    deleteEdgeUsingDELETE(edgeId: string, options?: AxiosRequestConfig): Promise<any>;
    isEdgeUpgradeAvailableUsingGET(edgeId: string, options?: AxiosRequestConfig): Promise<any>;
    setEdgeRootRuleChainUsingPOST(edgeId: string, ruleChainId: string, options?: AxiosRequestConfig): Promise<{}>;
    getAllEdgeInfosUsingGET(pageSize: number, page: number, includeCustomers: boolean, type: string, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    findByQueryUsingPOST_2(data: schemas.EdgeSearchQuery, options?: AxiosRequestConfig): Promise<any>;
    isEdgesSupportEnabledUsingGET(options?: AxiosRequestConfig): Promise<any>;
    getEdgesByIdsUsingGET(edgeIds: string, options?: AxiosRequestConfig): Promise<any>;
    getEdgesUsingGET(pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    saveEdgeUsingPOST(entityGroupId: string, entityGroupIds: string, data: schemas.Edge, options?: AxiosRequestConfig): Promise<{}>;
    getEdgesByEntityGroupIdUsingGET(entityGroupId: string, pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    activateInstanceUsingPOST(licenseSecret: string, releaseDate: string, options?: AxiosRequestConfig): Promise<{}>;
    checkInstanceUsingPOST(data: schemas.JsonNode, options?: AxiosRequestConfig): Promise<{}>;
    getTenantEdgeUsingGET(edgeName: string, options?: AxiosRequestConfig): Promise<{}>;
    getTenantEdgesUsingGET(pageSize: number, page: number, type: string, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    getUserEdgesUsingGET(pageSize: number, page: number, type: string, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    getEdgeEventsUsingGET(edgeId: string, pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, startTime: number, endTime: number, options?: AxiosRequestConfig): Promise<{}>;
    listBranchesUsingGET(options?: AxiosRequestConfig): Promise<{}>;
    compareEntityDataToVersionUsingGET(entityType: string, internalEntityUuid: string, versionId: string, options?: AxiosRequestConfig): Promise<{}>;
    loadEntitiesVersionUsingPOST(data: schemas.VersionLoadRequest, options?: AxiosRequestConfig): Promise<any>;
    listEntitiesAtVersionUsingGET(entityType: string, versionId: string, options?: AxiosRequestConfig): Promise<{}>;
    getVersionLoadRequestStatusUsingGET(requestId: string, options?: AxiosRequestConfig): Promise<{}>;
    listAllEntitiesAtVersionUsingGET(versionId: string, options?: AxiosRequestConfig): Promise<{}>;
    getEntityDataInfoUsingGET(versionId: string, entityType: string, externalEntityUuid: string, internalEntityId: string, options?: AxiosRequestConfig): Promise<{}>;
    saveEntitiesVersionUsingPOST(data: schemas.VersionCreateRequest, options?: AxiosRequestConfig): Promise<{}>;
    listEntityVersionsUsingGET(entityType: string, externalEntityUuid: string, branch: string, internalEntityId: string, pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    listEntityTypeVersionsUsingGET(entityType: string, branch: string, pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    getVersionCreateRequestStatusUsingGET(requestId: string, options?: AxiosRequestConfig): Promise<{}>;
    listVersionsUsingGET(branch: string, pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    getAllEdgeEntityGroupsUsingGET(edgeId: string, groupType: string, options?: AxiosRequestConfig): Promise<any>;
    assignEntityGroupToEdgeUsingPOST(edgeId: string, groupType: string, entityGroupId: string, options?: AxiosRequestConfig): Promise<{}>;
    unassignEntityGroupFromEdgeUsingDELETE(edgeId: string, groupType: string, entityGroupId: string, options?: AxiosRequestConfig): Promise<{}>;
    saveEntityGroupUsingPOST(data: schemas.EntityGroup, options?: AxiosRequestConfig): Promise<{}>;
    getEntityGroupAllByOwnerAndTypeUsingGET(ownerType: string, ownerId: string, groupType: string, options?: AxiosRequestConfig): Promise<{}>;
    getEntityGroupByIdUsingGET(entityGroupId: string, options?: AxiosRequestConfig): Promise<{}>;
    deleteEntityGroupUsingDELETE(entityGroupId: string, options?: AxiosRequestConfig): Promise<any>;
    addEntitiesToEntityGroupUsingPOST(entityGroupId: string, data: string[], options?: AxiosRequestConfig): Promise<any>;
    removeEntitiesFromEntityGroupUsingPOST(entityGroupId: string, data: string[], options?: AxiosRequestConfig): Promise<any>;
    getEntitiesUsingGET(entityGroupId: string, pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    makeEntityGroupPrivateUsingPOST(entityGroupId: string, options?: AxiosRequestConfig): Promise<any>;
    makeEntityGroupPublicUsingPOST(entityGroupId: string, options?: AxiosRequestConfig): Promise<any>;
    shareEntityGroupUsingPOST(entityGroupId: string, data: schemas.ShareGroupRequest, options?: AxiosRequestConfig): Promise<any>;
    getGroupEntityUsingGET(entityGroupId: string, entityId: string, options?: AxiosRequestConfig): Promise<{}>;
    shareEntityGroupToChildOwnerUserGroupUsingPOST(entityGroupId: string, userGroupId: string, roleId: string, options?: AxiosRequestConfig): Promise<any>;
    getEntityGroupByOwnerAndNameAndTypeUsingGET(ownerType: string, ownerId: string, groupType: string, groupName: string, options?: AxiosRequestConfig): Promise<{}>;
    getEntityGroupEntityInfoByIdUsingGET(entityGroupId: string, options?: AxiosRequestConfig): Promise<{}>;
    getSharedEntityGroupEntityInfosByTypeAndPageLinkUsingGET(groupType: string, pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    getEntityGroupEntityInfosByTypeAndPageLinkUsingGET(groupType: string, includeShared: boolean, pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    getEntityGroupEntityInfosByOwnerAndTypeAndPageLinkUsingGET(ownerType: string, ownerId: string, groupType: string, pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    getEntityGroupEntityInfosHierarchyByOwnerAndTypeAndPageLinkUsingGET(ownerType: string, ownerId: string, groupType: string, pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    getEntityGroupEntityInfosByIdsUsingGET(entityGroupIds: string, options?: AxiosRequestConfig): Promise<any>;
    getEdgeEntityGroupsUsingGET(edgeId: string, groupType: string, pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    getEntityGroupsForEntityUsingGET(entityType: string, entityId: string, options?: AxiosRequestConfig): Promise<any>;
    getSharedEntityGroupsByTypeUsingGET(groupType: string, options?: AxiosRequestConfig): Promise<any>;
    getSharedEntityGroupsByTypeAndPageLinkUsingGET(groupType: string, pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    getEntityGroupsByTypeAndPageLinkUsingGET(groupType: string, includeShared: boolean, pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    getEntityGroupsByTypeUsingGET(groupType: string, includeShared: boolean, options?: AxiosRequestConfig): Promise<any>;
    getEntityGroupsByOwnerAndTypeUsingGET(ownerType: string, ownerId: string, groupType: string, options?: AxiosRequestConfig): Promise<any>;
    getEntityGroupsByOwnerAndTypeAndPageLinkUsingGET(ownerType: string, ownerId: string, groupType: string, pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    getEntityGroupsHierarchyByOwnerAndTypeAndPageLinkUsingGET(ownerType: string, ownerId: string, groupType: string, pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    getEntityGroupsByIdsUsingGET(entityGroupIds: string, options?: AxiosRequestConfig): Promise<any>;
    getOwnerInfoUsingGET(ownerType: string, ownerId: string, options?: AxiosRequestConfig): Promise<{}>;
    getOwnerInfosUsingGET(pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    getOwnersUsingGET(pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    countAlarmsByQueryUsingPOST(data: schemas.AlarmCountQuery, options?: AxiosRequestConfig): Promise<any>;
    findAlarmDataByQueryUsingPOST(data: schemas.AlarmDataQuery, options?: AxiosRequestConfig): Promise<{}>;
    countEntitiesByQueryUsingPOST(data: schemas.EntityCountQuery, options?: AxiosRequestConfig): Promise<any>;
    findEntityDataByQueryUsingPOST(data: schemas.EntityDataQuery, options?: AxiosRequestConfig): Promise<{}>;
    findEntityTimeseriesAndAttributesKeysByQueryUsingPOST(timeseries: boolean, attributes: boolean, data: schemas.EntityDataQuery, options?: AxiosRequestConfig): Promise<{}>;
    saveRelationUsingPOST(data: schemas.EntityRelation, options?: AxiosRequestConfig): Promise<any>;
    findByQueryUsingPOST_3(data: schemas.EntityRelationsQuery, options?: AxiosRequestConfig): Promise<any>;
    findInfoByQueryUsingPOST(data: schemas.EntityRelationsQuery, options?: AxiosRequestConfig): Promise<any>;
    findInfoByFromUsingGET(fromId: string, fromType: string, relationTypeGroup: string, options?: AxiosRequestConfig): Promise<any>;
    findInfoByToUsingGET(toId: string, toType: string, relationTypeGroup: string, options?: AxiosRequestConfig): Promise<any>;
    deleteRelationsUsingDELETE(entityId: string, entityType: string, options?: AxiosRequestConfig): Promise<any>;
    findByFromUsingGET(fromId: string, fromType: string, relationType: string, relationTypeGroup: string, options?: AxiosRequestConfig): Promise<any>;
    findByFromUsingGET_1(fromId: string, fromType: string, relationTypeGroup: string, options?: AxiosRequestConfig): Promise<any>;
    findByToUsingGET(toId: string, toType: string, relationType: string, relationTypeGroup: string, options?: AxiosRequestConfig): Promise<any>;
    findByToUsingGET_1(toId: string, toType: string, relationTypeGroup: string, options?: AxiosRequestConfig): Promise<any>;
    getRelationUsingGET(fromId: string, fromType: string, relationType: string, relationTypeGroup: string, toId: string, toType: string, options?: AxiosRequestConfig): Promise<{}>;
    deleteRelationUsingDELETE(fromId: string, fromType: string, relationType: string, relationTypeGroup: string, toId: string, toType: string, options?: AxiosRequestConfig): Promise<any>;
    getCustomerEntityViewInfosUsingGET(customerId: string, pageSize: number, page: number, includeCustomers: boolean, type: string, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    getCustomerEntityViewsUsingGET(customerId: string, pageSize: number, page: number, type: string, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    getEntityViewsByEntityGroupIdUsingGET(entityGroupId: string, pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    getEntityViewInfoByIdUsingGET(entityViewId: string, options?: AxiosRequestConfig): Promise<{}>;
    getEntityViewTypesUsingGET(options?: AxiosRequestConfig): Promise<any>;
    getEntityViewByIdUsingGET(entityViewId: string, options?: AxiosRequestConfig): Promise<{}>;
    deleteEntityViewUsingDELETE(entityViewId: string, options?: AxiosRequestConfig): Promise<any>;
    getAllEntityViewInfosUsingGET(pageSize: number, page: number, includeCustomers: boolean, type: string, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    findByQueryUsingPOST_4(data: schemas.EntityViewSearchQuery, options?: AxiosRequestConfig): Promise<any>;
    getEntityViewsByIdsUsingGET(entityViewIds: string, options?: AxiosRequestConfig): Promise<any>;
    saveEntityViewUsingPOST(entityGroupId: string, entityGroupIds: string, data: schemas.EntityView, options?: AxiosRequestConfig): Promise<{}>;
    getTenantEntityViewUsingGET(entityViewName: string, options?: AxiosRequestConfig): Promise<{}>;
    getTenantEntityViewsUsingGET(pageSize: number, page: number, type: string, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    getUserEntityViewsUsingGET(pageSize: number, page: number, type: string, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    clearEventsUsingPOST(entityType: string, entityId: string, startTime: number, endTime: number, data: schemas.EventFilter, options?: AxiosRequestConfig): Promise<any>;
    getEventsUsingGET_1(entityType: string, entityId: string, eventType: string, tenantId: string, pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, startTime: number, endTime: number, options?: AxiosRequestConfig): Promise<{}>;
    getEventsUsingGET(entityType: string, entityId: string, tenantId: string, pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, startTime: number, endTime: number, options?: AxiosRequestConfig): Promise<{}>;
    getEventsUsingPOST(entityType: string, entityId: string, tenantId: string, pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, startTime: number, endTime: number, data: schemas.EventFilter, options?: AxiosRequestConfig): Promise<{}>;
    getEntityGroupPermissionsUsingGET(entityGroupId: string, options?: AxiosRequestConfig): Promise<any>;
    saveGroupPermissionUsingPOST(data: schemas.GroupPermission, options?: AxiosRequestConfig): Promise<{}>;
    getGroupPermissionInfoByIdUsingGET(groupPermissionId: string, isUserGroup: boolean, options?: AxiosRequestConfig): Promise<{}>;
    getGroupPermissionByIdUsingGET(groupPermissionId: string, options?: AxiosRequestConfig): Promise<{}>;
    deleteGroupPermissionUsingDELETE(groupPermissionId: string, options?: AxiosRequestConfig): Promise<any>;
    loadUserGroupPermissionInfosUsingPOST(data: schemas.GroupPermission[], options?: AxiosRequestConfig): Promise<any>;
    getUserGroupPermissionsUsingGET(userGroupId: string, options?: AxiosRequestConfig): Promise<any>;
    uploadImageUsingPOST(options?: AxiosRequestConfig): Promise<{}>;
    importImageUsingPUT(data: schemas.ImageExportData, options?: AxiosRequestConfig): Promise<{}>;
    downloadPublicImageUsingGET(publicResourceKey: string, If_None_Match: string, options?: AxiosRequestConfig): Promise<any>;
    downloadImageUsingGET(type: string, key: string, If_None_Match: string, options?: AxiosRequestConfig): Promise<any>;
    updateImageUsingPUT(type: string, key: string, options?: AxiosRequestConfig): Promise<{}>;
    exportImageUsingGET(type: string, key: string, options?: AxiosRequestConfig): Promise<{}>;
    getImageInfoUsingGET(type: string, key: string, options?: AxiosRequestConfig): Promise<{}>;
    updateImageInfoUsingPUT(type: string, key: string, data: schemas.TbResourceInfo, options?: AxiosRequestConfig): Promise<{}>;
    downloadImagePreviewUsingGET(type: string, key: string, If_None_Match: string, options?: AxiosRequestConfig): Promise<any>;
    updateImagePublicStatusUsingPUT(type: string, key: string, isPublic: boolean, options?: AxiosRequestConfig): Promise<{}>;
    deleteImageUsingDELETE(type: string, key: string, force: boolean, options?: AxiosRequestConfig): Promise<{}>;
    getImagesUsingGET(pageSize: number, page: number, includeSystemImages: boolean, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    downloadLoginFaviconUsingGET(type: string, key: string, If_None_Match: string, options?: AxiosRequestConfig): Promise<any>;
    downloadLoginLogoUsingGET(type: string, key: string, If_None_Match: string, options?: AxiosRequestConfig): Promise<any>;
    findEdgeMissingAttributesUsingGET(edgeId: string, integrationIds: string, options?: AxiosRequestConfig): Promise<any>;
    findAllRelatedEdgesMissingAttributesUsingGET(integrationId: string, options?: AxiosRequestConfig): Promise<any>;
    assignIntegrationToEdgeUsingPOST(edgeId: string, integrationId: string, options?: AxiosRequestConfig): Promise<{}>;
    unassignIntegrationFromEdgeUsingDELETE(edgeId: string, integrationId: string, options?: AxiosRequestConfig): Promise<{}>;
    getEdgeIntegrationInfosUsingGET(edgeId: string, pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    getEdgeIntegrationsUsingGET(edgeId: string, pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    saveIntegrationUsingPOST(data: schemas.Integration, options?: AxiosRequestConfig): Promise<{}>;
    checkIntegrationConnectionUsingPOST(data: schemas.Integration, options?: AxiosRequestConfig): Promise<any>;
    getIntegrationByRoutingKeyUsingGET(routingKey: string, options?: AxiosRequestConfig): Promise<{}>;
    getIntegrationByIdUsingGET(integrationId: string, options?: AxiosRequestConfig): Promise<{}>;
    deleteIntegrationUsingDELETE(integrationId: string, options?: AxiosRequestConfig): Promise<any>;
    getIntegrationInfosUsingGET(isEdgeTemplate: boolean, pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    getIntegrationsByIdsUsingGET(integrationIds: string, options?: AxiosRequestConfig): Promise<any>;
    getIntegrationsUsingGET(isEdgeTemplate: boolean, pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    getClientRegistrationTemplatesUsingGET(options?: AxiosRequestConfig): Promise<{}>;
    getAvailableDeliveryMethodsUsingGET(options?: AxiosRequestConfig): Promise<any>;
    createNotificationRequestUsingPOST(data: schemas.NotificationRequest, options?: AxiosRequestConfig): Promise<{}>;
    getNotificationRequestPreviewUsingPOST(recipientsPreviewSize: number, data: schemas.NotificationRequest, options?: AxiosRequestConfig): Promise<{}>;
    getNotificationRequestByIdUsingGET(id: string, options?: AxiosRequestConfig): Promise<{}>;
    deleteNotificationRequestUsingDELETE(id: string, options?: AxiosRequestConfig): Promise<any>;
    getNotificationRequestsUsingGET(pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    getNotificationSettingsUsingGET(options?: AxiosRequestConfig): Promise<{}>;
    saveNotificationSettingsUsingPOST(data: schemas.NotificationSettings, options?: AxiosRequestConfig): Promise<{}>;
    getUserNotificationSettingsUsingGET(options?: AxiosRequestConfig): Promise<{}>;
    saveUserNotificationSettingsUsingPOST(data: schemas.UserNotificationSettings, options?: AxiosRequestConfig): Promise<{}>;
    deleteNotificationUsingDELETE(id: string, options?: AxiosRequestConfig): Promise<any>;
    markNotificationAsReadUsingPUT(id: string, options?: AxiosRequestConfig): Promise<any>;
    markAllNotificationsAsReadUsingPUT(options?: AxiosRequestConfig): Promise<any>;
    getNotificationsUsingGET(pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, unreadOnly: boolean, options?: AxiosRequestConfig): Promise<{}>;
    saveNotificationRuleUsingPOST(data: schemas.NotificationRule, options?: AxiosRequestConfig): Promise<{}>;
    getNotificationRuleByIdUsingGET(id: string, options?: AxiosRequestConfig): Promise<{}>;
    deleteNotificationRuleUsingDELETE(id: string, options?: AxiosRequestConfig): Promise<any>;
    getNotificationRulesUsingGET(pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    saveNotificationTargetUsingPOST(data: schemas.NotificationTarget, options?: AxiosRequestConfig): Promise<{}>;
    getRecipientsForNotificationTargetConfigUsingPOST(pageSize: number, page: number, data: schemas.NotificationTarget, options?: AxiosRequestConfig): Promise<{}>;
    getNotificationTargetByIdUsingGET(id: string, options?: AxiosRequestConfig): Promise<{}>;
    deleteNotificationTargetByIdUsingDELETE(id: string, options?: AxiosRequestConfig): Promise<any>;
    getNotificationTargetsByIdsUsingGET(ids: string, options?: AxiosRequestConfig): Promise<any>;
    getNotificationTargetsBySupportedNotificationTypeUsingGET(notificationType: string, pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    getNotificationTargetsUsingGET(pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    listSlackConversationsUsingGET(type: string, token: string, options?: AxiosRequestConfig): Promise<any>;
    saveNotificationTemplateUsingPOST(data: schemas.NotificationTemplate, options?: AxiosRequestConfig): Promise<{}>;
    getNotificationTemplateByIdUsingGET(id: string, options?: AxiosRequestConfig): Promise<{}>;
    deleteNotificationTemplateByIdUsingDELETE(id: string, options?: AxiosRequestConfig): Promise<any>;
    getNotificationTemplatesUsingGET(pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, notificationTypes: string, options?: AxiosRequestConfig): Promise<{}>;
    getClientRegistrationTemplatesUsingGET_1(options?: AxiosRequestConfig): Promise<any>;
    saveClientRegistrationTemplateUsingPOST(data: schemas.OAuth2ClientRegistrationTemplate, options?: AxiosRequestConfig): Promise<{}>;
    deleteClientRegistrationTemplateUsingDELETE(clientRegistrationTemplateId: string, options?: AxiosRequestConfig): Promise<any>;
    getOAuth2ClientsUsingPOST(pkgName: string, platform: string, options?: AxiosRequestConfig): Promise<any>;
    getCurrentOAuth2InfoUsingGET(options?: AxiosRequestConfig): Promise<{}>;
    saveOAuth2InfoUsingPOST(data: schemas.OAuth2Info, options?: AxiosRequestConfig): Promise<{}>;
    getLoginProcessingUrlUsingGET(options?: AxiosRequestConfig): Promise<any>;
    saveOtaPackageInfoUsingPOST(data: schemas.SaveOtaPackageInfoRequest, options?: AxiosRequestConfig): Promise<{}>;
    getOtaPackageInfoByIdUsingGET(otaPackageId: string, options?: AxiosRequestConfig): Promise<{}>;
    getOtaPackageByIdUsingGET(otaPackageId: string, options?: AxiosRequestConfig): Promise<{}>;
    saveOtaPackageDataUsingPOST(otaPackageId: string, options?: AxiosRequestConfig): Promise<{}>;
    deleteOtaPackageUsingDELETE(otaPackageId: string, options?: AxiosRequestConfig): Promise<any>;
    downloadOtaPackageUsingGET(otaPackageId: string, options?: AxiosRequestConfig): Promise<{}>;
    getGroupOtaPackagesUsingGET(groupId: string, type: string, pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    getOtaPackagesUsingGET_1(deviceProfileId: string, type: string, pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    getOtaPackagesUsingGET(pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    changeOwnerToCustomerUsingPOST(ownerId: string, entityType: string, entityId: string, data: string[], options?: AxiosRequestConfig): Promise<any>;
    changeOwnerToTenantUsingPOST(ownerId: string, entityType: string, entityId: string, data: string[], options?: AxiosRequestConfig): Promise<any>;
    getQueueByNameUsingGET(queueName: string, options?: AxiosRequestConfig): Promise<{}>;
    getQueueByIdUsingGET(queueId: string, options?: AxiosRequestConfig): Promise<{}>;
    deleteQueueUsingDELETE(queueId: string, options?: AxiosRequestConfig): Promise<any>;
    getTenantQueuesByServiceTypeUsingGET(serviceType: string, pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    saveQueueUsingPOST(serviceType: string, data: schemas.Queue, options?: AxiosRequestConfig): Promise<{}>;
    downloadTestReportUsingPOST(reportsServerEndpointUrl: string, data: schemas.ReportConfig, options?: AxiosRequestConfig): Promise<{}>;
    downloadDashboardReportUsingPOST(dashboardId: string, data: schemas.JsonNode, options?: AxiosRequestConfig): Promise<{}>;
    saveRoleUsingPOST(data: schemas.Role, options?: AxiosRequestConfig): Promise<{}>;
    getRoleByIdUsingGET(roleId: string, options?: AxiosRequestConfig): Promise<{}>;
    deleteRoleUsingDELETE(roleId: string, options?: AxiosRequestConfig): Promise<any>;
    getRolesUsingGET(pageSize: number, page: number, type: string, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    getRolesByIdsUsingGET(roleIds: string, options?: AxiosRequestConfig): Promise<any>;
    handleOneWayDeviceRPCRequestUsingPOST(deviceId: string, data: string, options?: AxiosRequestConfig): Promise<{}>;
    handleTwoWayDeviceRPCRequestUsingPOST(deviceId: string, data: string, options?: AxiosRequestConfig): Promise<{}>;
    handleOneWayDeviceRPCRequestUsingPOST_1(deviceId: string, data: string, options?: AxiosRequestConfig): Promise<{}>;
    getPersistedRpcByDeviceUsingGET(deviceId: string, pageSize: number, page: number, rpcStatus: string, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    getPersistedRpcUsingGET(rpcId: string, options?: AxiosRequestConfig): Promise<{}>;
    deleteRpcUsingDELETE(rpcId: string, options?: AxiosRequestConfig): Promise<any>;
    handleTwoWayDeviceRPCRequestUsingPOST_1(deviceId: string, data: string, options?: AxiosRequestConfig): Promise<{}>;
    assignRuleChainToEdgeUsingPOST(edgeId: string, ruleChainId: string, options?: AxiosRequestConfig): Promise<{}>;
    unassignRuleChainFromEdgeUsingDELETE(edgeId: string, ruleChainId: string, options?: AxiosRequestConfig): Promise<{}>;
    getEdgeRuleChainsUsingGET(edgeId: string, pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    saveRuleChainUsingPOST_1(data: schemas.RuleChain, options?: AxiosRequestConfig): Promise<{}>;
    getAutoAssignToEdgeRuleChainsUsingGET(options?: AxiosRequestConfig): Promise<any>;
    saveRuleChainUsingPOST(data: schemas.DefaultRuleChainCreateRequest, options?: AxiosRequestConfig): Promise<{}>;
    saveRuleChainMetaDataUsingPOST(updateRelated: boolean, data: schemas.RuleChainMetaData, options?: AxiosRequestConfig): Promise<{}>;
    isTbelEnabledUsingGET(options?: AxiosRequestConfig): Promise<any>;
    testScriptUsingPOST(scriptLang: string, data: schemas.JsonNode, options?: AxiosRequestConfig): Promise<{}>;
    getRuleChainByIdUsingGET(ruleChainId: string, options?: AxiosRequestConfig): Promise<{}>;
    deleteRuleChainUsingDELETE(ruleChainId: string, options?: AxiosRequestConfig): Promise<any>;
    setAutoAssignToEdgeRuleChainUsingPOST(ruleChainId: string, options?: AxiosRequestConfig): Promise<{}>;
    unsetAutoAssignToEdgeRuleChainUsingDELETE(ruleChainId: string, options?: AxiosRequestConfig): Promise<{}>;
    setEdgeTemplateRootRuleChainUsingPOST(ruleChainId: string, options?: AxiosRequestConfig): Promise<{}>;
    getRuleChainMetaDataUsingGET(ruleChainId: string, options?: AxiosRequestConfig): Promise<{}>;
    getRuleChainOutputLabelsUsingGET(ruleChainId: string, options?: AxiosRequestConfig): Promise<any>;
    getRuleChainOutputLabelsUsageUsingGET(ruleChainId: string, options?: AxiosRequestConfig): Promise<any>;
    setRootRuleChainUsingPOST(ruleChainId: string, options?: AxiosRequestConfig): Promise<{}>;
    exportRuleChainsUsingGET(limit: number, options?: AxiosRequestConfig): Promise<{}>;
    importRuleChainsUsingPOST(overwrite: boolean, data: schemas.RuleChainData, options?: AxiosRequestConfig): Promise<any>;
    getRuleChainsUsingGET(pageSize: number, page: number, type: string, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    getLatestRuleNodeDebugInputUsingGET(ruleNodeId: string, options?: AxiosRequestConfig): Promise<{}>;
    handleRuleEngineRequestUsingPOST_3(data: string, options?: AxiosRequestConfig): Promise<{}>;
    handleRuleEngineRequestUsingPOST_2(entityType: string, entityId: string, data: string, options?: AxiosRequestConfig): Promise<{}>;
    handleRuleEngineRequestUsingPOST_1(entityType: string, entityId: string, queueName: string, timeout: number, data: string, options?: AxiosRequestConfig): Promise<{}>;
    handleRuleEngineRequestUsingPOST(entityType: string, entityId: string, timeout: number, data: string, options?: AxiosRequestConfig): Promise<{}>;
    getAllSchedulerEventsUsingGET(edgeId: string, options?: AxiosRequestConfig): Promise<any>;
    assignSchedulerEventToEdgeUsingPOST(edgeId: string, schedulerEventId: string, options?: AxiosRequestConfig): Promise<{}>;
    unassignSchedulerEventFromEdgeUsingDELETE(edgeId: string, schedulerEventId: string, options?: AxiosRequestConfig): Promise<{}>;
    getEdgeSchedulerEventsUsingGET(edgeId: string, pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    saveSchedulerEventUsingPOST(data: schemas.SchedulerEvent, options?: AxiosRequestConfig): Promise<{}>;
    getSchedulerEventInfoByIdUsingGET(schedulerEventId: string, options?: AxiosRequestConfig): Promise<{}>;
    getSchedulerEventByIdUsingGET(schedulerEventId: string, options?: AxiosRequestConfig): Promise<{}>;
    deleteSchedulerEventUsingDELETE(schedulerEventId: string, options?: AxiosRequestConfig): Promise<any>;
    getSchedulerEventsByIdsUsingGET(schedulerEventIds: string, options?: AxiosRequestConfig): Promise<any>;
    getSchedulerEventsUsingGET(type: string, options?: AxiosRequestConfig): Promise<any>;
    getPrivacyPolicyUsingGET(options?: AxiosRequestConfig): Promise<any>;
    getSignUpSelfRegistrationParamsUsingGET(pkgName: string, options?: AxiosRequestConfig): Promise<{}>;
    getTermsOfUseUsingGET(options?: AxiosRequestConfig): Promise<any>;
    getSelfRegistrationParamsUsingGET(options?: AxiosRequestConfig): Promise<{}>;
    saveSelfRegistrationParamsUsingPOST(data: schemas.SelfRegistrationParams, options?: AxiosRequestConfig): Promise<{}>;
    deleteSelfRegistrationParamsUsingDELETE(domainName: string, options?: AxiosRequestConfig): Promise<{}>;
    activateUserByEmailCodeUsingPOST(emailCode: string, pkgName: string, options?: AxiosRequestConfig): Promise<{}>;
    activateEmailUsingGET(emailCode: string, pkgName: string, options?: AxiosRequestConfig): Promise<any>;
    mobileLoginUsingGET(pkgName: string, options?: AxiosRequestConfig): Promise<any>;
    resendEmailActivationUsingPOST(email: string, pkgName: string, options?: AxiosRequestConfig): Promise<any>;
    signUpUsingPOST(data: schemas.SignUpRequest, options?: AxiosRequestConfig): Promise<any>;
    acceptPrivacyPolicyUsingPOST(options?: AxiosRequestConfig): Promise<{}>;
    acceptTermsOfUseUsingPOST(options?: AxiosRequestConfig): Promise<{}>;
    privacyPolicyAcceptedUsingGET(options?: AxiosRequestConfig): Promise<any>;
    termsOfUseAcceptedUsingGET(options?: AxiosRequestConfig): Promise<any>;
    getSolutionTemplateDetailsUsingGET(solutionTemplateId: string, options?: AxiosRequestConfig): Promise<{}>;
    getSolutionTemplateInfosUsingGET(options?: AxiosRequestConfig): Promise<any>;
    getSolutionTemplateInstructionsUsingGET(solutionTemplateId: string, options?: AxiosRequestConfig): Promise<{}>;
    uninstallSolutionTemplateUsingDELETE(solutionTemplateId: string, options?: AxiosRequestConfig): Promise<any>;
    installSolutionTemplateUsingPOST(solutionTemplateId: string, options?: AxiosRequestConfig): Promise<{}>;
    saveResourceUsingPOST(data: schemas.TbResource, options?: AxiosRequestConfig): Promise<{}>;
    getResourceInfoByIdUsingGET(resourceId: string, options?: AxiosRequestConfig): Promise<{}>;
    downloadJksResourceIfChangedUsingGET(resourceId: string, If_None_Match: string, options?: AxiosRequestConfig): Promise<any>;
    downloadJsResourceIfChangedUsingGET(resourceId: string, If_None_Match: string, options?: AxiosRequestConfig): Promise<any>;
    getLwm2mListObjectsPageUsingGET(pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<any>;
    downloadLwm2mResourceIfChangedUsingGET(resourceId: string, If_None_Match: string, options?: AxiosRequestConfig): Promise<any>;
    getLwm2mListObjectsUsingGET(sortOrder: string, sortProperty: string, objectIds: string, options?: AxiosRequestConfig): Promise<any>;
    downloadPkcs12ResourceIfChangedUsingGET(resourceId: string, If_None_Match: string, options?: AxiosRequestConfig): Promise<any>;
    getTenantResourcesUsingGET(pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    deleteResourceUsingDELETE(resourceId: string, options?: AxiosRequestConfig): Promise<any>;
    downloadResourceUsingGET(resourceId: string, options?: AxiosRequestConfig): Promise<{}>;
    getResourcesUsingGET(pageSize: number, page: number, resourceType: string, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    saveDeviceAttributesUsingPOST(deviceId: string, scope: string, data: schemas.JsonNode, options?: AxiosRequestConfig): Promise<{}>;
    deleteDeviceAttributesUsingDELETE(deviceId: string, scope: string, keys: string, options?: AxiosRequestConfig): Promise<{}>;
    saveEntityAttributesV2UsingPOST(entityType: string, entityId: string, scope: string, data: schemas.JsonNode, options?: AxiosRequestConfig): Promise<{}>;
    getAttributeKeysUsingGET(entityType: string, entityId: string, options?: AxiosRequestConfig): Promise<{}>;
    getAttributeKeysByScopeUsingGET(entityType: string, entityId: string, scope: string, options?: AxiosRequestConfig): Promise<{}>;
    getTimeseriesKeysUsingGET_1(entityType: string, entityId: string, options?: AxiosRequestConfig): Promise<{}>;
    deleteEntityTimeseriesUsingDELETE(entityType: string, entityId: string, keys: string, deleteAllDataForKeys: boolean, startTs: number, endTs: number, deleteLatest: boolean, rewriteLatestIfDeleted: boolean, options?: AxiosRequestConfig): Promise<{}>;
    saveEntityTelemetryWithTTLUsingPOST(entityType: string, entityId: string, scope: string, ttl: number, data: string, options?: AxiosRequestConfig): Promise<{}>;
    saveEntityTelemetryUsingPOST(entityType: string, entityId: string, scope: string, data: string, options?: AxiosRequestConfig): Promise<{}>;
    getAttributesByScopeUsingGET(entityType: string, entityId: string, scope: string, keys: string, options?: AxiosRequestConfig): Promise<{}>;
    getAttributesUsingGET(entityType: string, entityId: string, keys: string, options?: AxiosRequestConfig): Promise<{}>;
    getTimeseriesUsingGET(entityType: string, entityId: string, keys: string, startTs: number, endTs: number, interval: number, limit: number, agg: string, orderBy: string, useStrictDataTypes: boolean, options?: AxiosRequestConfig): Promise<{}>;
    getLatestTimeseriesUsingGET(entityType: string, entityId: string, keys: string, useStrictDataTypes: boolean, options?: AxiosRequestConfig): Promise<{}>;
    saveEntityAttributesV1UsingPOST(entityType: string, entityId: string, scope: string, data: schemas.JsonNode, options?: AxiosRequestConfig): Promise<{}>;
    deleteEntityAttributesUsingDELETE(entityType: string, entityId: string, scope: string, keys: string, options?: AxiosRequestConfig): Promise<{}>;
    saveTenantUsingPOST(data: schemas.Tenant, options?: AxiosRequestConfig): Promise<{}>;
    getTenantInfoByIdUsingGET(tenantId: string, options?: AxiosRequestConfig): Promise<{}>;
    getTenantByIdUsingGET(tenantId: string, options?: AxiosRequestConfig): Promise<{}>;
    deleteTenantUsingDELETE(tenantId: string, options?: AxiosRequestConfig): Promise<any>;
    getTenantInfosUsingGET(pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    getTenantsUsingGET(pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    getTenantsByIdsUsingGET(tenantIds: string, options?: AxiosRequestConfig): Promise<any>;
    saveTenantProfileUsingPOST(data: schemas.TenantProfile, options?: AxiosRequestConfig): Promise<{}>;
    getTenantProfileByIdUsingGET(tenantProfileId: string, options?: AxiosRequestConfig): Promise<{}>;
    deleteTenantProfileUsingDELETE(tenantProfileId: string, options?: AxiosRequestConfig): Promise<any>;
    setDefaultTenantProfileUsingPOST(tenantProfileId: string, options?: AxiosRequestConfig): Promise<{}>;
    getDefaultTenantProfileInfoUsingGET(options?: AxiosRequestConfig): Promise<{}>;
    getTenantProfileInfoByIdUsingGET(tenantProfileId: string, options?: AxiosRequestConfig): Promise<{}>;
    getTenantProfileInfosUsingGET(pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    getTenantProfilesByIdsUsingGET(ids: string, options?: AxiosRequestConfig): Promise<any>;
    getTenantProfilesUsingGET(pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    generateTwoFaAccountConfigUsingPOST(providerType: string, options?: AxiosRequestConfig): Promise<{}>;
    submitTwoFaAccountConfigUsingPOST(data: schemas.TwoFaAccountConfig, options?: AxiosRequestConfig): Promise<any>;
    updateTwoFaAccountConfigUsingPUT(providerType: string, data: schemas.TwoFaAccountConfigUpdateRequest, options?: AxiosRequestConfig): Promise<{}>;
    deleteTwoFaAccountConfigUsingDELETE(providerType: string, options?: AxiosRequestConfig): Promise<{}>;
    verifyAndSaveTwoFaAccountConfigUsingPOST(verificationCode: string, data: schemas.TwoFaAccountConfig, options?: AxiosRequestConfig): Promise<{}>;
    getAccountTwoFaSettingsUsingGET(options?: AxiosRequestConfig): Promise<{}>;
    getAvailableTwoFaProvidersUsingGET(options?: AxiosRequestConfig): Promise<any>;
    getPlatformTwoFaSettingsUsingGET(options?: AxiosRequestConfig): Promise<{}>;
    savePlatformTwoFaSettingsUsingPOST(data: schemas.PlatformTwoFaSettings, options?: AxiosRequestConfig): Promise<{}>;
    getAvailableTwoFaProvidersUsingGET_1(options?: AxiosRequestConfig): Promise<any>;
    checkTwoFaVerificationCodeUsingPOST(providerType: string, verificationCode: string, options?: AxiosRequestConfig): Promise<{}>;
    requestTwoFaVerificationCodeUsingPOST(providerType: string, options?: AxiosRequestConfig): Promise<any>;
    getHelpBaseUrlUsingGET(options?: AxiosRequestConfig): Promise<any>;
    getTenantUsageInfoUsingGET(options?: AxiosRequestConfig): Promise<{}>;
    getAllCustomerUsersUsingGET(pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    getCustomerUserInfosUsingGET(customerId: string, pageSize: number, page: number, includeCustomers: boolean, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    getCustomerUsersUsingGET(customerId: string, pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    getUsersByEntityGroupIdUsingGET(entityGroupId: string, pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    getTenantAdminsUsingGET(tenantId: string, pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    getUserDashboardsInfoUsingGET(options?: AxiosRequestConfig): Promise<{}>;
    reportUserDashboardActionUsingGET(dashboardId: string, action: string, options?: AxiosRequestConfig): Promise<{}>;
    getUserInfoByIdUsingGET(userId: string, options?: AxiosRequestConfig): Promise<{}>;
    sendActivationEmailUsingPOST(email: string, options?: AxiosRequestConfig): Promise<any>;
    getUserSettingsUsingGET(options?: AxiosRequestConfig): Promise<{}>;
    putUserSettingsUsingPUT(data: schemas.JsonNode, options?: AxiosRequestConfig): Promise<any>;
    saveUserSettingsUsingPOST(data: schemas.JsonNode, options?: AxiosRequestConfig): Promise<{}>;
    deleteUserSettingsUsingDELETE_1(paths: string, options?: AxiosRequestConfig): Promise<any>;
    getUserSettingsUsingGET_1(type: string, options?: AxiosRequestConfig): Promise<{}>;
    putUserSettingsUsingPUT_1(type: string, data: schemas.JsonNode, options?: AxiosRequestConfig): Promise<any>;
    deleteUserSettingsUsingDELETE(paths: string, type: string, options?: AxiosRequestConfig): Promise<any>;
    isUserTokenAccessEnabledUsingGET(options?: AxiosRequestConfig): Promise<any>;
    getUserUsersUsingGET(pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    getUserByIdUsingGET(userId: string, options?: AxiosRequestConfig): Promise<{}>;
    deleteUserUsingDELETE(userId: string, options?: AxiosRequestConfig): Promise<any>;
    getActivationLinkUsingGET(userId: string, options?: AxiosRequestConfig): Promise<any>;
    getUserTokenUsingGET(userId: string, options?: AxiosRequestConfig): Promise<{}>;
    setUserCredentialsEnabledUsingPOST(userId: string, userCredentialsEnabled: boolean, options?: AxiosRequestConfig): Promise<any>;
    getAllUserInfosUsingGET(pageSize: number, page: number, includeCustomers: boolean, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    getUsersForAssignUsingGET(alarmId: string, pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    findUsersByQueryUsingGET(pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, options?: AxiosRequestConfig): Promise<{}>;
    getUsersByIdsUsingGET(userIds: string, options?: AxiosRequestConfig): Promise<any>;
    saveUserUsingPOST(sendActivationMail: boolean, entityGroupId: string, entityGroupIds: string, data: schemas.User, options?: AxiosRequestConfig): Promise<{}>;
    getAllowedPermissionsUsingGET(options?: AxiosRequestConfig): Promise<{}>;
    getLoginWhiteLabelParamsUsingGET(options?: AxiosRequestConfig): Promise<{}>;
    getCurrentLoginWhiteLabelParamsUsingGET(customerId: string, options?: AxiosRequestConfig): Promise<{}>;
    getCurrentWhiteLabelParamsUsingGET(customerId: string, options?: AxiosRequestConfig): Promise<{}>;
    isCustomerWhiteLabelingAllowedUsingGET(options?: AxiosRequestConfig): Promise<any>;
    isWhiteLabelingAllowedUsingGET(options?: AxiosRequestConfig): Promise<any>;
    saveLoginWhiteLabelParamsUsingPOST(customerId: string, data: schemas.LoginWhiteLabelingParams, options?: AxiosRequestConfig): Promise<{}>;
    saveMailTemplatesUsingPOST(data: schemas.JsonNode, options?: AxiosRequestConfig): Promise<{}>;
    getMailTemplatesUsingGET(systemByDefault: boolean, options?: AxiosRequestConfig): Promise<{}>;
    previewWhiteLabelParamsUsingPOST(data: schemas.WhiteLabelingParams, options?: AxiosRequestConfig): Promise<{}>;
    getWhiteLabelParamsUsingGET(options?: AxiosRequestConfig): Promise<{}>;
    saveWhiteLabelParamsUsingPOST(customerId: string, data: schemas.WhiteLabelingParams, options?: AxiosRequestConfig): Promise<{}>;
    deleteWidgetTypeUsingDELETE(widgetTypeId: string, options?: AxiosRequestConfig): Promise<any>;
    getWidgetTypeByIdUsingGET(widgetTypeId: string, inlineImages: boolean, options?: AxiosRequestConfig): Promise<{}>;
    getBundleWidgetTypeFqnsUsingGET(widgetsBundleId: string, options?: AxiosRequestConfig): Promise<any>;
    getWidgetTypeInfoByIdUsingGET(widgetTypeId: string, options?: AxiosRequestConfig): Promise<{}>;
    getBundleWidgetTypesDetailsByBundleAliasUsingGET(isSystem: boolean, bundleAlias: string, options?: AxiosRequestConfig): Promise<any>;
    getBundleWidgetTypesDetailsUsingGET(widgetsBundleId: string, inlineImages: boolean, options?: AxiosRequestConfig): Promise<any>;
    getBundleWidgetTypesInfosByBundleAliasUsingGET(isSystem: boolean, bundleAlias: string, options?: AxiosRequestConfig): Promise<any>;
    getBundleWidgetTypesInfosUsingGET(widgetsBundleId: string, pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, fullSearch: boolean, deprecatedFilter: string, widgetTypeList: string, options?: AxiosRequestConfig): Promise<{}>;
    getBundleWidgetTypesByBundleAliasUsingGET(isSystem: boolean, bundleAlias: string, options?: AxiosRequestConfig): Promise<any>;
    getWidgetTypesUsingGET(pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, tenantOnly: boolean, fullSearch: boolean, deprecatedFilter: string, widgetTypeList: string, options?: AxiosRequestConfig): Promise<{}>;
    getBundleWidgetTypesUsingGET(widgetsBundleId: string, options?: AxiosRequestConfig): Promise<any>;
    getWidgetTypeByBundleAliasAndTypeAliasUsingGET(isSystem: boolean, bundleAlias: string, alias: string, options?: AxiosRequestConfig): Promise<{}>;
    getWidgetTypeUsingGET(fqn: string, options?: AxiosRequestConfig): Promise<{}>;
    saveWidgetTypeUsingPOST(updateExistingByFqn: boolean, data: schemas.WidgetTypeDetails, options?: AxiosRequestConfig): Promise<{}>;
    saveWidgetsBundleUsingPOST(data: schemas.WidgetsBundle, options?: AxiosRequestConfig): Promise<{}>;
    deleteWidgetsBundleUsingDELETE(widgetsBundleId: string, options?: AxiosRequestConfig): Promise<any>;
    updateWidgetsBundleWidgetFqnsUsingPOST(widgetsBundleId: string, data: string[], options?: AxiosRequestConfig): Promise<any>;
    updateWidgetsBundleWidgetTypesUsingPOST(widgetsBundleId: string, data: string[], options?: AxiosRequestConfig): Promise<any>;
    getWidgetsBundleByIdUsingGET(widgetsBundleId: string, inlineImages: boolean, options?: AxiosRequestConfig): Promise<{}>;
    getWidgetsBundlesUsingGET(options?: AxiosRequestConfig): Promise<any>;
    getWidgetsBundlesUsingGET_1(pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, tenantOnly: boolean, fullSearch: boolean, options?: AxiosRequestConfig): Promise<{}>;
    getWidgetsBundlesByIdsUsingGET(widgetsBundleIds: string, options?: AxiosRequestConfig): Promise<any>;
}
export * from './schemas';
