"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BackupCodeTwoFaAccountConfigSchema = exports.AwsSnsSmsProviderConfigurationSchema = exports.AutoVersionCreateConfigSchema = exports.AuditLogIdSchema = exports.AuditLogSchema = exports.AttributesEntityViewSchema = exports.AttributeExportDataSchema = exports.AtomicIntegerSchema = exports.AssetTypeFilterSchema = exports.AssetSearchQueryFilterSchema = exports.AssetSearchQuerySchema = exports.AssetProfileInfoSchema = exports.AssetProfileIdSchema = exports.AssetProfileSchema = exports.AssetInfoSchema = exports.AssetIdSchema = exports.AssetSchema = exports.ArrayNodeSchema = exports.ApiUsageStateFilterSchema = exports.ApiUsageLimitNotificationRuleTriggerConfigSchema = exports.AnyTimeScheduleSchema = exports.AllowedPermissionsInfoSchema = exports.AllowCreateNewDevicesDeviceProfileProvisionConfigurationSchema = exports.AllUsersFilterSchema = exports.AlarmScheduleSchema = exports.AlarmRuleSchema = exports.AlarmNotificationRuleTriggerConfigSchema = exports.AlarmInfoSchema = exports.AlarmIdSchema = exports.AlarmDataQuerySchema = exports.AlarmDataPageLinkSchema = exports.AlarmDataSchema = exports.AlarmCountQuerySchema = exports.AlarmConditionSpecSchema = exports.AlarmConditionFilterKeySchema = exports.AlarmConditionFilterSchema = exports.AlarmConditionSchema = exports.AlarmCommentNotificationRuleTriggerConfigSchema = exports.AlarmCommentInfoSchema = exports.AlarmCommentIdSchema = exports.AlarmCommentSchema = exports.AlarmAssignmentNotificationRuleTriggerConfigSchema = exports.AlarmAssigneeSchema = exports.AlarmSchema = exports.AffectedUserFilterSchema = exports.AffectedTenantAdministratorsFilterSchema = exports.AdminSettingsIdSchema = exports.AdminSettingsSchema = exports.ActivateUserRequestSchema = exports.AccountTwoFaSettingsSchema = void 0;
exports.DefaultRuleChainCreateRequestSchema = exports.DefaultDeviceTransportConfigurationSchema = exports.DefaultDeviceProfileTransportConfigurationSchema = exports.DefaultDeviceProfileConfigurationSchema = exports.DefaultDeviceConfigurationSchema = exports.DefaultCoapDeviceTypeConfigurationSchema = exports.DebugIntegrationEventFilterSchema = exports.DebugConverterEventFilterSchema = exports.DashboardInfoSchema = exports.DashboardIdSchema = exports.DashboardSchema = exports.CustomerUsersFilterSchema = exports.CustomerInfoSchema = exports.CustomerIdSchema = exports.CustomerSchema = exports.CustomTranslationSchema = exports.CustomTimeScheduleItemSchema = exports.CustomTimeScheduleSchema = exports.CustomMenuItemSchema = exports.CustomMenuSchema = exports.ConverterIdSchema = exports.ConverterSchema = exports.ContactBased_Of_objectSchema = exports.ComponentDescriptorIdSchema = exports.ComponentDescriptorSchema = exports.ComplexVersionCreateRequestSchema = exports.ComplexFilterPredicateSchema = exports.ComparisonTsValueSchema = exports.ColumnMappingSchema = exports.CoapDeviceTypeConfigurationSchema = exports.CoapDeviceTransportConfigurationSchema = exports.CoapDeviceProfileTransportConfigurationSchema = exports.ClientAttributesQueryingSnmpCommunicationConfigSchema = exports.ClearRuleSchema = exports.ClaimRequestSchema = exports.CheckPreProvisionedDevicesDeviceProfileProvisionConfigurationSchema = exports.ChangePasswordRequestSchema = exports.ByteBufferSchema = exports.ByteArrayResourceSchema = exports.ButtonSchema = exports.BulkImportResult_Of_EdgeSchema = exports.BulkImportResult_Of_DeviceSchema = exports.BulkImportResult_Of_AssetSchema = exports.BulkImportRequestSchema = exports.BranchInfoSchema = exports.BooleanFilterPredicateSchema = exports.BlobEntityWithCustomerInfoSchema = exports.BlobEntityInfoSchema = exports.BlobEntityIdSchema = exports.BackupCodeTwoFaProviderConfigSchema = void 0;
exports.EfentoCoapDeviceTypeConfigurationSchema = exports.EdgeTypeFilterSchema = exports.EdgeSearchQueryFilterSchema = exports.EdgeSearchQuerySchema = exports.EdgeInstructionsSchema = exports.EdgeInfoSchema = exports.EdgeIdSchema = exports.EdgeEventIdSchema = exports.EdgeEventSchema = exports.EdgeSchema = exports.DynamicValue_Of_stringSchema = exports.DynamicValue_Of_longSchema = exports.DynamicValue_Of_intSchema = exports.DynamicValue_Of_doubleSchema = exports.DynamicValue_Of_booleanSchema = exports.DurationAlarmConditionSpecSchema = exports.DisabledDeviceProfileProvisionConfigurationSchema = exports.DeviceTypeFilterSchema = exports.DeviceTransportConfigurationSchema = exports.DeviceSearchQueryFilterSchema = exports.DeviceSearchQuerySchema = exports.DeviceProfileTransportConfigurationSchema = exports.DeviceProfileProvisionConfigurationSchema = exports.DeviceProfileInfoSchema = exports.DeviceProfileIdSchema = exports.DeviceProfileDataSchema = exports.DeviceProfileConfigurationSchema = exports.DeviceProfileAlarmSchema = exports.DeviceProfileSchema = exports.DeviceInfoSchema = exports.DeviceIdSchema = exports.DeviceGroupOtaPackageSchema = exports.DeviceExportDataSchema = exports.DeviceDataSchema = exports.DeviceCredentialsIdSchema = exports.DeviceCredentialsSchema = exports.DeviceConfigurationSchema = exports.DeviceActivityNotificationRuleTriggerConfigSchema = exports.DeviceSchema = exports.DeliveryMethodNotificationTemplateSchema = exports.DeferredResult_Of_uuidSchema = exports.DeferredResult_Of_VoidSchema = exports.DeferredResult_Of_ResponseEntitySchema = exports.DeferredResult_Of_RepositorySettingsSchema = exports.DeferredResult_Of_PageData_EntityVersion_Schema = exports.DeferredResult_Of_List_VersionedEntityInfo_Schema = exports.DeferredResult_Of_List_BranchInfo_Schema = exports.DeferredResult_Of_EntityDataInfoSchema = exports.DeferredResult_Of_EntityDataDiffSchema = exports.DefaultTenantProfileConfigurationSchema = void 0;
exports.ExportableEntity_Of_EntityIdSchema = exports.EventInfoSchema = exports.EventIdSchema = exports.EventFilterSchema = exports.EscalatedNotificationRuleRecipientsConfigSchema = exports.ErrorEventFilterSchema = exports.EntityViewTypeFilterSchema = exports.EntityViewSearchQueryFilterSchema = exports.EntityViewSearchQuerySchema = exports.EntityViewInfoSchema = exports.EntityViewIdSchema = exports.EntityViewSchema = exports.EntityVersionSchema = exports.EntityTypeVersionLoadRequestSchema = exports.EntityTypeVersionLoadConfigSchema = exports.EntityTypeVersionCreateConfigSchema = exports.EntityTypeLoadResultSchema = exports.EntityTypeFilterSchema = exports.EntitySubtypeSchema = exports.EntityRelationsQuerySchema = exports.EntityRelationInfoSchema = exports.EntityRelationSchema = exports.EntityNameFilterSchema = exports.EntityLoadErrorSchema = exports.EntityListFilterSchema = exports.EntityKeySchema = exports.EntityInfoSchema = exports.EntityIdSchema = exports.EntityGroupNameFilterSchema = exports.EntityGroupListFilterSchema = exports.EntityGroupInfoSchema = exports.EntityGroupIdSchema = exports.EntityGroupFilterSchema = exports.EntityGroupExportDataSchema = exports.EntityGroupSchema = exports.EntityFilterSchema = exports.EntityExportData_Of_objectSchema = exports.EntityDataSortOrderSchema = exports.EntityDataQuerySchema = exports.EntityDataPageLinkSchema = exports.EntityDataInfoSchema = exports.EntityDataDiffSchema = exports.EntityDataSchema = exports.EntityCountQuerySchema = exports.EntityActionNotificationRuleTriggerConfigSchema = exports.EntitiesLimitNotificationRuleTriggerConfigSchema = exports.EntitiesByGroupNameFilterSchema = exports.EmailTwoFaProviderConfigSchema = exports.EmailTwoFaAccountConfigSchema = exports.EmailDeliveryMethodNotificationTemplateSchema = void 0;
exports.NotificationSchema = exports.NodeConnectionInfoSchema = exports.NoSecLwM2MBootstrapServerCredentialSchema = exports.NewPlatformVersionNotificationRuleTriggerConfigSchema = exports.MqttDeviceTransportConfigurationSchema = exports.MqttDeviceProfileTransportConfigurationSchema = exports.MicrosoftTeamsNotificationTargetConfigSchema = exports.MicrosoftTeamsDeliveryMethodNotificationTemplateSchema = exports.MergedUserPermissionsSchema = exports.MergedGroupTypePermissionInfoSchema = exports.MergedGroupPermissionInfoSchema = exports.MappingSchema = exports.Lwm2mDeviceTransportConfigurationSchema = exports.Lwm2mDeviceProfileTransportConfigurationSchema = exports.LwM2mResourceObserveSchema = exports.LwM2mObjectSchema = exports.LwM2mInstanceSchema = exports.LwM2MBootstrapServerCredentialSchema = exports.LoginWhiteLabelingParamsSchema = exports.LoginResponseSchema = exports.LoginRequestSchema = exports.LifeCycleEventFilterSchema = exports.LicenseUsageInfoSchema = exports.LastVisitedDashboardInfoSchema = exports.KeyFilterPredicateSchema = exports.KeyFilterSchema = exports.JsonTransportPayloadConfigurationSchema = exports.JsonNodeSchema = exports.JWT_SettingsSchema = exports.JWT_PairSchema = exports.IntegrationLifecycleEventNotificationRuleTriggerConfigSchema = exports.IntegrationInfoSchema = exports.IntegrationIdSchema = exports.IntegrationSchema = exports.InputStreamSchema = exports.ImageExportDataSchema = exports.HomeDashboardInfoSchema = exports.HomeDashboardSchema = exports.HasId_Of_objectSchema = exports.GroupPermissionInfoSchema = exports.GroupPermissionIdSchema = exports.GroupPermissionSchema = exports.GroupEntityExportDataSchema = exports.FilterPredicateValue_Of_stringSchema = exports.FilterPredicateValue_Of_longSchema = exports.FilterPredicateValue_Of_intSchema = exports.FilterPredicateValue_Of_doubleSchema = exports.FilterPredicateValue_Of_booleanSchema = exports.FeaturesInfoSchema = exports.FaviconSchema = void 0;
exports.PageData_Of_AuditLogSchema = exports.PageData_Of_AssetSchema = exports.PageData_Of_AssetProfileSchema = exports.PageData_Of_AssetProfileInfoSchema = exports.PageData_Of_AssetInfoSchema = exports.PageData_Of_AlarmInfoSchema = exports.PageData_Of_AlarmDataSchema = exports.PageData_Of_AlarmCommentInfoSchema = exports.PSKLwM2MBootstrapServerCredentialSchema = exports.OtherConfigurationSchema = exports.OtaPackageInfoSchema = exports.OtaPackageIdSchema = exports.OtaPackageSchema = exports.OriginatorEntityOwnerUsersFilterSchema = exports.ObjectNodeSchema = exports.ObjectAttributesSchema = exports.OAuth2RegistrationInfoSchema = exports.OAuth2ParamsInfoSchema = exports.OAuth2MobileInfoSchema = exports.OAuth2MapperConfigSchema = exports.OAuth2InfoSchema = exports.OAuth2DomainInfoSchema = exports.OAuth2CustomMapperConfigSchema = exports.OAuth2ClientRegistrationTemplateIdSchema = exports.OAuth2ClientRegistrationTemplateSchema = exports.OAuth2ClientInfoSchema = exports.OAuth2BasicMapperConfigSchema = exports.NumericFilterPredicateSchema = exports.NotificationTemplateIdSchema = exports.NotificationTemplateConfigSchema = exports.NotificationTemplateSchema = exports.NotificationTargetConfigSchema = exports.NotificationTargetSchema = exports.NotificationSettingsSchema = exports.NotificationRuleTriggerConfigSchema = exports.NotificationRuleRecipientsConfigSchema = exports.NotificationRuleInfoSchema = exports.NotificationRuleIdSchema = exports.NotificationRuleConfigSchema = exports.NotificationRuleSchema = exports.NotificationRequestStatsSchema = exports.NotificationRequestPreviewSchema = exports.NotificationRequestInfoSchema = exports.NotificationRequestIdSchema = exports.NotificationRequestConfigSchema = exports.NotificationRequestSchema = exports.NotificationPrefSchema = exports.NotificationInfoSchema = exports.NotificationIdSchema = exports.NotificationDeliveryMethodConfigSchema = void 0;
exports.ProtoTransportPayloadConfigurationSchema = exports.ProcessingStrategySchema = exports.PowerSavingConfigurationSchema = exports.PlatformUsersNotificationTargetConfigSchema = exports.PlatformTwoFaSettingsSchema = exports.PaletteSettingsSchema = exports.PaletteSchema = exports.PageData_Of_WidgetsBundleSchema = exports.PageData_Of_WidgetTypeInfoSchema = exports.PageData_Of_UserSchema = exports.PageData_Of_UserInfoSchema = exports.PageData_Of_UserEmailInfoSchema = exports.PageData_Of_TenantSchema = exports.PageData_Of_TenantProfileSchema = exports.PageData_Of_TenantInfoSchema = exports.PageData_Of_TbResourceInfoSchema = exports.PageData_Of_ShortEntityViewSchema = exports.PageData_Of_SchedulerEventInfoSchema = exports.PageData_Of_RuleChainSchema = exports.PageData_Of_RoleSchema = exports.PageData_Of_QueueSchema = exports.PageData_Of_OtaPackageInfoSchema = exports.PageData_Of_NotificationSchema = exports.PageData_Of_NotificationTemplateSchema = exports.PageData_Of_NotificationTargetSchema = exports.PageData_Of_NotificationRuleInfoSchema = exports.PageData_Of_NotificationRequestInfoSchema = exports.PageData_Of_IntegrationSchema = exports.PageData_Of_IntegrationInfoSchema = exports.PageData_Of_EventInfoSchema = exports.PageData_Of_EntityViewSchema = exports.PageData_Of_EntityViewInfoSchema = exports.PageData_Of_EntityVersionSchema = exports.PageData_Of_EntitySubtypeSchema = exports.PageData_Of_EntityInfoSchema = exports.PageData_Of_EntityGroupInfoSchema = exports.PageData_Of_EntityDataSchema = exports.PageData_Of_EdgeSchema = exports.PageData_Of_EdgeInfoSchema = exports.PageData_Of_EdgeEventSchema = exports.PageData_Of_DeviceSchema = exports.PageData_Of_DeviceProfileSchema = exports.PageData_Of_DeviceProfileInfoSchema = exports.PageData_Of_DeviceInfoSchema = exports.PageData_Of_DashboardInfoSchema = exports.PageData_Of_CustomerSchema = exports.PageData_Of_CustomerInfoSchema = exports.PageData_Of_ConverterSchema = exports.PageData_Of_ContactBased_object_Schema = exports.PageData_Of_BlobEntityWithCustomerInfoSchema = void 0;
exports.SingleEntityFilterSchema = exports.SimpleAlarmConditionSpecSchema = exports.SignUpSelfRegistrationParamsSchema = exports.SignUpRequestSchema = exports.ShortEntityViewSchema = exports.ShortCustomerInfoSchema = exports.SharedAttributesSettingSnmpCommunicationConfigSchema = exports.ShareGroupRequestSchema = exports.SelfRegistrationParamsSchema = exports.SecuritySettingsSchema = exports.SchedulerEventWithCustomerInfoSchema = exports.SchedulerEventInfoSchema = exports.SchedulerEventIdSchema = exports.SchedulerEventFilterSchema = exports.SchedulerEventSchema = exports.SaveOtaPackageInfoRequestSchema = exports.SaveDeviceWithCredentialsRequestSchema = exports.RuleNodeIdSchema = exports.RuleNodeDebugEventFilterSchema = exports.RuleNodeSchema = exports.RuleEngineComponentLifecycleEventNotificationRuleTriggerConfigSchema = exports.RuleChainOutputLabelsUsageSchema = exports.RuleChainMetaDataSchema = exports.RuleChainImportResultSchema = exports.RuleChainIdSchema = exports.RuleChainExportDataSchema = exports.RuleChainDebugEventFilterSchema = exports.RuleChainDataSchema = exports.RuleChainConnectionInfoSchema = exports.RuleChainSchema = exports.RpcIdSchema = exports.RpcSchema = exports.RoleIdSchema = exports.RoleSchema = exports.ResponseEntitySchema = exports.ResourceSchema = exports.ResetPasswordRequestSchema = exports.ResetPasswordEmailRequestSchema = exports.RepositorySettingsInfoSchema = exports.RepositorySettingsSchema = exports.ReportConfigSchema = exports.RepeatingAlarmConditionSpecSchema = exports.RelationsSearchParametersSchema = exports.RelationsQueryFilterSchema = exports.RelationEntityTypeFilterSchema = exports.RawDataEventFilterSchema = exports.RateLimitsNotificationRuleTriggerConfigSchema = exports.RPKLwM2MBootstrapServerCredentialSchema = exports.QueueIdSchema = exports.QueueSchema = void 0;
exports.TotpTwoFaAccountConfigSchema = exports.ToServerRpcRequestSnmpCommunicationConfigSchema = exports.ToDeviceRpcRequestSnmpCommunicationConfigSchema = exports.ThingsboardErrorResponseSchema = exports.ThingsboardCredentialsExpiredResponseSchema = exports.TestSmsRequestSchema = exports.TenantSolutionTemplateInstructionsSchema = exports.TenantSolutionTemplateInfoSchema = exports.TenantSolutionTemplateDetailsSchema = exports.TenantProfileQueueConfigurationSchema = exports.TenantProfileIdSchema = exports.TenantProfileDataSchema = exports.TenantProfileConfigurationSchema = exports.TenantProfileSchema = exports.TenantInfoSchema = exports.TenantIdSchema = exports.TenantAdministratorsFilterSchema = exports.TenantSchema = exports.TelemetryQueryingSnmpCommunicationConfigSchema = exports.TelemetryMappingConfigurationSchema = exports.TelemetryEntityViewSchema = exports.TbResourceInfoSchema = exports.TbResourceIdSchema = exports.TbResourceSchema = exports.TbImageDeleteResultSchema = exports.SystemInfoDataSchema = exports.SystemInfoSchema = exports.SystemAdministratorsFilterSchema = exports.SubmitStrategySchema = exports.StringFilterPredicateSchema = exports.StatisticsEventFilterSchema = exports.StateEntityOwnerFilterSchema = exports.StarredDashboardInfoSchema = exports.SpecificTimeScheduleSchema = exports.SolutionInstallResponseSchema = exports.SnmpMappingSchema = exports.SnmpDeviceTransportConfigurationSchema = exports.SnmpDeviceProfileTransportConfigurationSchema = exports.SnmpCommunicationConfigSchema = exports.SmsTwoFaProviderConfigSchema = exports.SmsTwoFaAccountConfigSchema = exports.SmsProviderConfigurationSchema = exports.SmsDeliveryMethodNotificationTemplateSchema = exports.SmppSmsProviderConfigurationSchema = exports.SlackNotificationTargetConfigSchema = exports.SlackNotificationDeliveryMethodConfigSchema = exports.SlackDeliveryMethodNotificationTemplateSchema = exports.SlackConversationSchema = exports.SingleEntityVersionLoadRequestSchema = exports.SingleEntityVersionCreateRequestSchema = void 0;
exports.AlarmAssignmentNotificationRuleTriggerConfigSchemaSchema = exports.AlarmAssigneeSchemaSchema = exports.AlarmSchemaSchema = exports.AffectedUserFilterSchemaSchema = exports.AffectedTenantAdministratorsFilterSchemaSchema = exports.AdminSettingsIdSchemaSchema = exports.AdminSettingsSchemaSchema = exports.ActivateUserRequestSchemaSchema = exports.AccountTwoFaSettingsSchemaSchema = exports.X509LwM2MBootstrapServerCredentialSchema = exports.X509CertificateChainProvisionConfigurationSchema = exports.WidgetsBundleIdSchema = exports.WidgetsBundleExportDataSchema = exports.WidgetsBundleSchema = exports.WidgetTypeInfoSchema = exports.WidgetTypeIdSchema = exports.WidgetTypeExportDataSchema = exports.WidgetTypeDetailsSchema = exports.WidgetTypeSchema = exports.WhiteLabelingParamsSchema = exports.WhiteLabelingSchema = exports.WebDeliveryMethodNotificationTemplateSchema = exports.VersionedEntityInfoSchema = exports.VersionLoadResultSchema = exports.VersionLoadRequestSchema = exports.VersionLoadConfigSchema = exports.VersionCreationResultSchema = exports.VersionCreateRequestSchema = exports.VersionCreateConfigSchema = exports.UsersFilterSchema = exports.UserRoleFilterSchema = exports.UserPasswordPolicySchema = exports.UserNotificationSettingsSchema = exports.UserListFilterSchema = exports.UserInfoSchema = exports.UserIdSchema = exports.UserGroupListFilterSchema = exports.UserEmailInfoSchema = exports.UserDashboardsInfoSchema = exports.UserSchema = exports.UsageInfoSchema = exports.UpdateMessageSchema = exports.TwoFaProviderInfoSchema = exports.TwoFaProviderConfigSchema = exports.TwoFaAccountConfigUpdateRequestSchema = exports.TwoFaAccountConfigSchema = exports.TwilioSmsProviderConfigurationSchema = exports.TsValueSchema = exports.TransportPayloadTypeConfigurationSchema = exports.TotpTwoFaProviderConfigSchema = void 0;
exports.BulkImportResult_Of_DeviceSchemaSchema = exports.BulkImportResult_Of_AssetSchemaSchema = exports.BulkImportRequestSchemaSchema = exports.BranchInfoSchemaSchema = exports.BooleanFilterPredicateSchemaSchema = exports.BlobEntityWithCustomerInfoSchemaSchema = exports.BlobEntityInfoSchemaSchema = exports.BlobEntityIdSchemaSchema = exports.BackupCodeTwoFaProviderConfigSchemaSchema = exports.BackupCodeTwoFaAccountConfigSchemaSchema = exports.AwsSnsSmsProviderConfigurationSchemaSchema = exports.AutoVersionCreateConfigSchemaSchema = exports.AuditLogIdSchemaSchema = exports.AuditLogSchemaSchema = exports.AttributesEntityViewSchemaSchema = exports.AttributeExportDataSchemaSchema = exports.AtomicIntegerSchemaSchema = exports.AssetTypeFilterSchemaSchema = exports.AssetSearchQueryFilterSchemaSchema = exports.AssetSearchQuerySchemaSchema = exports.AssetProfileInfoSchemaSchema = exports.AssetProfileIdSchemaSchema = exports.AssetProfileSchemaSchema = exports.AssetInfoSchemaSchema = exports.AssetIdSchemaSchema = exports.AssetSchemaSchema = exports.ArrayNodeSchemaSchema = exports.ApiUsageStateFilterSchemaSchema = exports.ApiUsageLimitNotificationRuleTriggerConfigSchemaSchema = exports.AnyTimeScheduleSchemaSchema = exports.AllowedPermissionsInfoSchemaSchema = exports.AllowCreateNewDevicesDeviceProfileProvisionConfigurationSchemaSchema = exports.AllUsersFilterSchemaSchema = exports.AlarmScheduleSchemaSchema = exports.AlarmRuleSchemaSchema = exports.AlarmNotificationRuleTriggerConfigSchemaSchema = exports.AlarmInfoSchemaSchema = exports.AlarmIdSchemaSchema = exports.AlarmDataQuerySchemaSchema = exports.AlarmDataPageLinkSchemaSchema = exports.AlarmDataSchemaSchema = exports.AlarmCountQuerySchemaSchema = exports.AlarmConditionSpecSchemaSchema = exports.AlarmConditionFilterKeySchemaSchema = exports.AlarmConditionFilterSchemaSchema = exports.AlarmConditionSchemaSchema = exports.AlarmCommentNotificationRuleTriggerConfigSchemaSchema = exports.AlarmCommentInfoSchemaSchema = exports.AlarmCommentIdSchemaSchema = exports.AlarmCommentSchemaSchema = void 0;
exports.DeferredResult_Of_VoidSchemaSchema = exports.DeferredResult_Of_ResponseEntitySchemaSchema = exports.DeferredResult_Of_RepositorySettingsSchemaSchema = exports.DeferredResult_Of_PageData_EntityVersion_SchemaSchema = exports.DeferredResult_Of_List_VersionedEntityInfo_SchemaSchema = exports.DeferredResult_Of_List_BranchInfo_SchemaSchema = exports.DeferredResult_Of_EntityDataInfoSchemaSchema = exports.DeferredResult_Of_EntityDataDiffSchemaSchema = exports.DefaultTenantProfileConfigurationSchemaSchema = exports.DefaultRuleChainCreateRequestSchemaSchema = exports.DefaultDeviceTransportConfigurationSchemaSchema = exports.DefaultDeviceProfileTransportConfigurationSchemaSchema = exports.DefaultDeviceProfileConfigurationSchemaSchema = exports.DefaultDeviceConfigurationSchemaSchema = exports.DefaultCoapDeviceTypeConfigurationSchemaSchema = exports.DebugIntegrationEventFilterSchemaSchema = exports.DebugConverterEventFilterSchemaSchema = exports.DashboardInfoSchemaSchema = exports.DashboardIdSchemaSchema = exports.DashboardSchemaSchema = exports.CustomerUsersFilterSchemaSchema = exports.CustomerInfoSchemaSchema = exports.CustomerIdSchemaSchema = exports.CustomerSchemaSchema = exports.CustomTranslationSchemaSchema = exports.CustomTimeScheduleItemSchemaSchema = exports.CustomTimeScheduleSchemaSchema = exports.CustomMenuItemSchemaSchema = exports.CustomMenuSchemaSchema = exports.ConverterIdSchemaSchema = exports.ConverterSchemaSchema = exports.ContactBased_Of_objectSchemaSchema = exports.ComponentDescriptorIdSchemaSchema = exports.ComponentDescriptorSchemaSchema = exports.ComplexVersionCreateRequestSchemaSchema = exports.ComplexFilterPredicateSchemaSchema = exports.ComparisonTsValueSchemaSchema = exports.ColumnMappingSchemaSchema = exports.CoapDeviceTypeConfigurationSchemaSchema = exports.CoapDeviceTransportConfigurationSchemaSchema = exports.CoapDeviceProfileTransportConfigurationSchemaSchema = exports.ClientAttributesQueryingSnmpCommunicationConfigSchemaSchema = exports.ClearRuleSchemaSchema = exports.ClaimRequestSchemaSchema = exports.CheckPreProvisionedDevicesDeviceProfileProvisionConfigurationSchemaSchema = exports.ChangePasswordRequestSchemaSchema = exports.ByteBufferSchemaSchema = exports.ByteArrayResourceSchemaSchema = exports.ButtonSchemaSchema = exports.BulkImportResult_Of_EdgeSchemaSchema = void 0;
exports.EntityDataDiffSchemaSchema = exports.EntityDataSchemaSchema = exports.EntityCountQuerySchemaSchema = exports.EntityActionNotificationRuleTriggerConfigSchemaSchema = exports.EntitiesLimitNotificationRuleTriggerConfigSchemaSchema = exports.EntitiesByGroupNameFilterSchemaSchema = exports.EmailTwoFaProviderConfigSchemaSchema = exports.EmailTwoFaAccountConfigSchemaSchema = exports.EmailDeliveryMethodNotificationTemplateSchemaSchema = exports.EfentoCoapDeviceTypeConfigurationSchemaSchema = exports.EdgeTypeFilterSchemaSchema = exports.EdgeSearchQueryFilterSchemaSchema = exports.EdgeSearchQuerySchemaSchema = exports.EdgeInstructionsSchemaSchema = exports.EdgeInfoSchemaSchema = exports.EdgeIdSchemaSchema = exports.EdgeEventIdSchemaSchema = exports.EdgeEventSchemaSchema = exports.EdgeSchemaSchema = exports.DynamicValue_Of_stringSchemaSchema = exports.DynamicValue_Of_longSchemaSchema = exports.DynamicValue_Of_intSchemaSchema = exports.DynamicValue_Of_doubleSchemaSchema = exports.DynamicValue_Of_booleanSchemaSchema = exports.DurationAlarmConditionSpecSchemaSchema = exports.DisabledDeviceProfileProvisionConfigurationSchemaSchema = exports.DeviceTypeFilterSchemaSchema = exports.DeviceTransportConfigurationSchemaSchema = exports.DeviceSearchQueryFilterSchemaSchema = exports.DeviceSearchQuerySchemaSchema = exports.DeviceProfileTransportConfigurationSchemaSchema = exports.DeviceProfileProvisionConfigurationSchemaSchema = exports.DeviceProfileInfoSchemaSchema = exports.DeviceProfileIdSchemaSchema = exports.DeviceProfileDataSchemaSchema = exports.DeviceProfileConfigurationSchemaSchema = exports.DeviceProfileAlarmSchemaSchema = exports.DeviceProfileSchemaSchema = exports.DeviceInfoSchemaSchema = exports.DeviceIdSchemaSchema = exports.DeviceGroupOtaPackageSchemaSchema = exports.DeviceExportDataSchemaSchema = exports.DeviceDataSchemaSchema = exports.DeviceCredentialsIdSchemaSchema = exports.DeviceCredentialsSchemaSchema = exports.DeviceConfigurationSchemaSchema = exports.DeviceActivityNotificationRuleTriggerConfigSchemaSchema = exports.DeviceSchemaSchema = exports.DeliveryMethodNotificationTemplateSchemaSchema = exports.DeferredResult_Of_uuidSchemaSchema = void 0;
exports.GroupPermissionSchemaSchema = exports.GroupEntityExportDataSchemaSchema = exports.FilterPredicateValue_Of_stringSchemaSchema = exports.FilterPredicateValue_Of_longSchemaSchema = exports.FilterPredicateValue_Of_intSchemaSchema = exports.FilterPredicateValue_Of_doubleSchemaSchema = exports.FilterPredicateValue_Of_booleanSchemaSchema = exports.FeaturesInfoSchemaSchema = exports.FaviconSchemaSchema = exports.ExportableEntity_Of_EntityIdSchemaSchema = exports.EventInfoSchemaSchema = exports.EventIdSchemaSchema = exports.EventFilterSchemaSchema = exports.EscalatedNotificationRuleRecipientsConfigSchemaSchema = exports.ErrorEventFilterSchemaSchema = exports.EntityViewTypeFilterSchemaSchema = exports.EntityViewSearchQueryFilterSchemaSchema = exports.EntityViewSearchQuerySchemaSchema = exports.EntityViewInfoSchemaSchema = exports.EntityViewIdSchemaSchema = exports.EntityViewSchemaSchema = exports.EntityVersionSchemaSchema = exports.EntityTypeVersionLoadRequestSchemaSchema = exports.EntityTypeVersionLoadConfigSchemaSchema = exports.EntityTypeVersionCreateConfigSchemaSchema = exports.EntityTypeLoadResultSchemaSchema = exports.EntityTypeFilterSchemaSchema = exports.EntitySubtypeSchemaSchema = exports.EntityRelationsQuerySchemaSchema = exports.EntityRelationInfoSchemaSchema = exports.EntityRelationSchemaSchema = exports.EntityNameFilterSchemaSchema = exports.EntityLoadErrorSchemaSchema = exports.EntityListFilterSchemaSchema = exports.EntityKeySchemaSchema = exports.EntityInfoSchemaSchema = exports.EntityIdSchemaSchema = exports.EntityGroupNameFilterSchemaSchema = exports.EntityGroupListFilterSchemaSchema = exports.EntityGroupInfoSchemaSchema = exports.EntityGroupIdSchemaSchema = exports.EntityGroupFilterSchemaSchema = exports.EntityGroupExportDataSchemaSchema = exports.EntityGroupSchemaSchema = exports.EntityFilterSchemaSchema = exports.EntityExportData_Of_objectSchemaSchema = exports.EntityDataSortOrderSchemaSchema = exports.EntityDataQuerySchemaSchema = exports.EntityDataPageLinkSchemaSchema = exports.EntityDataInfoSchemaSchema = void 0;
exports.NotificationRequestPreviewSchemaSchema = exports.NotificationRequestInfoSchemaSchema = exports.NotificationRequestIdSchemaSchema = exports.NotificationRequestConfigSchemaSchema = exports.NotificationRequestSchemaSchema = exports.NotificationPrefSchemaSchema = exports.NotificationInfoSchemaSchema = exports.NotificationIdSchemaSchema = exports.NotificationDeliveryMethodConfigSchemaSchema = exports.NotificationSchemaSchema = exports.NodeConnectionInfoSchemaSchema = exports.NoSecLwM2MBootstrapServerCredentialSchemaSchema = exports.NewPlatformVersionNotificationRuleTriggerConfigSchemaSchema = exports.MqttDeviceTransportConfigurationSchemaSchema = exports.MqttDeviceProfileTransportConfigurationSchemaSchema = exports.MicrosoftTeamsNotificationTargetConfigSchemaSchema = exports.MicrosoftTeamsDeliveryMethodNotificationTemplateSchemaSchema = exports.MergedUserPermissionsSchemaSchema = exports.MergedGroupTypePermissionInfoSchemaSchema = exports.MergedGroupPermissionInfoSchemaSchema = exports.MappingSchemaSchema = exports.Lwm2mDeviceTransportConfigurationSchemaSchema = exports.Lwm2mDeviceProfileTransportConfigurationSchemaSchema = exports.LwM2mResourceObserveSchemaSchema = exports.LwM2mObjectSchemaSchema = exports.LwM2mInstanceSchemaSchema = exports.LwM2MBootstrapServerCredentialSchemaSchema = exports.LoginWhiteLabelingParamsSchemaSchema = exports.LoginResponseSchemaSchema = exports.LoginRequestSchemaSchema = exports.LifeCycleEventFilterSchemaSchema = exports.LicenseUsageInfoSchemaSchema = exports.LastVisitedDashboardInfoSchemaSchema = exports.KeyFilterPredicateSchemaSchema = exports.KeyFilterSchemaSchema = exports.JsonTransportPayloadConfigurationSchemaSchema = exports.JsonNodeSchemaSchema = exports.JWT_SettingsSchemaSchema = exports.JWT_PairSchemaSchema = exports.IntegrationLifecycleEventNotificationRuleTriggerConfigSchemaSchema = exports.IntegrationInfoSchemaSchema = exports.IntegrationIdSchemaSchema = exports.IntegrationSchemaSchema = exports.InputStreamSchemaSchema = exports.ImageExportDataSchemaSchema = exports.HomeDashboardInfoSchemaSchema = exports.HomeDashboardSchemaSchema = exports.HasId_Of_objectSchemaSchema = exports.GroupPermissionInfoSchemaSchema = exports.GroupPermissionIdSchemaSchema = void 0;
exports.PageData_Of_DeviceProfileSchemaSchema = exports.PageData_Of_DeviceProfileInfoSchemaSchema = exports.PageData_Of_DeviceInfoSchemaSchema = exports.PageData_Of_DashboardInfoSchemaSchema = exports.PageData_Of_CustomerSchemaSchema = exports.PageData_Of_CustomerInfoSchemaSchema = exports.PageData_Of_ConverterSchemaSchema = exports.PageData_Of_ContactBased_object_SchemaSchema = exports.PageData_Of_BlobEntityWithCustomerInfoSchemaSchema = exports.PageData_Of_AuditLogSchemaSchema = exports.PageData_Of_AssetSchemaSchema = exports.PageData_Of_AssetProfileSchemaSchema = exports.PageData_Of_AssetProfileInfoSchemaSchema = exports.PageData_Of_AssetInfoSchemaSchema = exports.PageData_Of_AlarmInfoSchemaSchema = exports.PageData_Of_AlarmDataSchemaSchema = exports.PageData_Of_AlarmCommentInfoSchemaSchema = exports.PSKLwM2MBootstrapServerCredentialSchemaSchema = exports.OtherConfigurationSchemaSchema = exports.OtaPackageInfoSchemaSchema = exports.OtaPackageIdSchemaSchema = exports.OtaPackageSchemaSchema = exports.OriginatorEntityOwnerUsersFilterSchemaSchema = exports.ObjectNodeSchemaSchema = exports.ObjectAttributesSchemaSchema = exports.OAuth2RegistrationInfoSchemaSchema = exports.OAuth2ParamsInfoSchemaSchema = exports.OAuth2MobileInfoSchemaSchema = exports.OAuth2MapperConfigSchemaSchema = exports.OAuth2InfoSchemaSchema = exports.OAuth2DomainInfoSchemaSchema = exports.OAuth2CustomMapperConfigSchemaSchema = exports.OAuth2ClientRegistrationTemplateIdSchemaSchema = exports.OAuth2ClientRegistrationTemplateSchemaSchema = exports.OAuth2ClientInfoSchemaSchema = exports.OAuth2BasicMapperConfigSchemaSchema = exports.NumericFilterPredicateSchemaSchema = exports.NotificationTemplateIdSchemaSchema = exports.NotificationTemplateConfigSchemaSchema = exports.NotificationTemplateSchemaSchema = exports.NotificationTargetConfigSchemaSchema = exports.NotificationTargetSchemaSchema = exports.NotificationSettingsSchemaSchema = exports.NotificationRuleTriggerConfigSchemaSchema = exports.NotificationRuleRecipientsConfigSchemaSchema = exports.NotificationRuleInfoSchemaSchema = exports.NotificationRuleIdSchemaSchema = exports.NotificationRuleConfigSchemaSchema = exports.NotificationRuleSchemaSchema = exports.NotificationRequestStatsSchemaSchema = void 0;
exports.RepeatingAlarmConditionSpecSchemaSchema = exports.RelationsSearchParametersSchemaSchema = exports.RelationsQueryFilterSchemaSchema = exports.RelationEntityTypeFilterSchemaSchema = exports.RawDataEventFilterSchemaSchema = exports.RateLimitsNotificationRuleTriggerConfigSchemaSchema = exports.RPKLwM2MBootstrapServerCredentialSchemaSchema = exports.QueueIdSchemaSchema = exports.QueueSchemaSchema = exports.ProtoTransportPayloadConfigurationSchemaSchema = exports.ProcessingStrategySchemaSchema = exports.PowerSavingConfigurationSchemaSchema = exports.PlatformUsersNotificationTargetConfigSchemaSchema = exports.PlatformTwoFaSettingsSchemaSchema = exports.PaletteSettingsSchemaSchema = exports.PaletteSchemaSchema = exports.PageData_Of_WidgetsBundleSchemaSchema = exports.PageData_Of_WidgetTypeInfoSchemaSchema = exports.PageData_Of_UserSchemaSchema = exports.PageData_Of_UserInfoSchemaSchema = exports.PageData_Of_UserEmailInfoSchemaSchema = exports.PageData_Of_TenantSchemaSchema = exports.PageData_Of_TenantProfileSchemaSchema = exports.PageData_Of_TenantInfoSchemaSchema = exports.PageData_Of_TbResourceInfoSchemaSchema = exports.PageData_Of_ShortEntityViewSchemaSchema = exports.PageData_Of_SchedulerEventInfoSchemaSchema = exports.PageData_Of_RuleChainSchemaSchema = exports.PageData_Of_RoleSchemaSchema = exports.PageData_Of_QueueSchemaSchema = exports.PageData_Of_OtaPackageInfoSchemaSchema = exports.PageData_Of_NotificationSchemaSchema = exports.PageData_Of_NotificationTemplateSchemaSchema = exports.PageData_Of_NotificationTargetSchemaSchema = exports.PageData_Of_NotificationRuleInfoSchemaSchema = exports.PageData_Of_NotificationRequestInfoSchemaSchema = exports.PageData_Of_IntegrationSchemaSchema = exports.PageData_Of_IntegrationInfoSchemaSchema = exports.PageData_Of_EventInfoSchemaSchema = exports.PageData_Of_EntityViewSchemaSchema = exports.PageData_Of_EntityViewInfoSchemaSchema = exports.PageData_Of_EntityVersionSchemaSchema = exports.PageData_Of_EntitySubtypeSchemaSchema = exports.PageData_Of_EntityInfoSchemaSchema = exports.PageData_Of_EntityGroupInfoSchemaSchema = exports.PageData_Of_EntityDataSchemaSchema = exports.PageData_Of_EdgeSchemaSchema = exports.PageData_Of_EdgeInfoSchemaSchema = exports.PageData_Of_EdgeEventSchemaSchema = exports.PageData_Of_DeviceSchemaSchema = void 0;
exports.SmsProviderConfigurationSchemaSchema = exports.SmsDeliveryMethodNotificationTemplateSchemaSchema = exports.SmppSmsProviderConfigurationSchemaSchema = exports.SlackNotificationTargetConfigSchemaSchema = exports.SlackNotificationDeliveryMethodConfigSchemaSchema = exports.SlackDeliveryMethodNotificationTemplateSchemaSchema = exports.SlackConversationSchemaSchema = exports.SingleEntityVersionLoadRequestSchemaSchema = exports.SingleEntityVersionCreateRequestSchemaSchema = exports.SingleEntityFilterSchemaSchema = exports.SimpleAlarmConditionSpecSchemaSchema = exports.SignUpSelfRegistrationParamsSchemaSchema = exports.SignUpRequestSchemaSchema = exports.ShortEntityViewSchemaSchema = exports.ShortCustomerInfoSchemaSchema = exports.SharedAttributesSettingSnmpCommunicationConfigSchemaSchema = exports.ShareGroupRequestSchemaSchema = exports.SelfRegistrationParamsSchemaSchema = exports.SecuritySettingsSchemaSchema = exports.SchedulerEventWithCustomerInfoSchemaSchema = exports.SchedulerEventInfoSchemaSchema = exports.SchedulerEventIdSchemaSchema = exports.SchedulerEventFilterSchemaSchema = exports.SchedulerEventSchemaSchema = exports.SaveOtaPackageInfoRequestSchemaSchema = exports.SaveDeviceWithCredentialsRequestSchemaSchema = exports.RuleNodeIdSchemaSchema = exports.RuleNodeDebugEventFilterSchemaSchema = exports.RuleNodeSchemaSchema = exports.RuleEngineComponentLifecycleEventNotificationRuleTriggerConfigSchemaSchema = exports.RuleChainOutputLabelsUsageSchemaSchema = exports.RuleChainMetaDataSchemaSchema = exports.RuleChainImportResultSchemaSchema = exports.RuleChainIdSchemaSchema = exports.RuleChainExportDataSchemaSchema = exports.RuleChainDebugEventFilterSchemaSchema = exports.RuleChainDataSchemaSchema = exports.RuleChainConnectionInfoSchemaSchema = exports.RuleChainSchemaSchema = exports.RpcIdSchemaSchema = exports.RpcSchemaSchema = exports.RoleIdSchemaSchema = exports.RoleSchemaSchema = exports.ResponseEntitySchemaSchema = exports.ResourceSchemaSchema = exports.ResetPasswordRequestSchemaSchema = exports.ResetPasswordEmailRequestSchemaSchema = exports.RepositorySettingsInfoSchemaSchema = exports.RepositorySettingsSchemaSchema = exports.ReportConfigSchemaSchema = void 0;
exports.UpdateMessageSchemaSchema = exports.TwoFaProviderInfoSchemaSchema = exports.TwoFaProviderConfigSchemaSchema = exports.TwoFaAccountConfigUpdateRequestSchemaSchema = exports.TwoFaAccountConfigSchemaSchema = exports.TwilioSmsProviderConfigurationSchemaSchema = exports.TsValueSchemaSchema = exports.TransportPayloadTypeConfigurationSchemaSchema = exports.TotpTwoFaProviderConfigSchemaSchema = exports.TotpTwoFaAccountConfigSchemaSchema = exports.ToServerRpcRequestSnmpCommunicationConfigSchemaSchema = exports.ToDeviceRpcRequestSnmpCommunicationConfigSchemaSchema = exports.ThingsboardErrorResponseSchemaSchema = exports.ThingsboardCredentialsExpiredResponseSchemaSchema = exports.TestSmsRequestSchemaSchema = exports.TenantSolutionTemplateInstructionsSchemaSchema = exports.TenantSolutionTemplateInfoSchemaSchema = exports.TenantSolutionTemplateDetailsSchemaSchema = exports.TenantProfileQueueConfigurationSchemaSchema = exports.TenantProfileIdSchemaSchema = exports.TenantProfileDataSchemaSchema = exports.TenantProfileConfigurationSchemaSchema = exports.TenantProfileSchemaSchema = exports.TenantInfoSchemaSchema = exports.TenantIdSchemaSchema = exports.TenantAdministratorsFilterSchemaSchema = exports.TenantSchemaSchema = exports.TelemetryQueryingSnmpCommunicationConfigSchemaSchema = exports.TelemetryMappingConfigurationSchemaSchema = exports.TelemetryEntityViewSchemaSchema = exports.TbResourceInfoSchemaSchema = exports.TbResourceIdSchemaSchema = exports.TbResourceSchemaSchema = exports.TbImageDeleteResultSchemaSchema = exports.SystemInfoDataSchemaSchema = exports.SystemInfoSchemaSchema = exports.SystemAdministratorsFilterSchemaSchema = exports.SubmitStrategySchemaSchema = exports.StringFilterPredicateSchemaSchema = exports.StatisticsEventFilterSchemaSchema = exports.StateEntityOwnerFilterSchemaSchema = exports.StarredDashboardInfoSchemaSchema = exports.SpecificTimeScheduleSchemaSchema = exports.SolutionInstallResponseSchemaSchema = exports.SnmpMappingSchemaSchema = exports.SnmpDeviceTransportConfigurationSchemaSchema = exports.SnmpDeviceProfileTransportConfigurationSchemaSchema = exports.SnmpCommunicationConfigSchemaSchema = exports.SmsTwoFaProviderConfigSchemaSchema = exports.SmsTwoFaAccountConfigSchemaSchema = void 0;
exports.X509LwM2MBootstrapServerCredentialSchemaSchema = exports.X509CertificateChainProvisionConfigurationSchemaSchema = exports.WidgetsBundleIdSchemaSchema = exports.WidgetsBundleExportDataSchemaSchema = exports.WidgetsBundleSchemaSchema = exports.WidgetTypeInfoSchemaSchema = exports.WidgetTypeIdSchemaSchema = exports.WidgetTypeExportDataSchemaSchema = exports.WidgetTypeDetailsSchemaSchema = exports.WidgetTypeSchemaSchema = exports.WhiteLabelingParamsSchemaSchema = exports.WhiteLabelingSchemaSchema = exports.WebDeliveryMethodNotificationTemplateSchemaSchema = exports.VersionedEntityInfoSchemaSchema = exports.VersionLoadResultSchemaSchema = exports.VersionLoadRequestSchemaSchema = exports.VersionLoadConfigSchemaSchema = exports.VersionCreationResultSchemaSchema = exports.VersionCreateRequestSchemaSchema = exports.VersionCreateConfigSchemaSchema = exports.UsersFilterSchemaSchema = exports.UserRoleFilterSchemaSchema = exports.UserPasswordPolicySchemaSchema = exports.UserNotificationSettingsSchemaSchema = exports.UserListFilterSchemaSchema = exports.UserInfoSchemaSchema = exports.UserIdSchemaSchema = exports.UserGroupListFilterSchemaSchema = exports.UserEmailInfoSchemaSchema = exports.UserDashboardsInfoSchemaSchema = exports.UserSchemaSchema = exports.UsageInfoSchemaSchema = void 0;
const zod_1 = require("zod");
exports.AccountTwoFaSettingsSchema = zod_1.z.lazy(() => exports.AccountTwoFaSettingsSchemaSchema);
exports.ActivateUserRequestSchema = zod_1.z.lazy(() => exports.ActivateUserRequestSchemaSchema);
exports.AdminSettingsSchema = zod_1.z.lazy(() => exports.AdminSettingsSchemaSchema);
exports.AdminSettingsIdSchema = zod_1.z.lazy(() => exports.AdminSettingsIdSchemaSchema);
exports.AffectedTenantAdministratorsFilterSchema = zod_1.z.lazy(() => exports.AffectedTenantAdministratorsFilterSchemaSchema);
exports.AffectedUserFilterSchema = zod_1.z.lazy(() => exports.AffectedUserFilterSchemaSchema);
exports.AlarmSchema = zod_1.z.lazy(() => exports.AlarmSchemaSchema);
exports.AlarmAssigneeSchema = zod_1.z.lazy(() => exports.AlarmAssigneeSchemaSchema);
exports.AlarmAssignmentNotificationRuleTriggerConfigSchema = zod_1.z.lazy(() => exports.AlarmAssignmentNotificationRuleTriggerConfigSchemaSchema);
exports.AlarmCommentSchema = zod_1.z.lazy(() => exports.AlarmCommentSchemaSchema);
exports.AlarmCommentIdSchema = zod_1.z.lazy(() => exports.AlarmCommentIdSchemaSchema);
exports.AlarmCommentInfoSchema = zod_1.z.lazy(() => exports.AlarmCommentInfoSchemaSchema);
exports.AlarmCommentNotificationRuleTriggerConfigSchema = zod_1.z.lazy(() => exports.AlarmCommentNotificationRuleTriggerConfigSchemaSchema);
exports.AlarmConditionSchema = zod_1.z.lazy(() => exports.AlarmConditionSchemaSchema);
exports.AlarmConditionFilterSchema = zod_1.z.lazy(() => exports.AlarmConditionFilterSchemaSchema);
exports.AlarmConditionFilterKeySchema = zod_1.z.lazy(() => exports.AlarmConditionFilterKeySchemaSchema);
exports.AlarmConditionSpecSchema = zod_1.z.lazy(() => exports.AlarmConditionSpecSchemaSchema);
exports.AlarmCountQuerySchema = zod_1.z.lazy(() => exports.AlarmCountQuerySchemaSchema);
exports.AlarmDataSchema = zod_1.z.lazy(() => exports.AlarmDataSchemaSchema);
exports.AlarmDataPageLinkSchema = zod_1.z.lazy(() => exports.AlarmDataPageLinkSchemaSchema);
exports.AlarmDataQuerySchema = zod_1.z.lazy(() => exports.AlarmDataQuerySchemaSchema);
exports.AlarmIdSchema = zod_1.z.lazy(() => exports.AlarmIdSchemaSchema);
exports.AlarmInfoSchema = zod_1.z.lazy(() => exports.AlarmInfoSchemaSchema);
exports.AlarmNotificationRuleTriggerConfigSchema = zod_1.z.lazy(() => exports.AlarmNotificationRuleTriggerConfigSchemaSchema);
exports.AlarmRuleSchema = zod_1.z.lazy(() => exports.AlarmRuleSchemaSchema);
exports.AlarmScheduleSchema = zod_1.z.lazy(() => exports.AlarmScheduleSchemaSchema);
exports.AllUsersFilterSchema = zod_1.z.lazy(() => exports.AllUsersFilterSchemaSchema);
exports.AllowCreateNewDevicesDeviceProfileProvisionConfigurationSchema = zod_1.z.lazy(() => exports.AllowCreateNewDevicesDeviceProfileProvisionConfigurationSchemaSchema);
exports.AllowedPermissionsInfoSchema = zod_1.z.lazy(() => exports.AllowedPermissionsInfoSchemaSchema);
exports.AnyTimeScheduleSchema = zod_1.z.lazy(() => exports.AnyTimeScheduleSchemaSchema);
exports.ApiUsageLimitNotificationRuleTriggerConfigSchema = zod_1.z.lazy(() => exports.ApiUsageLimitNotificationRuleTriggerConfigSchemaSchema);
exports.ApiUsageStateFilterSchema = zod_1.z.lazy(() => exports.ApiUsageStateFilterSchemaSchema);
exports.ArrayNodeSchema = zod_1.z.lazy(() => exports.ArrayNodeSchemaSchema);
exports.AssetSchema = zod_1.z.lazy(() => exports.AssetSchemaSchema);
exports.AssetIdSchema = zod_1.z.lazy(() => exports.AssetIdSchemaSchema);
exports.AssetInfoSchema = zod_1.z.lazy(() => exports.AssetInfoSchemaSchema);
exports.AssetProfileSchema = zod_1.z.lazy(() => exports.AssetProfileSchemaSchema);
exports.AssetProfileIdSchema = zod_1.z.lazy(() => exports.AssetProfileIdSchemaSchema);
exports.AssetProfileInfoSchema = zod_1.z.lazy(() => exports.AssetProfileInfoSchemaSchema);
exports.AssetSearchQuerySchema = zod_1.z.lazy(() => exports.AssetSearchQuerySchemaSchema);
exports.AssetSearchQueryFilterSchema = zod_1.z.lazy(() => exports.AssetSearchQueryFilterSchemaSchema);
exports.AssetTypeFilterSchema = zod_1.z.lazy(() => exports.AssetTypeFilterSchemaSchema);
exports.AtomicIntegerSchema = zod_1.z.lazy(() => exports.AtomicIntegerSchemaSchema);
exports.AttributeExportDataSchema = zod_1.z.lazy(() => exports.AttributeExportDataSchemaSchema);
exports.AttributesEntityViewSchema = zod_1.z.lazy(() => exports.AttributesEntityViewSchemaSchema);
exports.AuditLogSchema = zod_1.z.lazy(() => exports.AuditLogSchemaSchema);
exports.AuditLogIdSchema = zod_1.z.lazy(() => exports.AuditLogIdSchemaSchema);
exports.AutoVersionCreateConfigSchema = zod_1.z.lazy(() => exports.AutoVersionCreateConfigSchemaSchema);
exports.AwsSnsSmsProviderConfigurationSchema = zod_1.z.lazy(() => exports.AwsSnsSmsProviderConfigurationSchemaSchema);
exports.BackupCodeTwoFaAccountConfigSchema = zod_1.z.lazy(() => exports.BackupCodeTwoFaAccountConfigSchemaSchema);
exports.BackupCodeTwoFaProviderConfigSchema = zod_1.z.lazy(() => exports.BackupCodeTwoFaProviderConfigSchemaSchema);
exports.BlobEntityIdSchema = zod_1.z.lazy(() => exports.BlobEntityIdSchemaSchema);
exports.BlobEntityInfoSchema = zod_1.z.lazy(() => exports.BlobEntityInfoSchemaSchema);
exports.BlobEntityWithCustomerInfoSchema = zod_1.z.lazy(() => exports.BlobEntityWithCustomerInfoSchemaSchema);
exports.BooleanFilterPredicateSchema = zod_1.z.lazy(() => exports.BooleanFilterPredicateSchemaSchema);
exports.BranchInfoSchema = zod_1.z.lazy(() => exports.BranchInfoSchemaSchema);
exports.BulkImportRequestSchema = zod_1.z.lazy(() => exports.BulkImportRequestSchemaSchema);
exports.BulkImportResult_Of_AssetSchema = zod_1.z.lazy(() => exports.BulkImportResult_Of_AssetSchemaSchema);
exports.BulkImportResult_Of_DeviceSchema = zod_1.z.lazy(() => exports.BulkImportResult_Of_DeviceSchemaSchema);
exports.BulkImportResult_Of_EdgeSchema = zod_1.z.lazy(() => exports.BulkImportResult_Of_EdgeSchemaSchema);
exports.ButtonSchema = zod_1.z.lazy(() => exports.ButtonSchemaSchema);
exports.ByteArrayResourceSchema = zod_1.z.lazy(() => exports.ByteArrayResourceSchemaSchema);
exports.ByteBufferSchema = zod_1.z.lazy(() => exports.ByteBufferSchemaSchema);
exports.ChangePasswordRequestSchema = zod_1.z.lazy(() => exports.ChangePasswordRequestSchemaSchema);
exports.CheckPreProvisionedDevicesDeviceProfileProvisionConfigurationSchema = zod_1.z.lazy(() => exports.CheckPreProvisionedDevicesDeviceProfileProvisionConfigurationSchemaSchema);
exports.ClaimRequestSchema = zod_1.z.lazy(() => exports.ClaimRequestSchemaSchema);
exports.ClearRuleSchema = zod_1.z.lazy(() => exports.ClearRuleSchemaSchema);
exports.ClientAttributesQueryingSnmpCommunicationConfigSchema = zod_1.z.lazy(() => exports.ClientAttributesQueryingSnmpCommunicationConfigSchemaSchema);
exports.CoapDeviceProfileTransportConfigurationSchema = zod_1.z.lazy(() => exports.CoapDeviceProfileTransportConfigurationSchemaSchema);
exports.CoapDeviceTransportConfigurationSchema = zod_1.z.lazy(() => exports.CoapDeviceTransportConfigurationSchemaSchema);
exports.CoapDeviceTypeConfigurationSchema = zod_1.z.lazy(() => exports.CoapDeviceTypeConfigurationSchemaSchema);
exports.ColumnMappingSchema = zod_1.z.lazy(() => exports.ColumnMappingSchemaSchema);
exports.ComparisonTsValueSchema = zod_1.z.lazy(() => exports.ComparisonTsValueSchemaSchema);
exports.ComplexFilterPredicateSchema = zod_1.z.lazy(() => exports.ComplexFilterPredicateSchemaSchema);
exports.ComplexVersionCreateRequestSchema = zod_1.z.lazy(() => exports.ComplexVersionCreateRequestSchemaSchema);
exports.ComponentDescriptorSchema = zod_1.z.lazy(() => exports.ComponentDescriptorSchemaSchema);
exports.ComponentDescriptorIdSchema = zod_1.z.lazy(() => exports.ComponentDescriptorIdSchemaSchema);
exports.ContactBased_Of_objectSchema = zod_1.z.lazy(() => exports.ContactBased_Of_objectSchemaSchema);
exports.ConverterSchema = zod_1.z.lazy(() => exports.ConverterSchemaSchema);
exports.ConverterIdSchema = zod_1.z.lazy(() => exports.ConverterIdSchemaSchema);
exports.CustomMenuSchema = zod_1.z.lazy(() => exports.CustomMenuSchemaSchema);
exports.CustomMenuItemSchema = zod_1.z.lazy(() => exports.CustomMenuItemSchemaSchema);
exports.CustomTimeScheduleSchema = zod_1.z.lazy(() => exports.CustomTimeScheduleSchemaSchema);
exports.CustomTimeScheduleItemSchema = zod_1.z.lazy(() => exports.CustomTimeScheduleItemSchemaSchema);
exports.CustomTranslationSchema = zod_1.z.lazy(() => exports.CustomTranslationSchemaSchema);
exports.CustomerSchema = zod_1.z.lazy(() => exports.CustomerSchemaSchema);
exports.CustomerIdSchema = zod_1.z.lazy(() => exports.CustomerIdSchemaSchema);
exports.CustomerInfoSchema = zod_1.z.lazy(() => exports.CustomerInfoSchemaSchema);
exports.CustomerUsersFilterSchema = zod_1.z.lazy(() => exports.CustomerUsersFilterSchemaSchema);
exports.DashboardSchema = zod_1.z.lazy(() => exports.DashboardSchemaSchema);
exports.DashboardIdSchema = zod_1.z.lazy(() => exports.DashboardIdSchemaSchema);
exports.DashboardInfoSchema = zod_1.z.lazy(() => exports.DashboardInfoSchemaSchema);
exports.DebugConverterEventFilterSchema = zod_1.z.lazy(() => exports.DebugConverterEventFilterSchemaSchema);
exports.DebugIntegrationEventFilterSchema = zod_1.z.lazy(() => exports.DebugIntegrationEventFilterSchemaSchema);
exports.DefaultCoapDeviceTypeConfigurationSchema = zod_1.z.lazy(() => exports.DefaultCoapDeviceTypeConfigurationSchemaSchema);
exports.DefaultDeviceConfigurationSchema = zod_1.z.lazy(() => exports.DefaultDeviceConfigurationSchemaSchema);
exports.DefaultDeviceProfileConfigurationSchema = zod_1.z.lazy(() => exports.DefaultDeviceProfileConfigurationSchemaSchema);
exports.DefaultDeviceProfileTransportConfigurationSchema = zod_1.z.lazy(() => exports.DefaultDeviceProfileTransportConfigurationSchemaSchema);
exports.DefaultDeviceTransportConfigurationSchema = zod_1.z.lazy(() => exports.DefaultDeviceTransportConfigurationSchemaSchema);
exports.DefaultRuleChainCreateRequestSchema = zod_1.z.lazy(() => exports.DefaultRuleChainCreateRequestSchemaSchema);
exports.DefaultTenantProfileConfigurationSchema = zod_1.z.lazy(() => exports.DefaultTenantProfileConfigurationSchemaSchema);
exports.DeferredResult_Of_EntityDataDiffSchema = zod_1.z.lazy(() => exports.DeferredResult_Of_EntityDataDiffSchemaSchema);
exports.DeferredResult_Of_EntityDataInfoSchema = zod_1.z.lazy(() => exports.DeferredResult_Of_EntityDataInfoSchemaSchema);
exports.DeferredResult_Of_List_BranchInfo_Schema = zod_1.z.lazy(() => exports.DeferredResult_Of_List_BranchInfo_SchemaSchema);
exports.DeferredResult_Of_List_VersionedEntityInfo_Schema = zod_1.z.lazy(() => exports.DeferredResult_Of_List_VersionedEntityInfo_SchemaSchema);
exports.DeferredResult_Of_PageData_EntityVersion_Schema = zod_1.z.lazy(() => exports.DeferredResult_Of_PageData_EntityVersion_SchemaSchema);
exports.DeferredResult_Of_RepositorySettingsSchema = zod_1.z.lazy(() => exports.DeferredResult_Of_RepositorySettingsSchemaSchema);
exports.DeferredResult_Of_ResponseEntitySchema = zod_1.z.lazy(() => exports.DeferredResult_Of_ResponseEntitySchemaSchema);
exports.DeferredResult_Of_VoidSchema = zod_1.z.lazy(() => exports.DeferredResult_Of_VoidSchemaSchema);
exports.DeferredResult_Of_uuidSchema = zod_1.z.lazy(() => exports.DeferredResult_Of_uuidSchemaSchema);
exports.DeliveryMethodNotificationTemplateSchema = zod_1.z.lazy(() => exports.DeliveryMethodNotificationTemplateSchemaSchema);
exports.DeviceSchema = zod_1.z.lazy(() => exports.DeviceSchemaSchema);
exports.DeviceActivityNotificationRuleTriggerConfigSchema = zod_1.z.lazy(() => exports.DeviceActivityNotificationRuleTriggerConfigSchemaSchema);
exports.DeviceConfigurationSchema = zod_1.z.lazy(() => exports.DeviceConfigurationSchemaSchema);
exports.DeviceCredentialsSchema = zod_1.z.lazy(() => exports.DeviceCredentialsSchemaSchema);
exports.DeviceCredentialsIdSchema = zod_1.z.lazy(() => exports.DeviceCredentialsIdSchemaSchema);
exports.DeviceDataSchema = zod_1.z.lazy(() => exports.DeviceDataSchemaSchema);
exports.DeviceExportDataSchema = zod_1.z.lazy(() => exports.DeviceExportDataSchemaSchema);
exports.DeviceGroupOtaPackageSchema = zod_1.z.lazy(() => exports.DeviceGroupOtaPackageSchemaSchema);
exports.DeviceIdSchema = zod_1.z.lazy(() => exports.DeviceIdSchemaSchema);
exports.DeviceInfoSchema = zod_1.z.lazy(() => exports.DeviceInfoSchemaSchema);
exports.DeviceProfileSchema = zod_1.z.lazy(() => exports.DeviceProfileSchemaSchema);
exports.DeviceProfileAlarmSchema = zod_1.z.lazy(() => exports.DeviceProfileAlarmSchemaSchema);
exports.DeviceProfileConfigurationSchema = zod_1.z.lazy(() => exports.DeviceProfileConfigurationSchemaSchema);
exports.DeviceProfileDataSchema = zod_1.z.lazy(() => exports.DeviceProfileDataSchemaSchema);
exports.DeviceProfileIdSchema = zod_1.z.lazy(() => exports.DeviceProfileIdSchemaSchema);
exports.DeviceProfileInfoSchema = zod_1.z.lazy(() => exports.DeviceProfileInfoSchemaSchema);
exports.DeviceProfileProvisionConfigurationSchema = zod_1.z.lazy(() => exports.DeviceProfileProvisionConfigurationSchemaSchema);
exports.DeviceProfileTransportConfigurationSchema = zod_1.z.lazy(() => exports.DeviceProfileTransportConfigurationSchemaSchema);
exports.DeviceSearchQuerySchema = zod_1.z.lazy(() => exports.DeviceSearchQuerySchemaSchema);
exports.DeviceSearchQueryFilterSchema = zod_1.z.lazy(() => exports.DeviceSearchQueryFilterSchemaSchema);
exports.DeviceTransportConfigurationSchema = zod_1.z.lazy(() => exports.DeviceTransportConfigurationSchemaSchema);
exports.DeviceTypeFilterSchema = zod_1.z.lazy(() => exports.DeviceTypeFilterSchemaSchema);
exports.DisabledDeviceProfileProvisionConfigurationSchema = zod_1.z.lazy(() => exports.DisabledDeviceProfileProvisionConfigurationSchemaSchema);
exports.DurationAlarmConditionSpecSchema = zod_1.z.lazy(() => exports.DurationAlarmConditionSpecSchemaSchema);
exports.DynamicValue_Of_booleanSchema = zod_1.z.lazy(() => exports.DynamicValue_Of_booleanSchemaSchema);
exports.DynamicValue_Of_doubleSchema = zod_1.z.lazy(() => exports.DynamicValue_Of_doubleSchemaSchema);
exports.DynamicValue_Of_intSchema = zod_1.z.lazy(() => exports.DynamicValue_Of_intSchemaSchema);
exports.DynamicValue_Of_longSchema = zod_1.z.lazy(() => exports.DynamicValue_Of_longSchemaSchema);
exports.DynamicValue_Of_stringSchema = zod_1.z.lazy(() => exports.DynamicValue_Of_stringSchemaSchema);
exports.EdgeSchema = zod_1.z.lazy(() => exports.EdgeSchemaSchema);
exports.EdgeEventSchema = zod_1.z.lazy(() => exports.EdgeEventSchemaSchema);
exports.EdgeEventIdSchema = zod_1.z.lazy(() => exports.EdgeEventIdSchemaSchema);
exports.EdgeIdSchema = zod_1.z.lazy(() => exports.EdgeIdSchemaSchema);
exports.EdgeInfoSchema = zod_1.z.lazy(() => exports.EdgeInfoSchemaSchema);
exports.EdgeInstructionsSchema = zod_1.z.lazy(() => exports.EdgeInstructionsSchemaSchema);
exports.EdgeSearchQuerySchema = zod_1.z.lazy(() => exports.EdgeSearchQuerySchemaSchema);
exports.EdgeSearchQueryFilterSchema = zod_1.z.lazy(() => exports.EdgeSearchQueryFilterSchemaSchema);
exports.EdgeTypeFilterSchema = zod_1.z.lazy(() => exports.EdgeTypeFilterSchemaSchema);
exports.EfentoCoapDeviceTypeConfigurationSchema = zod_1.z.lazy(() => exports.EfentoCoapDeviceTypeConfigurationSchemaSchema);
exports.EmailDeliveryMethodNotificationTemplateSchema = zod_1.z.lazy(() => exports.EmailDeliveryMethodNotificationTemplateSchemaSchema);
exports.EmailTwoFaAccountConfigSchema = zod_1.z.lazy(() => exports.EmailTwoFaAccountConfigSchemaSchema);
exports.EmailTwoFaProviderConfigSchema = zod_1.z.lazy(() => exports.EmailTwoFaProviderConfigSchemaSchema);
exports.EntitiesByGroupNameFilterSchema = zod_1.z.lazy(() => exports.EntitiesByGroupNameFilterSchemaSchema);
exports.EntitiesLimitNotificationRuleTriggerConfigSchema = zod_1.z.lazy(() => exports.EntitiesLimitNotificationRuleTriggerConfigSchemaSchema);
exports.EntityActionNotificationRuleTriggerConfigSchema = zod_1.z.lazy(() => exports.EntityActionNotificationRuleTriggerConfigSchemaSchema);
exports.EntityCountQuerySchema = zod_1.z.lazy(() => exports.EntityCountQuerySchemaSchema);
exports.EntityDataSchema = zod_1.z.lazy(() => exports.EntityDataSchemaSchema);
exports.EntityDataDiffSchema = zod_1.z.lazy(() => exports.EntityDataDiffSchemaSchema);
exports.EntityDataInfoSchema = zod_1.z.lazy(() => exports.EntityDataInfoSchemaSchema);
exports.EntityDataPageLinkSchema = zod_1.z.lazy(() => exports.EntityDataPageLinkSchemaSchema);
exports.EntityDataQuerySchema = zod_1.z.lazy(() => exports.EntityDataQuerySchemaSchema);
exports.EntityDataSortOrderSchema = zod_1.z.lazy(() => exports.EntityDataSortOrderSchemaSchema);
exports.EntityExportData_Of_objectSchema = zod_1.z.lazy(() => exports.EntityExportData_Of_objectSchemaSchema);
exports.EntityFilterSchema = zod_1.z.lazy(() => exports.EntityFilterSchemaSchema);
exports.EntityGroupSchema = zod_1.z.lazy(() => exports.EntityGroupSchemaSchema);
exports.EntityGroupExportDataSchema = zod_1.z.lazy(() => exports.EntityGroupExportDataSchemaSchema);
exports.EntityGroupFilterSchema = zod_1.z.lazy(() => exports.EntityGroupFilterSchemaSchema);
exports.EntityGroupIdSchema = zod_1.z.lazy(() => exports.EntityGroupIdSchemaSchema);
exports.EntityGroupInfoSchema = zod_1.z.lazy(() => exports.EntityGroupInfoSchemaSchema);
exports.EntityGroupListFilterSchema = zod_1.z.lazy(() => exports.EntityGroupListFilterSchemaSchema);
exports.EntityGroupNameFilterSchema = zod_1.z.lazy(() => exports.EntityGroupNameFilterSchemaSchema);
exports.EntityIdSchema = zod_1.z.lazy(() => exports.EntityIdSchemaSchema);
exports.EntityInfoSchema = zod_1.z.lazy(() => exports.EntityInfoSchemaSchema);
exports.EntityKeySchema = zod_1.z.lazy(() => exports.EntityKeySchemaSchema);
exports.EntityListFilterSchema = zod_1.z.lazy(() => exports.EntityListFilterSchemaSchema);
exports.EntityLoadErrorSchema = zod_1.z.lazy(() => exports.EntityLoadErrorSchemaSchema);
exports.EntityNameFilterSchema = zod_1.z.lazy(() => exports.EntityNameFilterSchemaSchema);
exports.EntityRelationSchema = zod_1.z.lazy(() => exports.EntityRelationSchemaSchema);
exports.EntityRelationInfoSchema = zod_1.z.lazy(() => exports.EntityRelationInfoSchemaSchema);
exports.EntityRelationsQuerySchema = zod_1.z.lazy(() => exports.EntityRelationsQuerySchemaSchema);
exports.EntitySubtypeSchema = zod_1.z.lazy(() => exports.EntitySubtypeSchemaSchema);
exports.EntityTypeFilterSchema = zod_1.z.lazy(() => exports.EntityTypeFilterSchemaSchema);
exports.EntityTypeLoadResultSchema = zod_1.z.lazy(() => exports.EntityTypeLoadResultSchemaSchema);
exports.EntityTypeVersionCreateConfigSchema = zod_1.z.lazy(() => exports.EntityTypeVersionCreateConfigSchemaSchema);
exports.EntityTypeVersionLoadConfigSchema = zod_1.z.lazy(() => exports.EntityTypeVersionLoadConfigSchemaSchema);
exports.EntityTypeVersionLoadRequestSchema = zod_1.z.lazy(() => exports.EntityTypeVersionLoadRequestSchemaSchema);
exports.EntityVersionSchema = zod_1.z.lazy(() => exports.EntityVersionSchemaSchema);
exports.EntityViewSchema = zod_1.z.lazy(() => exports.EntityViewSchemaSchema);
exports.EntityViewIdSchema = zod_1.z.lazy(() => exports.EntityViewIdSchemaSchema);
exports.EntityViewInfoSchema = zod_1.z.lazy(() => exports.EntityViewInfoSchemaSchema);
exports.EntityViewSearchQuerySchema = zod_1.z.lazy(() => exports.EntityViewSearchQuerySchemaSchema);
exports.EntityViewSearchQueryFilterSchema = zod_1.z.lazy(() => exports.EntityViewSearchQueryFilterSchemaSchema);
exports.EntityViewTypeFilterSchema = zod_1.z.lazy(() => exports.EntityViewTypeFilterSchemaSchema);
exports.ErrorEventFilterSchema = zod_1.z.lazy(() => exports.ErrorEventFilterSchemaSchema);
exports.EscalatedNotificationRuleRecipientsConfigSchema = zod_1.z.lazy(() => exports.EscalatedNotificationRuleRecipientsConfigSchemaSchema);
exports.EventFilterSchema = zod_1.z.lazy(() => exports.EventFilterSchemaSchema);
exports.EventIdSchema = zod_1.z.lazy(() => exports.EventIdSchemaSchema);
exports.EventInfoSchema = zod_1.z.lazy(() => exports.EventInfoSchemaSchema);
exports.ExportableEntity_Of_EntityIdSchema = zod_1.z.lazy(() => exports.ExportableEntity_Of_EntityIdSchemaSchema);
exports.FaviconSchema = zod_1.z.lazy(() => exports.FaviconSchemaSchema);
exports.FeaturesInfoSchema = zod_1.z.lazy(() => exports.FeaturesInfoSchemaSchema);
exports.FilterPredicateValue_Of_booleanSchema = zod_1.z.lazy(() => exports.FilterPredicateValue_Of_booleanSchemaSchema);
exports.FilterPredicateValue_Of_doubleSchema = zod_1.z.lazy(() => exports.FilterPredicateValue_Of_doubleSchemaSchema);
exports.FilterPredicateValue_Of_intSchema = zod_1.z.lazy(() => exports.FilterPredicateValue_Of_intSchemaSchema);
exports.FilterPredicateValue_Of_longSchema = zod_1.z.lazy(() => exports.FilterPredicateValue_Of_longSchemaSchema);
exports.FilterPredicateValue_Of_stringSchema = zod_1.z.lazy(() => exports.FilterPredicateValue_Of_stringSchemaSchema);
exports.GroupEntityExportDataSchema = zod_1.z.lazy(() => exports.GroupEntityExportDataSchemaSchema);
exports.GroupPermissionSchema = zod_1.z.lazy(() => exports.GroupPermissionSchemaSchema);
exports.GroupPermissionIdSchema = zod_1.z.lazy(() => exports.GroupPermissionIdSchemaSchema);
exports.GroupPermissionInfoSchema = zod_1.z.lazy(() => exports.GroupPermissionInfoSchemaSchema);
exports.HasId_Of_objectSchema = zod_1.z.lazy(() => exports.HasId_Of_objectSchemaSchema);
exports.HomeDashboardSchema = zod_1.z.lazy(() => exports.HomeDashboardSchemaSchema);
exports.HomeDashboardInfoSchema = zod_1.z.lazy(() => exports.HomeDashboardInfoSchemaSchema);
exports.ImageExportDataSchema = zod_1.z.lazy(() => exports.ImageExportDataSchemaSchema);
exports.InputStreamSchema = zod_1.z.lazy(() => exports.InputStreamSchemaSchema);
exports.IntegrationSchema = zod_1.z.lazy(() => exports.IntegrationSchemaSchema);
exports.IntegrationIdSchema = zod_1.z.lazy(() => exports.IntegrationIdSchemaSchema);
exports.IntegrationInfoSchema = zod_1.z.lazy(() => exports.IntegrationInfoSchemaSchema);
exports.IntegrationLifecycleEventNotificationRuleTriggerConfigSchema = zod_1.z.lazy(() => exports.IntegrationLifecycleEventNotificationRuleTriggerConfigSchemaSchema);
exports.JWT_PairSchema = zod_1.z.lazy(() => exports.JWT_PairSchemaSchema);
exports.JWT_SettingsSchema = zod_1.z.lazy(() => exports.JWT_SettingsSchemaSchema);
exports.JsonNodeSchema = zod_1.z.lazy(() => exports.JsonNodeSchemaSchema);
exports.JsonTransportPayloadConfigurationSchema = zod_1.z.lazy(() => exports.JsonTransportPayloadConfigurationSchemaSchema);
exports.KeyFilterSchema = zod_1.z.lazy(() => exports.KeyFilterSchemaSchema);
exports.KeyFilterPredicateSchema = zod_1.z.lazy(() => exports.KeyFilterPredicateSchemaSchema);
exports.LastVisitedDashboardInfoSchema = zod_1.z.lazy(() => exports.LastVisitedDashboardInfoSchemaSchema);
exports.LicenseUsageInfoSchema = zod_1.z.lazy(() => exports.LicenseUsageInfoSchemaSchema);
exports.LifeCycleEventFilterSchema = zod_1.z.lazy(() => exports.LifeCycleEventFilterSchemaSchema);
exports.LoginRequestSchema = zod_1.z.lazy(() => exports.LoginRequestSchemaSchema);
exports.LoginResponseSchema = zod_1.z.lazy(() => exports.LoginResponseSchemaSchema);
exports.LoginWhiteLabelingParamsSchema = zod_1.z.lazy(() => exports.LoginWhiteLabelingParamsSchemaSchema);
exports.LwM2MBootstrapServerCredentialSchema = zod_1.z.lazy(() => exports.LwM2MBootstrapServerCredentialSchemaSchema);
exports.LwM2mInstanceSchema = zod_1.z.lazy(() => exports.LwM2mInstanceSchemaSchema);
exports.LwM2mObjectSchema = zod_1.z.lazy(() => exports.LwM2mObjectSchemaSchema);
exports.LwM2mResourceObserveSchema = zod_1.z.lazy(() => exports.LwM2mResourceObserveSchemaSchema);
exports.Lwm2mDeviceProfileTransportConfigurationSchema = zod_1.z.lazy(() => exports.Lwm2mDeviceProfileTransportConfigurationSchemaSchema);
exports.Lwm2mDeviceTransportConfigurationSchema = zod_1.z.lazy(() => exports.Lwm2mDeviceTransportConfigurationSchemaSchema);
exports.MappingSchema = zod_1.z.lazy(() => exports.MappingSchemaSchema);
exports.MergedGroupPermissionInfoSchema = zod_1.z.lazy(() => exports.MergedGroupPermissionInfoSchemaSchema);
exports.MergedGroupTypePermissionInfoSchema = zod_1.z.lazy(() => exports.MergedGroupTypePermissionInfoSchemaSchema);
exports.MergedUserPermissionsSchema = zod_1.z.lazy(() => exports.MergedUserPermissionsSchemaSchema);
exports.MicrosoftTeamsDeliveryMethodNotificationTemplateSchema = zod_1.z.lazy(() => exports.MicrosoftTeamsDeliveryMethodNotificationTemplateSchemaSchema);
exports.MicrosoftTeamsNotificationTargetConfigSchema = zod_1.z.lazy(() => exports.MicrosoftTeamsNotificationTargetConfigSchemaSchema);
exports.MqttDeviceProfileTransportConfigurationSchema = zod_1.z.lazy(() => exports.MqttDeviceProfileTransportConfigurationSchemaSchema);
exports.MqttDeviceTransportConfigurationSchema = zod_1.z.lazy(() => exports.MqttDeviceTransportConfigurationSchemaSchema);
exports.NewPlatformVersionNotificationRuleTriggerConfigSchema = zod_1.z.lazy(() => exports.NewPlatformVersionNotificationRuleTriggerConfigSchemaSchema);
exports.NoSecLwM2MBootstrapServerCredentialSchema = zod_1.z.lazy(() => exports.NoSecLwM2MBootstrapServerCredentialSchemaSchema);
exports.NodeConnectionInfoSchema = zod_1.z.lazy(() => exports.NodeConnectionInfoSchemaSchema);
exports.NotificationSchema = zod_1.z.lazy(() => exports.NotificationSchemaSchema);
exports.NotificationDeliveryMethodConfigSchema = zod_1.z.lazy(() => exports.NotificationDeliveryMethodConfigSchemaSchema);
exports.NotificationIdSchema = zod_1.z.lazy(() => exports.NotificationIdSchemaSchema);
exports.NotificationInfoSchema = zod_1.z.lazy(() => exports.NotificationInfoSchemaSchema);
exports.NotificationPrefSchema = zod_1.z.lazy(() => exports.NotificationPrefSchemaSchema);
exports.NotificationRequestSchema = zod_1.z.lazy(() => exports.NotificationRequestSchemaSchema);
exports.NotificationRequestConfigSchema = zod_1.z.lazy(() => exports.NotificationRequestConfigSchemaSchema);
exports.NotificationRequestIdSchema = zod_1.z.lazy(() => exports.NotificationRequestIdSchemaSchema);
exports.NotificationRequestInfoSchema = zod_1.z.lazy(() => exports.NotificationRequestInfoSchemaSchema);
exports.NotificationRequestPreviewSchema = zod_1.z.lazy(() => exports.NotificationRequestPreviewSchemaSchema);
exports.NotificationRequestStatsSchema = zod_1.z.lazy(() => exports.NotificationRequestStatsSchemaSchema);
exports.NotificationRuleSchema = zod_1.z.lazy(() => exports.NotificationRuleSchemaSchema);
exports.NotificationRuleConfigSchema = zod_1.z.lazy(() => exports.NotificationRuleConfigSchemaSchema);
exports.NotificationRuleIdSchema = zod_1.z.lazy(() => exports.NotificationRuleIdSchemaSchema);
exports.NotificationRuleInfoSchema = zod_1.z.lazy(() => exports.NotificationRuleInfoSchemaSchema);
exports.NotificationRuleRecipientsConfigSchema = zod_1.z.lazy(() => exports.NotificationRuleRecipientsConfigSchemaSchema);
exports.NotificationRuleTriggerConfigSchema = zod_1.z.lazy(() => exports.NotificationRuleTriggerConfigSchemaSchema);
exports.NotificationSettingsSchema = zod_1.z.lazy(() => exports.NotificationSettingsSchemaSchema);
exports.NotificationTargetSchema = zod_1.z.lazy(() => exports.NotificationTargetSchemaSchema);
exports.NotificationTargetConfigSchema = zod_1.z.lazy(() => exports.NotificationTargetConfigSchemaSchema);
exports.NotificationTemplateSchema = zod_1.z.lazy(() => exports.NotificationTemplateSchemaSchema);
exports.NotificationTemplateConfigSchema = zod_1.z.lazy(() => exports.NotificationTemplateConfigSchemaSchema);
exports.NotificationTemplateIdSchema = zod_1.z.lazy(() => exports.NotificationTemplateIdSchemaSchema);
exports.NumericFilterPredicateSchema = zod_1.z.lazy(() => exports.NumericFilterPredicateSchemaSchema);
exports.OAuth2BasicMapperConfigSchema = zod_1.z.lazy(() => exports.OAuth2BasicMapperConfigSchemaSchema);
exports.OAuth2ClientInfoSchema = zod_1.z.lazy(() => exports.OAuth2ClientInfoSchemaSchema);
exports.OAuth2ClientRegistrationTemplateSchema = zod_1.z.lazy(() => exports.OAuth2ClientRegistrationTemplateSchemaSchema);
exports.OAuth2ClientRegistrationTemplateIdSchema = zod_1.z.lazy(() => exports.OAuth2ClientRegistrationTemplateIdSchemaSchema);
exports.OAuth2CustomMapperConfigSchema = zod_1.z.lazy(() => exports.OAuth2CustomMapperConfigSchemaSchema);
exports.OAuth2DomainInfoSchema = zod_1.z.lazy(() => exports.OAuth2DomainInfoSchemaSchema);
exports.OAuth2InfoSchema = zod_1.z.lazy(() => exports.OAuth2InfoSchemaSchema);
exports.OAuth2MapperConfigSchema = zod_1.z.lazy(() => exports.OAuth2MapperConfigSchemaSchema);
exports.OAuth2MobileInfoSchema = zod_1.z.lazy(() => exports.OAuth2MobileInfoSchemaSchema);
exports.OAuth2ParamsInfoSchema = zod_1.z.lazy(() => exports.OAuth2ParamsInfoSchemaSchema);
exports.OAuth2RegistrationInfoSchema = zod_1.z.lazy(() => exports.OAuth2RegistrationInfoSchemaSchema);
exports.ObjectAttributesSchema = zod_1.z.lazy(() => exports.ObjectAttributesSchemaSchema);
exports.ObjectNodeSchema = zod_1.z.lazy(() => exports.ObjectNodeSchemaSchema);
exports.OriginatorEntityOwnerUsersFilterSchema = zod_1.z.lazy(() => exports.OriginatorEntityOwnerUsersFilterSchemaSchema);
exports.OtaPackageSchema = zod_1.z.lazy(() => exports.OtaPackageSchemaSchema);
exports.OtaPackageIdSchema = zod_1.z.lazy(() => exports.OtaPackageIdSchemaSchema);
exports.OtaPackageInfoSchema = zod_1.z.lazy(() => exports.OtaPackageInfoSchemaSchema);
exports.OtherConfigurationSchema = zod_1.z.lazy(() => exports.OtherConfigurationSchemaSchema);
exports.PSKLwM2MBootstrapServerCredentialSchema = zod_1.z.lazy(() => exports.PSKLwM2MBootstrapServerCredentialSchemaSchema);
exports.PageData_Of_AlarmCommentInfoSchema = zod_1.z.lazy(() => exports.PageData_Of_AlarmCommentInfoSchemaSchema);
exports.PageData_Of_AlarmDataSchema = zod_1.z.lazy(() => exports.PageData_Of_AlarmDataSchemaSchema);
exports.PageData_Of_AlarmInfoSchema = zod_1.z.lazy(() => exports.PageData_Of_AlarmInfoSchemaSchema);
exports.PageData_Of_AssetInfoSchema = zod_1.z.lazy(() => exports.PageData_Of_AssetInfoSchemaSchema);
exports.PageData_Of_AssetProfileInfoSchema = zod_1.z.lazy(() => exports.PageData_Of_AssetProfileInfoSchemaSchema);
exports.PageData_Of_AssetProfileSchema = zod_1.z.lazy(() => exports.PageData_Of_AssetProfileSchemaSchema);
exports.PageData_Of_AssetSchema = zod_1.z.lazy(() => exports.PageData_Of_AssetSchemaSchema);
exports.PageData_Of_AuditLogSchema = zod_1.z.lazy(() => exports.PageData_Of_AuditLogSchemaSchema);
exports.PageData_Of_BlobEntityWithCustomerInfoSchema = zod_1.z.lazy(() => exports.PageData_Of_BlobEntityWithCustomerInfoSchemaSchema);
exports.PageData_Of_ContactBased_object_Schema = zod_1.z.lazy(() => exports.PageData_Of_ContactBased_object_SchemaSchema);
exports.PageData_Of_ConverterSchema = zod_1.z.lazy(() => exports.PageData_Of_ConverterSchemaSchema);
exports.PageData_Of_CustomerInfoSchema = zod_1.z.lazy(() => exports.PageData_Of_CustomerInfoSchemaSchema);
exports.PageData_Of_CustomerSchema = zod_1.z.lazy(() => exports.PageData_Of_CustomerSchemaSchema);
exports.PageData_Of_DashboardInfoSchema = zod_1.z.lazy(() => exports.PageData_Of_DashboardInfoSchemaSchema);
exports.PageData_Of_DeviceInfoSchema = zod_1.z.lazy(() => exports.PageData_Of_DeviceInfoSchemaSchema);
exports.PageData_Of_DeviceProfileInfoSchema = zod_1.z.lazy(() => exports.PageData_Of_DeviceProfileInfoSchemaSchema);
exports.PageData_Of_DeviceProfileSchema = zod_1.z.lazy(() => exports.PageData_Of_DeviceProfileSchemaSchema);
exports.PageData_Of_DeviceSchema = zod_1.z.lazy(() => exports.PageData_Of_DeviceSchemaSchema);
exports.PageData_Of_EdgeEventSchema = zod_1.z.lazy(() => exports.PageData_Of_EdgeEventSchemaSchema);
exports.PageData_Of_EdgeInfoSchema = zod_1.z.lazy(() => exports.PageData_Of_EdgeInfoSchemaSchema);
exports.PageData_Of_EdgeSchema = zod_1.z.lazy(() => exports.PageData_Of_EdgeSchemaSchema);
exports.PageData_Of_EntityDataSchema = zod_1.z.lazy(() => exports.PageData_Of_EntityDataSchemaSchema);
exports.PageData_Of_EntityGroupInfoSchema = zod_1.z.lazy(() => exports.PageData_Of_EntityGroupInfoSchemaSchema);
exports.PageData_Of_EntityInfoSchema = zod_1.z.lazy(() => exports.PageData_Of_EntityInfoSchemaSchema);
exports.PageData_Of_EntitySubtypeSchema = zod_1.z.lazy(() => exports.PageData_Of_EntitySubtypeSchemaSchema);
exports.PageData_Of_EntityVersionSchema = zod_1.z.lazy(() => exports.PageData_Of_EntityVersionSchemaSchema);
exports.PageData_Of_EntityViewInfoSchema = zod_1.z.lazy(() => exports.PageData_Of_EntityViewInfoSchemaSchema);
exports.PageData_Of_EntityViewSchema = zod_1.z.lazy(() => exports.PageData_Of_EntityViewSchemaSchema);
exports.PageData_Of_EventInfoSchema = zod_1.z.lazy(() => exports.PageData_Of_EventInfoSchemaSchema);
exports.PageData_Of_IntegrationInfoSchema = zod_1.z.lazy(() => exports.PageData_Of_IntegrationInfoSchemaSchema);
exports.PageData_Of_IntegrationSchema = zod_1.z.lazy(() => exports.PageData_Of_IntegrationSchemaSchema);
exports.PageData_Of_NotificationRequestInfoSchema = zod_1.z.lazy(() => exports.PageData_Of_NotificationRequestInfoSchemaSchema);
exports.PageData_Of_NotificationRuleInfoSchema = zod_1.z.lazy(() => exports.PageData_Of_NotificationRuleInfoSchemaSchema);
exports.PageData_Of_NotificationTargetSchema = zod_1.z.lazy(() => exports.PageData_Of_NotificationTargetSchemaSchema);
exports.PageData_Of_NotificationTemplateSchema = zod_1.z.lazy(() => exports.PageData_Of_NotificationTemplateSchemaSchema);
exports.PageData_Of_NotificationSchema = zod_1.z.lazy(() => exports.PageData_Of_NotificationSchemaSchema);
exports.PageData_Of_OtaPackageInfoSchema = zod_1.z.lazy(() => exports.PageData_Of_OtaPackageInfoSchemaSchema);
exports.PageData_Of_QueueSchema = zod_1.z.lazy(() => exports.PageData_Of_QueueSchemaSchema);
exports.PageData_Of_RoleSchema = zod_1.z.lazy(() => exports.PageData_Of_RoleSchemaSchema);
exports.PageData_Of_RuleChainSchema = zod_1.z.lazy(() => exports.PageData_Of_RuleChainSchemaSchema);
exports.PageData_Of_SchedulerEventInfoSchema = zod_1.z.lazy(() => exports.PageData_Of_SchedulerEventInfoSchemaSchema);
exports.PageData_Of_ShortEntityViewSchema = zod_1.z.lazy(() => exports.PageData_Of_ShortEntityViewSchemaSchema);
exports.PageData_Of_TbResourceInfoSchema = zod_1.z.lazy(() => exports.PageData_Of_TbResourceInfoSchemaSchema);
exports.PageData_Of_TenantInfoSchema = zod_1.z.lazy(() => exports.PageData_Of_TenantInfoSchemaSchema);
exports.PageData_Of_TenantProfileSchema = zod_1.z.lazy(() => exports.PageData_Of_TenantProfileSchemaSchema);
exports.PageData_Of_TenantSchema = zod_1.z.lazy(() => exports.PageData_Of_TenantSchemaSchema);
exports.PageData_Of_UserEmailInfoSchema = zod_1.z.lazy(() => exports.PageData_Of_UserEmailInfoSchemaSchema);
exports.PageData_Of_UserInfoSchema = zod_1.z.lazy(() => exports.PageData_Of_UserInfoSchemaSchema);
exports.PageData_Of_UserSchema = zod_1.z.lazy(() => exports.PageData_Of_UserSchemaSchema);
exports.PageData_Of_WidgetTypeInfoSchema = zod_1.z.lazy(() => exports.PageData_Of_WidgetTypeInfoSchemaSchema);
exports.PageData_Of_WidgetsBundleSchema = zod_1.z.lazy(() => exports.PageData_Of_WidgetsBundleSchemaSchema);
exports.PaletteSchema = zod_1.z.lazy(() => exports.PaletteSchemaSchema);
exports.PaletteSettingsSchema = zod_1.z.lazy(() => exports.PaletteSettingsSchemaSchema);
exports.PlatformTwoFaSettingsSchema = zod_1.z.lazy(() => exports.PlatformTwoFaSettingsSchemaSchema);
exports.PlatformUsersNotificationTargetConfigSchema = zod_1.z.lazy(() => exports.PlatformUsersNotificationTargetConfigSchemaSchema);
exports.PowerSavingConfigurationSchema = zod_1.z.lazy(() => exports.PowerSavingConfigurationSchemaSchema);
exports.ProcessingStrategySchema = zod_1.z.lazy(() => exports.ProcessingStrategySchemaSchema);
exports.ProtoTransportPayloadConfigurationSchema = zod_1.z.lazy(() => exports.ProtoTransportPayloadConfigurationSchemaSchema);
exports.QueueSchema = zod_1.z.lazy(() => exports.QueueSchemaSchema);
exports.QueueIdSchema = zod_1.z.lazy(() => exports.QueueIdSchemaSchema);
exports.RPKLwM2MBootstrapServerCredentialSchema = zod_1.z.lazy(() => exports.RPKLwM2MBootstrapServerCredentialSchemaSchema);
exports.RateLimitsNotificationRuleTriggerConfigSchema = zod_1.z.lazy(() => exports.RateLimitsNotificationRuleTriggerConfigSchemaSchema);
exports.RawDataEventFilterSchema = zod_1.z.lazy(() => exports.RawDataEventFilterSchemaSchema);
exports.RelationEntityTypeFilterSchema = zod_1.z.lazy(() => exports.RelationEntityTypeFilterSchemaSchema);
exports.RelationsQueryFilterSchema = zod_1.z.lazy(() => exports.RelationsQueryFilterSchemaSchema);
exports.RelationsSearchParametersSchema = zod_1.z.lazy(() => exports.RelationsSearchParametersSchemaSchema);
exports.RepeatingAlarmConditionSpecSchema = zod_1.z.lazy(() => exports.RepeatingAlarmConditionSpecSchemaSchema);
exports.ReportConfigSchema = zod_1.z.lazy(() => exports.ReportConfigSchemaSchema);
exports.RepositorySettingsSchema = zod_1.z.lazy(() => exports.RepositorySettingsSchemaSchema);
exports.RepositorySettingsInfoSchema = zod_1.z.lazy(() => exports.RepositorySettingsInfoSchemaSchema);
exports.ResetPasswordEmailRequestSchema = zod_1.z.lazy(() => exports.ResetPasswordEmailRequestSchemaSchema);
exports.ResetPasswordRequestSchema = zod_1.z.lazy(() => exports.ResetPasswordRequestSchemaSchema);
exports.ResourceSchema = zod_1.z.lazy(() => exports.ResourceSchemaSchema);
exports.ResponseEntitySchema = zod_1.z.lazy(() => exports.ResponseEntitySchemaSchema);
exports.RoleSchema = zod_1.z.lazy(() => exports.RoleSchemaSchema);
exports.RoleIdSchema = zod_1.z.lazy(() => exports.RoleIdSchemaSchema);
exports.RpcSchema = zod_1.z.lazy(() => exports.RpcSchemaSchema);
exports.RpcIdSchema = zod_1.z.lazy(() => exports.RpcIdSchemaSchema);
exports.RuleChainSchema = zod_1.z.lazy(() => exports.RuleChainSchemaSchema);
exports.RuleChainConnectionInfoSchema = zod_1.z.lazy(() => exports.RuleChainConnectionInfoSchemaSchema);
exports.RuleChainDataSchema = zod_1.z.lazy(() => exports.RuleChainDataSchemaSchema);
exports.RuleChainDebugEventFilterSchema = zod_1.z.lazy(() => exports.RuleChainDebugEventFilterSchemaSchema);
exports.RuleChainExportDataSchema = zod_1.z.lazy(() => exports.RuleChainExportDataSchemaSchema);
exports.RuleChainIdSchema = zod_1.z.lazy(() => exports.RuleChainIdSchemaSchema);
exports.RuleChainImportResultSchema = zod_1.z.lazy(() => exports.RuleChainImportResultSchemaSchema);
exports.RuleChainMetaDataSchema = zod_1.z.lazy(() => exports.RuleChainMetaDataSchemaSchema);
exports.RuleChainOutputLabelsUsageSchema = zod_1.z.lazy(() => exports.RuleChainOutputLabelsUsageSchemaSchema);
exports.RuleEngineComponentLifecycleEventNotificationRuleTriggerConfigSchema = zod_1.z.lazy(() => exports.RuleEngineComponentLifecycleEventNotificationRuleTriggerConfigSchemaSchema);
exports.RuleNodeSchema = zod_1.z.lazy(() => exports.RuleNodeSchemaSchema);
exports.RuleNodeDebugEventFilterSchema = zod_1.z.lazy(() => exports.RuleNodeDebugEventFilterSchemaSchema);
exports.RuleNodeIdSchema = zod_1.z.lazy(() => exports.RuleNodeIdSchemaSchema);
exports.SaveDeviceWithCredentialsRequestSchema = zod_1.z.lazy(() => exports.SaveDeviceWithCredentialsRequestSchemaSchema);
exports.SaveOtaPackageInfoRequestSchema = zod_1.z.lazy(() => exports.SaveOtaPackageInfoRequestSchemaSchema);
exports.SchedulerEventSchema = zod_1.z.lazy(() => exports.SchedulerEventSchemaSchema);
exports.SchedulerEventFilterSchema = zod_1.z.lazy(() => exports.SchedulerEventFilterSchemaSchema);
exports.SchedulerEventIdSchema = zod_1.z.lazy(() => exports.SchedulerEventIdSchemaSchema);
exports.SchedulerEventInfoSchema = zod_1.z.lazy(() => exports.SchedulerEventInfoSchemaSchema);
exports.SchedulerEventWithCustomerInfoSchema = zod_1.z.lazy(() => exports.SchedulerEventWithCustomerInfoSchemaSchema);
exports.SecuritySettingsSchema = zod_1.z.lazy(() => exports.SecuritySettingsSchemaSchema);
exports.SelfRegistrationParamsSchema = zod_1.z.lazy(() => exports.SelfRegistrationParamsSchemaSchema);
exports.ShareGroupRequestSchema = zod_1.z.lazy(() => exports.ShareGroupRequestSchemaSchema);
exports.SharedAttributesSettingSnmpCommunicationConfigSchema = zod_1.z.lazy(() => exports.SharedAttributesSettingSnmpCommunicationConfigSchemaSchema);
exports.ShortCustomerInfoSchema = zod_1.z.lazy(() => exports.ShortCustomerInfoSchemaSchema);
exports.ShortEntityViewSchema = zod_1.z.lazy(() => exports.ShortEntityViewSchemaSchema);
exports.SignUpRequestSchema = zod_1.z.lazy(() => exports.SignUpRequestSchemaSchema);
exports.SignUpSelfRegistrationParamsSchema = zod_1.z.lazy(() => exports.SignUpSelfRegistrationParamsSchemaSchema);
exports.SimpleAlarmConditionSpecSchema = zod_1.z.lazy(() => exports.SimpleAlarmConditionSpecSchemaSchema);
exports.SingleEntityFilterSchema = zod_1.z.lazy(() => exports.SingleEntityFilterSchemaSchema);
exports.SingleEntityVersionCreateRequestSchema = zod_1.z.lazy(() => exports.SingleEntityVersionCreateRequestSchemaSchema);
exports.SingleEntityVersionLoadRequestSchema = zod_1.z.lazy(() => exports.SingleEntityVersionLoadRequestSchemaSchema);
exports.SlackConversationSchema = zod_1.z.lazy(() => exports.SlackConversationSchemaSchema);
exports.SlackDeliveryMethodNotificationTemplateSchema = zod_1.z.lazy(() => exports.SlackDeliveryMethodNotificationTemplateSchemaSchema);
exports.SlackNotificationDeliveryMethodConfigSchema = zod_1.z.lazy(() => exports.SlackNotificationDeliveryMethodConfigSchemaSchema);
exports.SlackNotificationTargetConfigSchema = zod_1.z.lazy(() => exports.SlackNotificationTargetConfigSchemaSchema);
exports.SmppSmsProviderConfigurationSchema = zod_1.z.lazy(() => exports.SmppSmsProviderConfigurationSchemaSchema);
exports.SmsDeliveryMethodNotificationTemplateSchema = zod_1.z.lazy(() => exports.SmsDeliveryMethodNotificationTemplateSchemaSchema);
exports.SmsProviderConfigurationSchema = zod_1.z.lazy(() => exports.SmsProviderConfigurationSchemaSchema);
exports.SmsTwoFaAccountConfigSchema = zod_1.z.lazy(() => exports.SmsTwoFaAccountConfigSchemaSchema);
exports.SmsTwoFaProviderConfigSchema = zod_1.z.lazy(() => exports.SmsTwoFaProviderConfigSchemaSchema);
exports.SnmpCommunicationConfigSchema = zod_1.z.lazy(() => exports.SnmpCommunicationConfigSchemaSchema);
exports.SnmpDeviceProfileTransportConfigurationSchema = zod_1.z.lazy(() => exports.SnmpDeviceProfileTransportConfigurationSchemaSchema);
exports.SnmpDeviceTransportConfigurationSchema = zod_1.z.lazy(() => exports.SnmpDeviceTransportConfigurationSchemaSchema);
exports.SnmpMappingSchema = zod_1.z.lazy(() => exports.SnmpMappingSchemaSchema);
exports.SolutionInstallResponseSchema = zod_1.z.lazy(() => exports.SolutionInstallResponseSchemaSchema);
exports.SpecificTimeScheduleSchema = zod_1.z.lazy(() => exports.SpecificTimeScheduleSchemaSchema);
exports.StarredDashboardInfoSchema = zod_1.z.lazy(() => exports.StarredDashboardInfoSchemaSchema);
exports.StateEntityOwnerFilterSchema = zod_1.z.lazy(() => exports.StateEntityOwnerFilterSchemaSchema);
exports.StatisticsEventFilterSchema = zod_1.z.lazy(() => exports.StatisticsEventFilterSchemaSchema);
exports.StringFilterPredicateSchema = zod_1.z.lazy(() => exports.StringFilterPredicateSchemaSchema);
exports.SubmitStrategySchema = zod_1.z.lazy(() => exports.SubmitStrategySchemaSchema);
exports.SystemAdministratorsFilterSchema = zod_1.z.lazy(() => exports.SystemAdministratorsFilterSchemaSchema);
exports.SystemInfoSchema = zod_1.z.lazy(() => exports.SystemInfoSchemaSchema);
exports.SystemInfoDataSchema = zod_1.z.lazy(() => exports.SystemInfoDataSchemaSchema);
exports.TbImageDeleteResultSchema = zod_1.z.lazy(() => exports.TbImageDeleteResultSchemaSchema);
exports.TbResourceSchema = zod_1.z.lazy(() => exports.TbResourceSchemaSchema);
exports.TbResourceIdSchema = zod_1.z.lazy(() => exports.TbResourceIdSchemaSchema);
exports.TbResourceInfoSchema = zod_1.z.lazy(() => exports.TbResourceInfoSchemaSchema);
exports.TelemetryEntityViewSchema = zod_1.z.lazy(() => exports.TelemetryEntityViewSchemaSchema);
exports.TelemetryMappingConfigurationSchema = zod_1.z.lazy(() => exports.TelemetryMappingConfigurationSchemaSchema);
exports.TelemetryQueryingSnmpCommunicationConfigSchema = zod_1.z.lazy(() => exports.TelemetryQueryingSnmpCommunicationConfigSchemaSchema);
exports.TenantSchema = zod_1.z.lazy(() => exports.TenantSchemaSchema);
exports.TenantAdministratorsFilterSchema = zod_1.z.lazy(() => exports.TenantAdministratorsFilterSchemaSchema);
exports.TenantIdSchema = zod_1.z.lazy(() => exports.TenantIdSchemaSchema);
exports.TenantInfoSchema = zod_1.z.lazy(() => exports.TenantInfoSchemaSchema);
exports.TenantProfileSchema = zod_1.z.lazy(() => exports.TenantProfileSchemaSchema);
exports.TenantProfileConfigurationSchema = zod_1.z.lazy(() => exports.TenantProfileConfigurationSchemaSchema);
exports.TenantProfileDataSchema = zod_1.z.lazy(() => exports.TenantProfileDataSchemaSchema);
exports.TenantProfileIdSchema = zod_1.z.lazy(() => exports.TenantProfileIdSchemaSchema);
exports.TenantProfileQueueConfigurationSchema = zod_1.z.lazy(() => exports.TenantProfileQueueConfigurationSchemaSchema);
exports.TenantSolutionTemplateDetailsSchema = zod_1.z.lazy(() => exports.TenantSolutionTemplateDetailsSchemaSchema);
exports.TenantSolutionTemplateInfoSchema = zod_1.z.lazy(() => exports.TenantSolutionTemplateInfoSchemaSchema);
exports.TenantSolutionTemplateInstructionsSchema = zod_1.z.lazy(() => exports.TenantSolutionTemplateInstructionsSchemaSchema);
exports.TestSmsRequestSchema = zod_1.z.lazy(() => exports.TestSmsRequestSchemaSchema);
exports.ThingsboardCredentialsExpiredResponseSchema = zod_1.z.lazy(() => exports.ThingsboardCredentialsExpiredResponseSchemaSchema);
exports.ThingsboardErrorResponseSchema = zod_1.z.lazy(() => exports.ThingsboardErrorResponseSchemaSchema);
exports.ToDeviceRpcRequestSnmpCommunicationConfigSchema = zod_1.z.lazy(() => exports.ToDeviceRpcRequestSnmpCommunicationConfigSchemaSchema);
exports.ToServerRpcRequestSnmpCommunicationConfigSchema = zod_1.z.lazy(() => exports.ToServerRpcRequestSnmpCommunicationConfigSchemaSchema);
exports.TotpTwoFaAccountConfigSchema = zod_1.z.lazy(() => exports.TotpTwoFaAccountConfigSchemaSchema);
exports.TotpTwoFaProviderConfigSchema = zod_1.z.lazy(() => exports.TotpTwoFaProviderConfigSchemaSchema);
exports.TransportPayloadTypeConfigurationSchema = zod_1.z.lazy(() => exports.TransportPayloadTypeConfigurationSchemaSchema);
exports.TsValueSchema = zod_1.z.lazy(() => exports.TsValueSchemaSchema);
exports.TwilioSmsProviderConfigurationSchema = zod_1.z.lazy(() => exports.TwilioSmsProviderConfigurationSchemaSchema);
exports.TwoFaAccountConfigSchema = zod_1.z.lazy(() => exports.TwoFaAccountConfigSchemaSchema);
exports.TwoFaAccountConfigUpdateRequestSchema = zod_1.z.lazy(() => exports.TwoFaAccountConfigUpdateRequestSchemaSchema);
exports.TwoFaProviderConfigSchema = zod_1.z.lazy(() => exports.TwoFaProviderConfigSchemaSchema);
exports.TwoFaProviderInfoSchema = zod_1.z.lazy(() => exports.TwoFaProviderInfoSchemaSchema);
exports.UpdateMessageSchema = zod_1.z.lazy(() => exports.UpdateMessageSchemaSchema);
exports.UsageInfoSchema = zod_1.z.lazy(() => exports.UsageInfoSchemaSchema);
exports.UserSchema = zod_1.z.lazy(() => exports.UserSchemaSchema);
exports.UserDashboardsInfoSchema = zod_1.z.lazy(() => exports.UserDashboardsInfoSchemaSchema);
exports.UserEmailInfoSchema = zod_1.z.lazy(() => exports.UserEmailInfoSchemaSchema);
exports.UserGroupListFilterSchema = zod_1.z.lazy(() => exports.UserGroupListFilterSchemaSchema);
exports.UserIdSchema = zod_1.z.lazy(() => exports.UserIdSchemaSchema);
exports.UserInfoSchema = zod_1.z.lazy(() => exports.UserInfoSchemaSchema);
exports.UserListFilterSchema = zod_1.z.lazy(() => exports.UserListFilterSchemaSchema);
exports.UserNotificationSettingsSchema = zod_1.z.lazy(() => exports.UserNotificationSettingsSchemaSchema);
exports.UserPasswordPolicySchema = zod_1.z.lazy(() => exports.UserPasswordPolicySchemaSchema);
exports.UserRoleFilterSchema = zod_1.z.lazy(() => exports.UserRoleFilterSchemaSchema);
exports.UsersFilterSchema = zod_1.z.lazy(() => exports.UsersFilterSchemaSchema);
exports.VersionCreateConfigSchema = zod_1.z.lazy(() => exports.VersionCreateConfigSchemaSchema);
exports.VersionCreateRequestSchema = zod_1.z.lazy(() => exports.VersionCreateRequestSchemaSchema);
exports.VersionCreationResultSchema = zod_1.z.lazy(() => exports.VersionCreationResultSchemaSchema);
exports.VersionLoadConfigSchema = zod_1.z.lazy(() => exports.VersionLoadConfigSchemaSchema);
exports.VersionLoadRequestSchema = zod_1.z.lazy(() => exports.VersionLoadRequestSchemaSchema);
exports.VersionLoadResultSchema = zod_1.z.lazy(() => exports.VersionLoadResultSchemaSchema);
exports.VersionedEntityInfoSchema = zod_1.z.lazy(() => exports.VersionedEntityInfoSchemaSchema);
exports.WebDeliveryMethodNotificationTemplateSchema = zod_1.z.lazy(() => exports.WebDeliveryMethodNotificationTemplateSchemaSchema);
exports.WhiteLabelingSchema = zod_1.z.lazy(() => exports.WhiteLabelingSchemaSchema);
exports.WhiteLabelingParamsSchema = zod_1.z.lazy(() => exports.WhiteLabelingParamsSchemaSchema);
exports.WidgetTypeSchema = zod_1.z.lazy(() => exports.WidgetTypeSchemaSchema);
exports.WidgetTypeDetailsSchema = zod_1.z.lazy(() => exports.WidgetTypeDetailsSchemaSchema);
exports.WidgetTypeExportDataSchema = zod_1.z.lazy(() => exports.WidgetTypeExportDataSchemaSchema);
exports.WidgetTypeIdSchema = zod_1.z.lazy(() => exports.WidgetTypeIdSchemaSchema);
exports.WidgetTypeInfoSchema = zod_1.z.lazy(() => exports.WidgetTypeInfoSchemaSchema);
exports.WidgetsBundleSchema = zod_1.z.lazy(() => exports.WidgetsBundleSchemaSchema);
exports.WidgetsBundleExportDataSchema = zod_1.z.lazy(() => exports.WidgetsBundleExportDataSchemaSchema);
exports.WidgetsBundleIdSchema = zod_1.z.lazy(() => exports.WidgetsBundleIdSchemaSchema);
exports.X509CertificateChainProvisionConfigurationSchema = zod_1.z.lazy(() => exports.X509CertificateChainProvisionConfigurationSchemaSchema);
exports.X509LwM2MBootstrapServerCredentialSchema = zod_1.z.lazy(() => exports.X509LwM2MBootstrapServerCredentialSchemaSchema);
exports.AccountTwoFaSettingsSchemaSchema = zod_1.z.object({
    "configs": zod_1.z.record(zod_1.z.string(), exports.TwoFaAccountConfigSchema)
});
exports.ActivateUserRequestSchemaSchema = zod_1.z.object({
    "activateToken": zod_1.z.string(),
    "password": zod_1.z.string()
});
exports.AdminSettingsSchemaSchema = zod_1.z.object({
    "id": exports.AdminSettingsIdSchema,
    "createdTime": zod_1.z.number(),
    "tenantId": exports.TenantIdSchema,
    "key": zod_1.z.string(),
    "jsonValue": exports.JsonNodeSchema
});
exports.AdminSettingsIdSchemaSchema = zod_1.z.object({
    "id": zod_1.z.string()
});
exports.AffectedTenantAdministratorsFilterSchemaSchema = zod_1.z.object({});
exports.AffectedUserFilterSchemaSchema = zod_1.z.object({});
exports.AlarmSchemaSchema = zod_1.z.object({
    "id": exports.AlarmIdSchema,
    "createdTime": zod_1.z.number(),
    "tenantId": exports.TenantIdSchema,
    "customerId": exports.CustomerIdSchema,
    "name": zod_1.z.string(),
    "type": zod_1.z.string(),
    "originator": exports.EntityIdSchema,
    "severity": zod_1.z.enum(["CRITICAL", "INDETERMINATE", "MAJOR", "MINOR", "WARNING"]),
    "acknowledged": zod_1.z.boolean(),
    "cleared": zod_1.z.boolean(),
    "assigneeId": exports.UserIdSchema,
    "startTs": zod_1.z.number(),
    "endTs": zod_1.z.number(),
    "ackTs": zod_1.z.number(),
    "clearTs": zod_1.z.number(),
    "assignTs": zod_1.z.number(),
    "details": exports.JsonNodeSchema,
    "propagateToOwnerHierarchy": zod_1.z.boolean(),
    "propagate": zod_1.z.boolean(),
    "propagateToTenant": zod_1.z.boolean(),
    "propagateRelationTypes": zod_1.z.array(zod_1.z.string()),
    "propagateToOwner": zod_1.z.boolean(),
    "status": zod_1.z.enum(["ACTIVE_ACK", "ACTIVE_UNACK", "CLEARED_ACK", "CLEARED_UNACK"])
});
exports.AlarmAssigneeSchemaSchema = zod_1.z.object({
    "email": zod_1.z.string(),
    "firstName": zod_1.z.string(),
    "id": exports.UserIdSchema,
    "lastName": zod_1.z.string()
});
exports.AlarmAssignmentNotificationRuleTriggerConfigSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.AlarmCommentSchemaSchema = zod_1.z.object({
    "id": exports.AlarmCommentIdSchema,
    "createdTime": zod_1.z.number(),
    "alarmId": exports.EntityIdSchema,
    "userId": exports.UserIdSchema,
    "name": zod_1.z.string(),
    "type": zod_1.z.enum(["OTHER", "SYSTEM"]),
    "comment": exports.JsonNodeSchema
});
exports.AlarmCommentIdSchemaSchema = zod_1.z.object({
    "id": zod_1.z.string()
});
exports.AlarmCommentInfoSchemaSchema = zod_1.z.object({
    "id": exports.AlarmCommentIdSchema,
    "createdTime": zod_1.z.number(),
    "alarmId": exports.EntityIdSchema,
    "userId": exports.UserIdSchema,
    "name": zod_1.z.string(),
    "type": zod_1.z.enum(["OTHER", "SYSTEM"]),
    "comment": exports.JsonNodeSchema,
    "email": zod_1.z.string(),
    "firstName": zod_1.z.string(),
    "lastName": zod_1.z.string()
});
exports.AlarmCommentNotificationRuleTriggerConfigSchemaSchema = zod_1.z.object({
    "alarmSeverities": zod_1.z.array(zod_1.z.enum(["CRITICAL", "INDETERMINATE", "MAJOR", "MINOR", "WARNING"])),
    "alarmStatuses": zod_1.z.array(zod_1.z.enum(["ACK", "ACTIVE", "ANY", "CLEARED", "UNACK"])),
    "alarmTypes": zod_1.z.array(zod_1.z.string()),
    "notifyOnCommentUpdate": zod_1.z.boolean(),
    "onlyUserComments": zod_1.z.boolean(),
    "triggerType": zod_1.z.enum(["ALARM", "ALARM_ASSIGNMENT", "ALARM_COMMENT", "API_USAGE_LIMIT", "DEVICE_ACTIVITY", "ENTITIES_LIMIT", "ENTITY_ACTION", "INTEGRATION_LIFECYCLE_EVENT", "NEW_PLATFORM_VERSION", "RATE_LIMITS", "RULE_ENGINE_COMPONENT_LIFECYCLE_EVENT"])
});
exports.AlarmConditionSchemaSchema = zod_1.z.object({
    "condition": zod_1.z.array(exports.AlarmConditionFilterSchema),
    "spec": exports.AlarmConditionSpecSchema
});
exports.AlarmConditionFilterSchemaSchema = zod_1.z.object({
    "key": exports.AlarmConditionFilterKeySchema,
    "valueType": zod_1.z.enum(["BOOLEAN", "DATE_TIME", "NUMERIC", "STRING"]),
    "value": zod_1.z.object({}),
    "predicate": exports.KeyFilterPredicateSchema
});
exports.AlarmConditionFilterKeySchemaSchema = zod_1.z.object({
    "type": zod_1.z.enum(["ATTRIBUTE", "CONSTANT", "ENTITY_FIELD", "TIME_SERIES"]),
    "key": zod_1.z.string()
});
exports.AlarmConditionSpecSchemaSchema = zod_1.z.object({});
exports.AlarmCountQuerySchemaSchema = zod_1.z.object({
    "assigneeId": exports.UserIdSchema,
    "endTs": zod_1.z.number(),
    "entityFilter": exports.EntityFilterSchema,
    "keyFilters": zod_1.z.array(exports.KeyFilterSchema),
    "searchPropagatedAlarms": zod_1.z.boolean(),
    "severityList": zod_1.z.array(zod_1.z.enum(["CRITICAL", "INDETERMINATE", "MAJOR", "MINOR", "WARNING"])),
    "startTs": zod_1.z.number(),
    "statusList": zod_1.z.array(zod_1.z.enum(["ACK", "ACTIVE", "ANY", "CLEARED", "UNACK"])),
    "timeWindow": zod_1.z.number(),
    "typeList": zod_1.z.array(zod_1.z.string())
});
exports.AlarmDataSchemaSchema = zod_1.z.object({
    "entityId": exports.EntityIdSchema,
    "latest": zod_1.z.record(zod_1.z.string(), zod_1.z.object({})),
    "id": exports.AlarmIdSchema,
    "createdTime": zod_1.z.number(),
    "tenantId": exports.TenantIdSchema,
    "customerId": exports.CustomerIdSchema,
    "name": zod_1.z.string(),
    "type": zod_1.z.string(),
    "originator": exports.EntityIdSchema,
    "severity": zod_1.z.enum(["CRITICAL", "INDETERMINATE", "MAJOR", "MINOR", "WARNING"]),
    "acknowledged": zod_1.z.boolean(),
    "cleared": zod_1.z.boolean(),
    "assigneeId": exports.UserIdSchema,
    "startTs": zod_1.z.number(),
    "endTs": zod_1.z.number(),
    "ackTs": zod_1.z.number(),
    "clearTs": zod_1.z.number(),
    "assignTs": zod_1.z.number(),
    "details": exports.JsonNodeSchema,
    "propagateToOwnerHierarchy": zod_1.z.boolean(),
    "propagate": zod_1.z.boolean(),
    "propagateToTenant": zod_1.z.boolean(),
    "propagateRelationTypes": zod_1.z.array(zod_1.z.string()),
    "propagateToOwner": zod_1.z.boolean(),
    "originatorName": zod_1.z.string(),
    "originatorLabel": zod_1.z.string(),
    "assignee": exports.AlarmAssigneeSchema,
    "status": zod_1.z.enum(["ACTIVE_ACK", "ACTIVE_UNACK", "CLEARED_ACK", "CLEARED_UNACK"])
});
exports.AlarmDataPageLinkSchemaSchema = zod_1.z.object({
    "assigneeId": exports.UserIdSchema,
    "dynamic": zod_1.z.boolean(),
    "endTs": zod_1.z.number(),
    "page": zod_1.z.number(),
    "pageSize": zod_1.z.number(),
    "searchPropagatedAlarms": zod_1.z.boolean(),
    "severityList": zod_1.z.array(zod_1.z.enum(["CRITICAL", "INDETERMINATE", "MAJOR", "MINOR", "WARNING"])),
    "sortOrder": exports.EntityDataSortOrderSchema,
    "startTs": zod_1.z.number(),
    "statusList": zod_1.z.array(zod_1.z.enum(["ACK", "ACTIVE", "ANY", "CLEARED", "UNACK"])),
    "textSearch": zod_1.z.string(),
    "timeWindow": zod_1.z.number(),
    "typeList": zod_1.z.array(zod_1.z.string())
});
exports.AlarmDataQuerySchemaSchema = zod_1.z.object({
    "alarmFields": zod_1.z.array(exports.EntityKeySchema),
    "entityFields": zod_1.z.array(exports.EntityKeySchema),
    "entityFilter": exports.EntityFilterSchema,
    "keyFilters": zod_1.z.array(exports.KeyFilterSchema),
    "latestValues": zod_1.z.array(exports.EntityKeySchema),
    "pageLink": exports.AlarmDataPageLinkSchema
});
exports.AlarmIdSchemaSchema = zod_1.z.object({
    "id": zod_1.z.string(),
    "entityType": zod_1.z.enum(["ALARM"])
});
exports.AlarmInfoSchemaSchema = zod_1.z.object({
    "id": exports.AlarmIdSchema,
    "createdTime": zod_1.z.number(),
    "tenantId": exports.TenantIdSchema,
    "customerId": exports.CustomerIdSchema,
    "name": zod_1.z.string(),
    "type": zod_1.z.string(),
    "originator": exports.EntityIdSchema,
    "severity": zod_1.z.enum(["CRITICAL", "INDETERMINATE", "MAJOR", "MINOR", "WARNING"]),
    "acknowledged": zod_1.z.boolean(),
    "cleared": zod_1.z.boolean(),
    "assigneeId": exports.UserIdSchema,
    "startTs": zod_1.z.number(),
    "endTs": zod_1.z.number(),
    "ackTs": zod_1.z.number(),
    "clearTs": zod_1.z.number(),
    "assignTs": zod_1.z.number(),
    "details": exports.JsonNodeSchema,
    "propagateToOwnerHierarchy": zod_1.z.boolean(),
    "propagate": zod_1.z.boolean(),
    "propagateToTenant": zod_1.z.boolean(),
    "propagateRelationTypes": zod_1.z.array(zod_1.z.string()),
    "propagateToOwner": zod_1.z.boolean(),
    "originatorName": zod_1.z.string(),
    "originatorLabel": zod_1.z.string(),
    "assignee": exports.AlarmAssigneeSchema,
    "status": zod_1.z.enum(["ACTIVE_ACK", "ACTIVE_UNACK", "CLEARED_ACK", "CLEARED_UNACK"])
});
exports.AlarmNotificationRuleTriggerConfigSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.AlarmRuleSchemaSchema = zod_1.z.object({
    "condition": exports.AlarmConditionSchema,
    "schedule": exports.AlarmScheduleSchema,
    "alarmDetails": zod_1.z.string(),
    "dashboardId": exports.DashboardIdSchema
});
exports.AlarmScheduleSchemaSchema = zod_1.z.object({
    "dynamicValue": exports.DynamicValue_Of_stringSchema,
    "type": zod_1.z.enum(["ANY_TIME", "CUSTOM", "SPECIFIC_TIME"])
});
exports.AllUsersFilterSchemaSchema = zod_1.z.object({});
exports.AllowCreateNewDevicesDeviceProfileProvisionConfigurationSchemaSchema = zod_1.z.object({
    "provisionDeviceSecret": zod_1.z.string()
});
exports.AllowedPermissionsInfoSchemaSchema = zod_1.z.object({
    "userOwnerId": exports.EntityIdSchema,
    "userPermissions": exports.MergedUserPermissionsSchema,
    "allowedResources": zod_1.z.array(zod_1.z.enum(["ADMIN_SETTINGS", "ALARM", "ALL", "API_USAGE_STATE", "ASSET", "ASSET_GROUP", "ASSET_PROFILE", "AUDIT_LOG", "BLOB_ENTITY", "CONVERTER", "CUSTOMER", "CUSTOMER_GROUP", "DASHBOARD", "DASHBOARD_GROUP", "DEVICE", "DEVICE_GROUP", "DEVICE_PROFILE", "EDGE", "EDGE_GROUP", "ENTITY_VIEW", "ENTITY_VIEW_GROUP", "GROUP_PERMISSION", "INTEGRATION", "NOTIFICATION", "OAUTH2_CONFIGURATION_INFO", "OAUTH2_CONFIGURATION_TEMPLATE", "OTA_PACKAGE", "PROFILE", "QUEUE", "ROLE", "RULE_CHAIN", "SCHEDULER_EVENT", "TB_RESOURCE", "TENANT", "TENANT_PROFILE", "USER", "USER_GROUP", "VERSION_CONTROL", "WHITE_LABELING", "WIDGETS_BUNDLE", "WIDGET_TYPE"])),
    "operationsByResource": zod_1.z.record(zod_1.z.string(), zod_1.z.array(zod_1.z.string())),
    "allowedForGroupRoleOperations": zod_1.z.array(zod_1.z.enum(["ADD_TO_GROUP", "ALL", "ASSIGN_TO_TENANT", "CHANGE_OWNER", "CLAIM_DEVICES", "CREATE", "DELETE", "IMPERSONATE", "READ", "READ_ATTRIBUTES", "READ_CREDENTIALS", "READ_TELEMETRY", "REMOVE_FROM_GROUP", "RPC_CALL", "SHARE_GROUP", "WRITE", "WRITE_ATTRIBUTES", "WRITE_CREDENTIALS", "WRITE_TELEMETRY"])),
    "allowedForGroupOwnerOnlyOperations": zod_1.z.array(zod_1.z.enum(["ADD_TO_GROUP", "ALL", "ASSIGN_TO_TENANT", "CHANGE_OWNER", "CLAIM_DEVICES", "CREATE", "DELETE", "IMPERSONATE", "READ", "READ_ATTRIBUTES", "READ_CREDENTIALS", "READ_TELEMETRY", "REMOVE_FROM_GROUP", "RPC_CALL", "SHARE_GROUP", "WRITE", "WRITE_ATTRIBUTES", "WRITE_CREDENTIALS", "WRITE_TELEMETRY"])),
    "allowedForGroupOwnerOnlyGroupOperations": zod_1.z.array(zod_1.z.enum(["ADD_TO_GROUP", "ALL", "ASSIGN_TO_TENANT", "CHANGE_OWNER", "CLAIM_DEVICES", "CREATE", "DELETE", "IMPERSONATE", "READ", "READ_ATTRIBUTES", "READ_CREDENTIALS", "READ_TELEMETRY", "REMOVE_FROM_GROUP", "RPC_CALL", "SHARE_GROUP", "WRITE", "WRITE_ATTRIBUTES", "WRITE_CREDENTIALS", "WRITE_TELEMETRY"]))
});
exports.AnyTimeScheduleSchemaSchema = zod_1.z.object({
    "dynamicValue": exports.DynamicValue_Of_stringSchema,
    "type": zod_1.z.enum(["ANY_TIME", "CUSTOM", "SPECIFIC_TIME"])
});
exports.ApiUsageLimitNotificationRuleTriggerConfigSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.ApiUsageStateFilterSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.ArrayNodeSchemaSchema = zod_1.z.object({});
exports.AssetSchemaSchema = zod_1.z.object({
    "id": exports.AssetIdSchema,
    "createdTime": zod_1.z.number(),
    "tenantId": exports.TenantIdSchema,
    "customerId": exports.CustomerIdSchema,
    "name": zod_1.z.string(),
    "type": zod_1.z.string(),
    "label": zod_1.z.string(),
    "assetProfileId": exports.AssetProfileIdSchema,
    "additionalInfo": exports.JsonNodeSchema,
    "ownerId": exports.EntityIdSchema
});
exports.AssetIdSchemaSchema = zod_1.z.object({
    "id": zod_1.z.string(),
    "entityType": zod_1.z.enum(["ASSET"])
});
exports.AssetInfoSchemaSchema = zod_1.z.object({
    "id": exports.AssetIdSchema,
    "createdTime": zod_1.z.number(),
    "tenantId": exports.TenantIdSchema,
    "customerId": exports.CustomerIdSchema,
    "name": zod_1.z.string(),
    "type": zod_1.z.string(),
    "label": zod_1.z.string(),
    "assetProfileId": exports.AssetProfileIdSchema,
    "additionalInfo": exports.JsonNodeSchema,
    "ownerId": exports.EntityIdSchema,
    "ownerName": zod_1.z.string(),
    "groups": zod_1.z.array(exports.EntityInfoSchema)
});
exports.AssetProfileSchemaSchema = zod_1.z.object({
    "id": exports.AssetProfileIdSchema,
    "createdTime": zod_1.z.number(),
    "tenantId": exports.TenantIdSchema,
    "name": zod_1.z.string(),
    "default": zod_1.z.boolean(),
    "defaultDashboardId": exports.DashboardIdSchema,
    "defaultRuleChainId": exports.RuleChainIdSchema,
    "defaultQueueName": zod_1.z.string(),
    "description": zod_1.z.string(),
    "image": zod_1.z.string(),
    "defaultEdgeRuleChainId": exports.RuleChainIdSchema
});
exports.AssetProfileIdSchemaSchema = zod_1.z.object({
    "id": zod_1.z.string(),
    "entityType": zod_1.z.enum(["ASSET_PROFILE"])
});
exports.AssetProfileInfoSchemaSchema = zod_1.z.object({
    "id": exports.EntityIdSchema,
    "name": zod_1.z.string(),
    "image": zod_1.z.string(),
    "defaultDashboardId": exports.DashboardIdSchema,
    "tenantId": exports.TenantIdSchema
});
exports.AssetSearchQuerySchemaSchema = zod_1.z.object({
    "relationType": zod_1.z.string(),
    "assetTypes": zod_1.z.array(zod_1.z.string()),
    "parameters": exports.RelationsSearchParametersSchema
});
exports.AssetSearchQueryFilterSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.AssetTypeFilterSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.AtomicIntegerSchemaSchema = zod_1.z.object({
    "acquire": zod_1.z.number(),
    "andDecrement": zod_1.z.number(),
    "andIncrement": zod_1.z.number(),
    "opaque": zod_1.z.number(),
    "plain": zod_1.z.number()
});
exports.AttributeExportDataSchemaSchema = zod_1.z.object({
    "booleanValue": zod_1.z.boolean(),
    "doubleValue": zod_1.z.number(),
    "jsonValue": zod_1.z.string(),
    "key": zod_1.z.string(),
    "lastUpdateTs": zod_1.z.number(),
    "longValue": zod_1.z.number(),
    "strValue": zod_1.z.string()
});
exports.AttributesEntityViewSchemaSchema = zod_1.z.object({
    "cs": zod_1.z.array(zod_1.z.string()),
    "sh": zod_1.z.array(zod_1.z.string()),
    "ss": zod_1.z.array(zod_1.z.string())
});
exports.AuditLogSchemaSchema = zod_1.z.object({
    "id": exports.AuditLogIdSchema,
    "createdTime": zod_1.z.number(),
    "tenantId": exports.TenantIdSchema,
    "customerId": exports.CustomerIdSchema,
    "entityId": exports.EntityIdSchema,
    "entityName": zod_1.z.string(),
    "userId": exports.UserIdSchema,
    "userName": zod_1.z.string(),
    "actionType": zod_1.z.enum(["ACTIVATED", "ADDED", "ADDED_COMMENT", "ADDED_TO_ENTITY_GROUP", "ALARM_ACK", "ALARM_ASSIGNED", "ALARM_CLEAR", "ALARM_DELETE", "ALARM_UNASSIGNED", "ASSIGNED_FROM_TENANT", "ASSIGNED_TO_CUSTOMER", "ASSIGNED_TO_EDGE", "ASSIGNED_TO_TENANT", "ATTRIBUTES_DELETED", "ATTRIBUTES_READ", "ATTRIBUTES_UPDATED", "CHANGE_OWNER", "CREDENTIALS_READ", "CREDENTIALS_UPDATED", "DELETED", "DELETED_COMMENT", "LOCKOUT", "LOGIN", "LOGOUT", "MADE_PRIVATE", "MADE_PUBLIC", "PROVISION_FAILURE", "PROVISION_SUCCESS", "RELATIONS_DELETED", "RELATION_ADD_OR_UPDATE", "RELATION_DELETED", "REMOVED_FROM_ENTITY_GROUP", "REST_API_RULE_ENGINE_CALL", "RPC_CALL", "SMS_SENT", "SUSPENDED", "TIMESERIES_DELETED", "TIMESERIES_UPDATED", "UNASSIGNED_FROM_CUSTOMER", "UNASSIGNED_FROM_EDGE", "UPDATED", "UPDATED_COMMENT"]),
    "actionData": exports.JsonNodeSchema,
    "actionStatus": zod_1.z.enum(["FAILURE", "SUCCESS"]),
    "actionFailureDetails": zod_1.z.string()
});
exports.AuditLogIdSchemaSchema = zod_1.z.object({
    "id": zod_1.z.string()
});
exports.AutoVersionCreateConfigSchemaSchema = zod_1.z.object({
    "branch": zod_1.z.string(),
    "saveAttributes": zod_1.z.boolean(),
    "saveCredentials": zod_1.z.boolean(),
    "saveGroupEntities": zod_1.z.boolean(),
    "savePermissions": zod_1.z.boolean(),
    "saveRelations": zod_1.z.boolean()
});
exports.AwsSnsSmsProviderConfigurationSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.BackupCodeTwoFaAccountConfigSchemaSchema = zod_1.z.object({
    "codes": zod_1.z.array(zod_1.z.string()),
    "codesLeft": zod_1.z.number(),
    "useByDefault": zod_1.z.boolean()
});
exports.BackupCodeTwoFaProviderConfigSchemaSchema = zod_1.z.object({
    "codesQuantity": zod_1.z.number()
});
exports.BlobEntityIdSchemaSchema = zod_1.z.object({
    "id": zod_1.z.string(),
    "entityType": zod_1.z.enum(["BLOB_ENTITY"])
});
exports.BlobEntityInfoSchemaSchema = zod_1.z.object({
    "id": exports.BlobEntityIdSchema,
    "createdTime": zod_1.z.number(),
    "tenantId": exports.TenantIdSchema,
    "customerId": exports.CustomerIdSchema,
    "ownerId": exports.EntityIdSchema,
    "name": zod_1.z.string(),
    "type": zod_1.z.string(),
    "contentType": zod_1.z.enum(["application/pdf", "image/jpeg", "image/png"]),
    "additionalInfo": exports.JsonNodeSchema
});
exports.BlobEntityWithCustomerInfoSchemaSchema = zod_1.z.object({
    "id": exports.BlobEntityIdSchema,
    "createdTime": zod_1.z.number(),
    "tenantId": exports.TenantIdSchema,
    "customerId": exports.CustomerIdSchema,
    "ownerId": exports.EntityIdSchema,
    "name": zod_1.z.string(),
    "type": zod_1.z.string(),
    "contentType": zod_1.z.enum(["application/pdf", "image/jpeg", "image/png"]),
    "additionalInfo": exports.JsonNodeSchema,
    "customerTitle": zod_1.z.string(),
    "customerIsPublic": zod_1.z.object({})
});
exports.BooleanFilterPredicateSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.BranchInfoSchemaSchema = zod_1.z.object({
    "default": zod_1.z.boolean(),
    "name": zod_1.z.string()
});
exports.BulkImportRequestSchemaSchema = zod_1.z.object({
    "customerId": exports.CustomerIdSchema,
    "entityGroupId": zod_1.z.string(),
    "file": zod_1.z.string(),
    "mapping": exports.MappingSchema
});
exports.BulkImportResult_Of_AssetSchemaSchema = zod_1.z.object({
    "created": exports.AtomicIntegerSchema,
    "errors": exports.AtomicIntegerSchema,
    "errorsList": zod_1.z.array(zod_1.z.string()),
    "updated": exports.AtomicIntegerSchema
});
exports.BulkImportResult_Of_DeviceSchemaSchema = zod_1.z.object({
    "created": exports.AtomicIntegerSchema,
    "errors": exports.AtomicIntegerSchema,
    "errorsList": zod_1.z.array(zod_1.z.string()),
    "updated": exports.AtomicIntegerSchema
});
exports.BulkImportResult_Of_EdgeSchemaSchema = zod_1.z.object({
    "created": exports.AtomicIntegerSchema,
    "errors": exports.AtomicIntegerSchema,
    "errorsList": zod_1.z.array(zod_1.z.string()),
    "updated": exports.AtomicIntegerSchema
});
exports.ButtonSchemaSchema = zod_1.z.object({
    "dashboardId": zod_1.z.string(),
    "dashboardState": zod_1.z.string(),
    "enabled": zod_1.z.boolean(),
    "link": zod_1.z.string(),
    "linkType": zod_1.z.enum(["DASHBOARD", "LINK"]),
    "setEntityIdInState": zod_1.z.boolean(),
    "text": zod_1.z.string()
});
exports.ByteArrayResourceSchemaSchema = zod_1.z.object({
    "byteArray": zod_1.z.string(),
    "description": zod_1.z.string(),
    "file": zod_1.z.string(),
    "filename": zod_1.z.string(),
    "inputStream": exports.InputStreamSchema,
    "open": zod_1.z.boolean(),
    "readable": zod_1.z.boolean(),
    "uri": zod_1.z.string(),
    "url": zod_1.z.string()
});
exports.ByteBufferSchemaSchema = zod_1.z.object({
    "char": zod_1.z.string(),
    "direct": zod_1.z.boolean(),
    "double": zod_1.z.number(),
    "float": zod_1.z.number(),
    "int": zod_1.z.number(),
    "long": zod_1.z.number(),
    "readOnly": zod_1.z.boolean(),
    "short": zod_1.z.number()
});
exports.ChangePasswordRequestSchemaSchema = zod_1.z.object({
    "currentPassword": zod_1.z.string(),
    "newPassword": zod_1.z.string()
});
exports.CheckPreProvisionedDevicesDeviceProfileProvisionConfigurationSchemaSchema = zod_1.z.object({
    "provisionDeviceSecret": zod_1.z.string()
});
exports.ClaimRequestSchemaSchema = zod_1.z.object({
    "secretKey": zod_1.z.string()
});
exports.ClearRuleSchemaSchema = zod_1.z.object({
    "alarmStatuses": zod_1.z.array(zod_1.z.enum(["ACK", "ACTIVE", "ANY", "CLEARED", "UNACK"]))
});
exports.ClientAttributesQueryingSnmpCommunicationConfigSchemaSchema = zod_1.z.object({
    "mappings": zod_1.z.array(exports.SnmpMappingSchema),
    "queryingFrequencyMs": zod_1.z.number(),
    "spec": zod_1.z.enum(["CLIENT_ATTRIBUTES_QUERYING", "SHARED_ATTRIBUTES_SETTING", "TELEMETRY_QUERYING", "TO_DEVICE_RPC_REQUEST", "TO_SERVER_RPC_REQUEST"])
});
exports.CoapDeviceProfileTransportConfigurationSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.CoapDeviceTransportConfigurationSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.CoapDeviceTypeConfigurationSchemaSchema = zod_1.z.object({});
exports.ColumnMappingSchemaSchema = zod_1.z.object({
    "key": zod_1.z.string(),
    "type": zod_1.z.enum(["ACCESS_TOKEN", "CLOUD_ENDPOINT", "DESCRIPTION", "EDGE_LICENSE_KEY", "IS_GATEWAY", "LABEL", "LWM2M_BOOTSTRAP_SERVER_PUBLIC_KEY_OR_ID", "LWM2M_BOOTSTRAP_SERVER_SECRET_KEY", "LWM2M_BOOTSTRAP_SERVER_SECURITY_MODE", "LWM2M_CLIENT_CERT", "LWM2M_CLIENT_ENDPOINT", "LWM2M_CLIENT_IDENTITY", "LWM2M_CLIENT_KEY", "LWM2M_CLIENT_SECURITY_CONFIG_MODE", "LWM2M_SERVER_CLIENT_PUBLIC_KEY_OR_ID", "LWM2M_SERVER_CLIENT_SECRET_KEY", "LWM2M_SERVER_SECURITY_MODE", "MQTT_CLIENT_ID", "MQTT_PASSWORD", "MQTT_USER_NAME", "NAME", "ROUTING_KEY", "SECRET", "SERVER_ATTRIBUTE", "SHARED_ATTRIBUTE", "SNMP_COMMUNITY_STRING", "SNMP_HOST", "SNMP_PORT", "SNMP_VERSION", "TIMESERIES", "TYPE", "X509"])
});
exports.ComparisonTsValueSchemaSchema = zod_1.z.object({
    "current": exports.TsValueSchema,
    "previous": exports.TsValueSchema
});
exports.ComplexFilterPredicateSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.ComplexVersionCreateRequestSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.ComponentDescriptorSchemaSchema = zod_1.z.object({
    "id": exports.ComponentDescriptorIdSchema,
    "createdTime": zod_1.z.number(),
    "type": zod_1.z.enum(["ACTION", "ANALYTICS", "ENRICHMENT", "EXTERNAL", "FILTER", "FLOW", "TRANSFORMATION"]),
    "scope": zod_1.z.enum(["TENANT"]),
    "clusteringMode": zod_1.z.enum(["ENABLED", "SINGLETON", "USER_PREFERENCE"]),
    "name": zod_1.z.string(),
    "clazz": zod_1.z.string(),
    "configurationDescriptor": exports.JsonNodeSchema,
    "configurationVersion": zod_1.z.number(),
    "actions": zod_1.z.string()
});
exports.ComponentDescriptorIdSchemaSchema = zod_1.z.object({
    "id": zod_1.z.string()
});
exports.ContactBased_Of_objectSchemaSchema = zod_1.z.object({
    "additionalInfo": exports.JsonNodeSchema,
    "address": zod_1.z.string(),
    "address2": zod_1.z.string(),
    "city": zod_1.z.string(),
    "country": zod_1.z.string(),
    "createdTime": zod_1.z.number(),
    "email": zod_1.z.string(),
    "id": zod_1.z.object({}),
    "name": zod_1.z.string(),
    "phone": zod_1.z.string(),
    "state": zod_1.z.string(),
    "zip": zod_1.z.string()
});
exports.ConverterSchemaSchema = zod_1.z.object({
    "id": exports.ConverterIdSchema,
    "createdTime": zod_1.z.number(),
    "tenantId": exports.TenantIdSchema,
    "name": zod_1.z.string(),
    "type": zod_1.z.enum(["DOWNLINK", "UPLINK"]),
    "debugMode": zod_1.z.boolean(),
    "configuration": exports.JsonNodeSchema,
    "additionalInfo": exports.JsonNodeSchema,
    "edgeTemplate": zod_1.z.boolean()
});
exports.ConverterIdSchemaSchema = zod_1.z.object({
    "id": zod_1.z.string(),
    "entityType": zod_1.z.enum(["CONVERTER"])
});
exports.CustomMenuSchemaSchema = zod_1.z.object({
    "disabledMenuItems": zod_1.z.array(zod_1.z.string()),
    "menuItems": zod_1.z.array(exports.CustomMenuItemSchema)
});
exports.CustomMenuItemSchemaSchema = zod_1.z.object({
    "name": zod_1.z.string(),
    "iconUrl": zod_1.z.string(),
    "materialIcon": zod_1.z.string(),
    "iframeUrl": zod_1.z.string(),
    "dashboardId": zod_1.z.string(),
    "hideDashboardToolbar": zod_1.z.boolean(),
    "setAccessToken": zod_1.z.boolean(),
    "childMenuItems": zod_1.z.array(exports.CustomMenuItemSchema)
});
exports.CustomTimeScheduleSchemaSchema = zod_1.z.object({
    "dynamicValue": exports.DynamicValue_Of_stringSchema,
    "items": zod_1.z.array(exports.CustomTimeScheduleItemSchema),
    "timezone": zod_1.z.string(),
    "type": zod_1.z.enum(["ANY_TIME", "CUSTOM", "SPECIFIC_TIME"])
});
exports.CustomTimeScheduleItemSchemaSchema = zod_1.z.object({
    "dayOfWeek": zod_1.z.number(),
    "enabled": zod_1.z.boolean(),
    "endsOn": zod_1.z.number(),
    "startsOn": zod_1.z.number()
});
exports.CustomTranslationSchemaSchema = zod_1.z.object({
    "translationMap": zod_1.z.record(zod_1.z.string(), zod_1.z.string())
});
exports.CustomerSchemaSchema = zod_1.z.object({
    "id": exports.CustomerIdSchema,
    "createdTime": zod_1.z.number(),
    "title": zod_1.z.string(),
    "name": zod_1.z.string(),
    "tenantId": exports.TenantIdSchema,
    "parentCustomerId": exports.CustomerIdSchema,
    "customerId": exports.CustomerIdSchema,
    "ownerId": exports.EntityIdSchema,
    "country": zod_1.z.string(),
    "state": zod_1.z.string(),
    "city": zod_1.z.string(),
    "address": zod_1.z.string(),
    "address2": zod_1.z.string(),
    "zip": zod_1.z.string(),
    "phone": zod_1.z.string(),
    "email": zod_1.z.string(),
    "additionalInfo": exports.JsonNodeSchema
});
exports.CustomerIdSchemaSchema = zod_1.z.object({
    "id": zod_1.z.string(),
    "entityType": zod_1.z.enum(["CUSTOMER"])
});
exports.CustomerInfoSchemaSchema = zod_1.z.object({
    "id": exports.CustomerIdSchema,
    "createdTime": zod_1.z.number(),
    "title": zod_1.z.string(),
    "name": zod_1.z.string(),
    "tenantId": exports.TenantIdSchema,
    "parentCustomerId": exports.CustomerIdSchema,
    "customerId": exports.CustomerIdSchema,
    "ownerId": exports.EntityIdSchema,
    "country": zod_1.z.string(),
    "state": zod_1.z.string(),
    "city": zod_1.z.string(),
    "address": zod_1.z.string(),
    "address2": zod_1.z.string(),
    "zip": zod_1.z.string(),
    "phone": zod_1.z.string(),
    "email": zod_1.z.string(),
    "additionalInfo": exports.JsonNodeSchema,
    "ownerName": zod_1.z.string(),
    "groups": zod_1.z.array(exports.EntityInfoSchema)
});
exports.CustomerUsersFilterSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.DashboardSchemaSchema = zod_1.z.object({
    "id": exports.DashboardIdSchema,
    "createdTime": zod_1.z.number(),
    "tenantId": exports.TenantIdSchema,
    "customerId": exports.CustomerIdSchema,
    "ownerId": exports.EntityIdSchema,
    "title": zod_1.z.string(),
    "image": zod_1.z.string(),
    "assignedCustomers": zod_1.z.array(exports.ShortCustomerInfoSchema),
    "mobileHide": zod_1.z.boolean(),
    "mobileOrder": zod_1.z.number(),
    "name": zod_1.z.string(),
    "configuration": exports.JsonNodeSchema
});
exports.DashboardIdSchemaSchema = zod_1.z.object({
    "id": zod_1.z.string(),
    "entityType": zod_1.z.enum(["DASHBOARD"])
});
exports.DashboardInfoSchemaSchema = zod_1.z.object({
    "id": exports.DashboardIdSchema,
    "createdTime": zod_1.z.number(),
    "tenantId": exports.TenantIdSchema,
    "customerId": exports.CustomerIdSchema,
    "ownerId": exports.EntityIdSchema,
    "title": zod_1.z.string(),
    "image": zod_1.z.string(),
    "assignedCustomers": zod_1.z.array(exports.ShortCustomerInfoSchema),
    "mobileHide": zod_1.z.boolean(),
    "mobileOrder": zod_1.z.number(),
    "name": zod_1.z.string(),
    "configuration": exports.JsonNodeSchema,
    "ownerName": zod_1.z.string(),
    "groups": zod_1.z.array(exports.EntityInfoSchema)
});
exports.DebugConverterEventFilterSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.DebugIntegrationEventFilterSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.DefaultCoapDeviceTypeConfigurationSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.DefaultDeviceConfigurationSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.DefaultDeviceProfileConfigurationSchemaSchema = zod_1.z.object({});
exports.DefaultDeviceProfileTransportConfigurationSchemaSchema = zod_1.z.object({});
exports.DefaultDeviceTransportConfigurationSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.DefaultRuleChainCreateRequestSchemaSchema = zod_1.z.object({
    "name": zod_1.z.string()
});
exports.DefaultTenantProfileConfigurationSchemaSchema = zod_1.z.object({
    "alarmsTtlDays": zod_1.z.number(),
    "cassandraQueryTenantRateLimitsConfiguration": zod_1.z.string(),
    "customerServerRestLimitsConfiguration": zod_1.z.string(),
    "defaultStorageTtlDays": zod_1.z.number(),
    "integrationMsgsPerDeviceRateLimit": zod_1.z.string(),
    "integrationMsgsPerTenantRateLimit": zod_1.z.string(),
    "maxAssets": zod_1.z.number(),
    "maxConverters": zod_1.z.number(),
    "maxCreatedAlarms": zod_1.z.number(),
    "maxCustomers": zod_1.z.number(),
    "maxDPStorageDays": zod_1.z.number(),
    "maxDashboards": zod_1.z.number(),
    "maxDevices": zod_1.z.number(),
    "maxEmails": zod_1.z.number(),
    "maxIntegrations": zod_1.z.number(),
    "maxJSExecutions": zod_1.z.number(),
    "maxOtaPackagesInBytes": zod_1.z.number(),
    "maxREExecutions": zod_1.z.number(),
    "maxResourceSize": zod_1.z.number(),
    "maxResourcesInBytes": zod_1.z.number(),
    "maxRuleChains": zod_1.z.number(),
    "maxRuleNodeExecutionsPerMessage": zod_1.z.number(),
    "maxSchedulerEvents": zod_1.z.number(),
    "maxSms": zod_1.z.number(),
    "maxTbelExecutions": zod_1.z.number(),
    "maxTransportDataPoints": zod_1.z.number(),
    "maxTransportMessages": zod_1.z.number(),
    "maxUsers": zod_1.z.number(),
    "maxWsSessionsPerCustomer": zod_1.z.number(),
    "maxWsSessionsPerPublicUser": zod_1.z.number(),
    "maxWsSessionsPerRegularUser": zod_1.z.number(),
    "maxWsSessionsPerTenant": zod_1.z.number(),
    "maxWsSubscriptionsPerCustomer": zod_1.z.number(),
    "maxWsSubscriptionsPerPublicUser": zod_1.z.number(),
    "maxWsSubscriptionsPerRegularUser": zod_1.z.number(),
    "maxWsSubscriptionsPerTenant": zod_1.z.number(),
    "queueStatsTtlDays": zod_1.z.number(),
    "rpcTtlDays": zod_1.z.number(),
    "ruleEngineExceptionsTtlDays": zod_1.z.number(),
    "smsEnabled": zod_1.z.boolean(),
    "tenantEntityExportRateLimit": zod_1.z.string(),
    "tenantEntityImportRateLimit": zod_1.z.string(),
    "tenantNotificationRequestsPerRuleRateLimit": zod_1.z.string(),
    "tenantNotificationRequestsRateLimit": zod_1.z.string(),
    "tenantServerRestLimitsConfiguration": zod_1.z.string(),
    "transportDeviceMsgRateLimit": zod_1.z.string(),
    "transportDeviceTelemetryDataPointsRateLimit": zod_1.z.string(),
    "transportDeviceTelemetryMsgRateLimit": zod_1.z.string(),
    "transportTenantMsgRateLimit": zod_1.z.string(),
    "transportTenantTelemetryDataPointsRateLimit": zod_1.z.string(),
    "transportTenantTelemetryMsgRateLimit": zod_1.z.string(),
    "warnThreshold": zod_1.z.number(),
    "wsMsgQueueLimitPerSession": zod_1.z.number(),
    "wsUpdatesPerSessionRateLimit": zod_1.z.string()
});
exports.DeferredResult_Of_EntityDataDiffSchemaSchema = zod_1.z.object({
    "result": zod_1.z.object({}),
    "setOrExpired": zod_1.z.boolean()
});
exports.DeferredResult_Of_EntityDataInfoSchemaSchema = zod_1.z.object({
    "result": zod_1.z.object({}),
    "setOrExpired": zod_1.z.boolean()
});
exports.DeferredResult_Of_List_BranchInfo_SchemaSchema = zod_1.z.object({
    "result": zod_1.z.object({}),
    "setOrExpired": zod_1.z.boolean()
});
exports.DeferredResult_Of_List_VersionedEntityInfo_SchemaSchema = zod_1.z.object({
    "result": zod_1.z.object({}),
    "setOrExpired": zod_1.z.boolean()
});
exports.DeferredResult_Of_PageData_EntityVersion_SchemaSchema = zod_1.z.object({
    "result": zod_1.z.object({}),
    "setOrExpired": zod_1.z.boolean()
});
exports.DeferredResult_Of_RepositorySettingsSchemaSchema = zod_1.z.object({
    "result": zod_1.z.object({}),
    "setOrExpired": zod_1.z.boolean()
});
exports.DeferredResult_Of_ResponseEntitySchemaSchema = zod_1.z.object({
    "result": zod_1.z.object({}),
    "setOrExpired": zod_1.z.boolean()
});
exports.DeferredResult_Of_VoidSchemaSchema = zod_1.z.object({
    "result": zod_1.z.object({}),
    "setOrExpired": zod_1.z.boolean()
});
exports.DeferredResult_Of_uuidSchemaSchema = zod_1.z.object({
    "result": zod_1.z.object({}),
    "setOrExpired": zod_1.z.boolean()
});
exports.DeliveryMethodNotificationTemplateSchemaSchema = zod_1.z.object({
    "body": zod_1.z.string(),
    "enabled": zod_1.z.boolean()
});
exports.DeviceSchemaSchema = zod_1.z.object({
    "id": exports.DeviceIdSchema,
    "createdTime": zod_1.z.number(),
    "tenantId": exports.TenantIdSchema,
    "customerId": exports.CustomerIdSchema,
    "ownerId": exports.EntityIdSchema,
    "name": zod_1.z.string(),
    "type": zod_1.z.string(),
    "label": zod_1.z.string(),
    "deviceProfileId": exports.DeviceProfileIdSchema,
    "deviceData": exports.DeviceDataSchema,
    "firmwareId": exports.OtaPackageIdSchema,
    "softwareId": exports.OtaPackageIdSchema,
    "additionalInfo": exports.JsonNodeSchema
});
exports.DeviceActivityNotificationRuleTriggerConfigSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.DeviceConfigurationSchemaSchema = zod_1.z.object({});
exports.DeviceCredentialsSchemaSchema = zod_1.z.object({
    "id": exports.DeviceCredentialsIdSchema,
    "createdTime": zod_1.z.number(),
    "deviceId": exports.DeviceIdSchema,
    "credentialsType": zod_1.z.enum(["ACCESS_TOKEN", "LWM2M_CREDENTIALS", "MQTT_BASIC", "X509_CERTIFICATE"]),
    "credentialsId": zod_1.z.string(),
    "credentialsValue": zod_1.z.string()
});
exports.DeviceCredentialsIdSchemaSchema = zod_1.z.object({
    "id": zod_1.z.string()
});
exports.DeviceDataSchemaSchema = zod_1.z.object({
    "configuration": exports.DeviceConfigurationSchema,
    "transportConfiguration": exports.DeviceTransportConfigurationSchema
});
exports.DeviceExportDataSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.DeviceGroupOtaPackageSchemaSchema = zod_1.z.object({
    "groupId": exports.EntityGroupIdSchema,
    "id": zod_1.z.string(),
    "otaPackageId": exports.OtaPackageIdSchema,
    "otaPackageType": zod_1.z.enum(["FIRMWARE", "SOFTWARE"]),
    "otaPackageUpdateTime": zod_1.z.number()
});
exports.DeviceIdSchemaSchema = zod_1.z.object({
    "id": zod_1.z.string(),
    "entityType": zod_1.z.enum(["DEVICE"])
});
exports.DeviceInfoSchemaSchema = zod_1.z.object({
    "id": exports.DeviceIdSchema,
    "createdTime": zod_1.z.number(),
    "tenantId": exports.TenantIdSchema,
    "customerId": exports.CustomerIdSchema,
    "ownerId": exports.EntityIdSchema,
    "name": zod_1.z.string(),
    "type": zod_1.z.string(),
    "label": zod_1.z.string(),
    "deviceProfileId": exports.DeviceProfileIdSchema,
    "deviceData": exports.DeviceDataSchema,
    "firmwareId": exports.OtaPackageIdSchema,
    "softwareId": exports.OtaPackageIdSchema,
    "additionalInfo": exports.JsonNodeSchema,
    "ownerName": zod_1.z.string(),
    "groups": zod_1.z.array(exports.EntityInfoSchema),
    "active": zod_1.z.boolean()
});
exports.DeviceProfileSchemaSchema = zod_1.z.object({
    "id": exports.DeviceProfileIdSchema,
    "createdTime": zod_1.z.number(),
    "tenantId": exports.TenantIdSchema,
    "name": zod_1.z.string(),
    "default": zod_1.z.boolean(),
    "defaultDashboardId": exports.DashboardIdSchema,
    "defaultRuleChainId": exports.RuleChainIdSchema,
    "defaultQueueName": zod_1.z.string(),
    "firmwareId": exports.OtaPackageIdSchema,
    "softwareId": exports.OtaPackageIdSchema,
    "description": zod_1.z.string(),
    "image": zod_1.z.string(),
    "provisionDeviceKey": zod_1.z.string(),
    "transportType": zod_1.z.enum(["COAP", "DEFAULT", "LWM2M", "MQTT", "SNMP"]),
    "provisionType": zod_1.z.enum(["ALLOW_CREATE_NEW_DEVICES", "CHECK_PRE_PROVISIONED_DEVICES", "DISABLED", "X509_CERTIFICATE_CHAIN"]),
    "profileData": exports.DeviceProfileDataSchema,
    "type": zod_1.z.enum(["DEFAULT"]),
    "defaultEdgeRuleChainId": exports.RuleChainIdSchema
});
exports.DeviceProfileAlarmSchemaSchema = zod_1.z.object({
    "id": zod_1.z.string(),
    "alarmType": zod_1.z.string(),
    "createRules": zod_1.z.record(zod_1.z.string(), exports.AlarmRuleSchema),
    "clearRule": exports.AlarmRuleSchema,
    "propagate": zod_1.z.boolean(),
    "propagateToOwner": zod_1.z.boolean(),
    "propagateToOwnerHierarchy": zod_1.z.boolean(),
    "propagateToTenant": zod_1.z.boolean(),
    "propagateRelationTypes": zod_1.z.array(zod_1.z.string())
});
exports.DeviceProfileConfigurationSchemaSchema = zod_1.z.object({});
exports.DeviceProfileDataSchemaSchema = zod_1.z.object({
    "configuration": exports.DeviceProfileConfigurationSchema,
    "transportConfiguration": exports.DeviceProfileTransportConfigurationSchema,
    "provisionConfiguration": exports.DeviceProfileProvisionConfigurationSchema,
    "alarms": zod_1.z.array(exports.DeviceProfileAlarmSchema)
});
exports.DeviceProfileIdSchemaSchema = zod_1.z.object({
    "id": zod_1.z.string(),
    "entityType": zod_1.z.enum(["DEVICE_PROFILE"])
});
exports.DeviceProfileInfoSchemaSchema = zod_1.z.object({
    "id": exports.EntityIdSchema,
    "name": zod_1.z.string(),
    "image": zod_1.z.string(),
    "defaultDashboardId": exports.DashboardIdSchema,
    "type": zod_1.z.enum(["DEFAULT"]),
    "transportType": zod_1.z.enum(["COAP", "DEFAULT", "LWM2M", "MQTT", "SNMP"]),
    "tenantId": exports.TenantIdSchema
});
exports.DeviceProfileProvisionConfigurationSchemaSchema = zod_1.z.object({
    "provisionDeviceSecret": zod_1.z.string()
});
exports.DeviceProfileTransportConfigurationSchemaSchema = zod_1.z.object({});
exports.DeviceSearchQuerySchemaSchema = zod_1.z.object({
    "relationType": zod_1.z.string(),
    "deviceTypes": zod_1.z.array(zod_1.z.string()),
    "parameters": exports.RelationsSearchParametersSchema
});
exports.DeviceSearchQueryFilterSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.DeviceTransportConfigurationSchemaSchema = zod_1.z.object({});
exports.DeviceTypeFilterSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.DisabledDeviceProfileProvisionConfigurationSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.DurationAlarmConditionSpecSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.DynamicValue_Of_booleanSchemaSchema = zod_1.z.object({
    "inherit": zod_1.z.boolean(),
    "sourceAttribute": zod_1.z.string(),
    "sourceType": zod_1.z.enum(["CURRENT_CUSTOMER", "CURRENT_DEVICE", "CURRENT_TENANT", "CURRENT_USER"])
});
exports.DynamicValue_Of_doubleSchemaSchema = zod_1.z.object({
    "inherit": zod_1.z.boolean(),
    "sourceAttribute": zod_1.z.string(),
    "sourceType": zod_1.z.enum(["CURRENT_CUSTOMER", "CURRENT_DEVICE", "CURRENT_TENANT", "CURRENT_USER"])
});
exports.DynamicValue_Of_intSchemaSchema = zod_1.z.object({
    "inherit": zod_1.z.boolean(),
    "sourceAttribute": zod_1.z.string(),
    "sourceType": zod_1.z.enum(["CURRENT_CUSTOMER", "CURRENT_DEVICE", "CURRENT_TENANT", "CURRENT_USER"])
});
exports.DynamicValue_Of_longSchemaSchema = zod_1.z.object({
    "inherit": zod_1.z.boolean(),
    "sourceAttribute": zod_1.z.string(),
    "sourceType": zod_1.z.enum(["CURRENT_CUSTOMER", "CURRENT_DEVICE", "CURRENT_TENANT", "CURRENT_USER"])
});
exports.DynamicValue_Of_stringSchemaSchema = zod_1.z.object({
    "inherit": zod_1.z.boolean(),
    "sourceAttribute": zod_1.z.string(),
    "sourceType": zod_1.z.enum(["CURRENT_CUSTOMER", "CURRENT_DEVICE", "CURRENT_TENANT", "CURRENT_USER"])
});
exports.EdgeSchemaSchema = zod_1.z.object({
    "additionalInfo": exports.JsonNodeSchema,
    "ownerId": exports.EntityIdSchema,
    "id": exports.EdgeIdSchema,
    "createdTime": zod_1.z.number(),
    "tenantId": exports.TenantIdSchema,
    "customerId": exports.CustomerIdSchema,
    "rootRuleChainId": exports.RuleChainIdSchema,
    "name": zod_1.z.string(),
    "type": zod_1.z.string(),
    "label": zod_1.z.string(),
    "routingKey": zod_1.z.string(),
    "secret": zod_1.z.string(),
    "edgeLicenseKey": zod_1.z.string(),
    "cloudEndpoint": zod_1.z.string()
});
exports.EdgeEventSchemaSchema = zod_1.z.object({
    "action": zod_1.z.enum(["ADDED", "ADDED_TO_ENTITY_GROUP", "ALARM_ACK", "ALARM_ASSIGNED", "ALARM_CLEAR", "ALARM_UNASSIGNED", "ASSIGNED_TO_EDGE", "ATTRIBUTES_DELETED", "ATTRIBUTES_UPDATED", "CHANGE_OWNER", "CREDENTIALS_REQUEST", "CREDENTIALS_UPDATED", "DELETED", "ENTITY_MERGE_REQUEST", "POST_ATTRIBUTES", "RELATION_ADD_OR_UPDATE", "RELATION_DELETED", "REMOVED_FROM_ENTITY_GROUP", "RPC_CALL", "TIMESERIES_UPDATED", "UNASSIGNED_FROM_EDGE", "UPDATED"]),
    "body": exports.JsonNodeSchema,
    "createdTime": zod_1.z.number(),
    "edgeId": exports.EdgeIdSchema,
    "entityGroupId": zod_1.z.string(),
    "entityId": zod_1.z.string(),
    "id": exports.EdgeEventIdSchema,
    "seqId": zod_1.z.number(),
    "tenantId": exports.TenantIdSchema,
    "type": zod_1.z.enum(["ADMIN_SETTINGS", "ALARM", "ASSET", "ASSET_PROFILE", "CONVERTER", "CUSTOMER", "CUSTOM_TRANSLATION", "DASHBOARD", "DEVICE", "DEVICE_PROFILE", "EDGE", "ENTITY_GROUP", "ENTITY_VIEW", "GROUP_PERMISSION", "INTEGRATION", "LOGIN_WHITE_LABELING", "MAIL_TEMPLATES", "OTA_PACKAGE", "QUEUE", "RELATION", "ROLE", "RULE_CHAIN", "RULE_CHAIN_METADATA", "SCHEDULER_EVENT", "TB_RESOURCE", "TENANT", "TENANT_PROFILE", "USER", "WHITE_LABELING", "WIDGETS_BUNDLE", "WIDGET_TYPE"]),
    "uid": zod_1.z.string()
});
exports.EdgeEventIdSchemaSchema = zod_1.z.object({
    "id": zod_1.z.string()
});
exports.EdgeIdSchemaSchema = zod_1.z.object({
    "id": zod_1.z.string(),
    "entityType": zod_1.z.enum(["EDGE"])
});
exports.EdgeInfoSchemaSchema = zod_1.z.object({
    "additionalInfo": exports.JsonNodeSchema,
    "ownerId": exports.EntityIdSchema,
    "id": exports.EdgeIdSchema,
    "createdTime": zod_1.z.number(),
    "tenantId": exports.TenantIdSchema,
    "customerId": exports.CustomerIdSchema,
    "rootRuleChainId": exports.RuleChainIdSchema,
    "name": zod_1.z.string(),
    "type": zod_1.z.string(),
    "label": zod_1.z.string(),
    "routingKey": zod_1.z.string(),
    "secret": zod_1.z.string(),
    "edgeLicenseKey": zod_1.z.string(),
    "cloudEndpoint": zod_1.z.string(),
    "ownerName": zod_1.z.string(),
    "groups": zod_1.z.array(exports.EntityInfoSchema)
});
exports.EdgeInstructionsSchemaSchema = zod_1.z.object({
    "instructions": zod_1.z.string()
});
exports.EdgeSearchQuerySchemaSchema = zod_1.z.object({
    "relationType": zod_1.z.string(),
    "edgeTypes": zod_1.z.array(zod_1.z.string()),
    "parameters": exports.RelationsSearchParametersSchema
});
exports.EdgeSearchQueryFilterSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.EdgeTypeFilterSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.EfentoCoapDeviceTypeConfigurationSchemaSchema = zod_1.z.object({});
exports.EmailDeliveryMethodNotificationTemplateSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.EmailTwoFaAccountConfigSchemaSchema = zod_1.z.object({
    "email": zod_1.z.string(),
    "useByDefault": zod_1.z.boolean()
});
exports.EmailTwoFaProviderConfigSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.EntitiesByGroupNameFilterSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.EntitiesLimitNotificationRuleTriggerConfigSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.EntityActionNotificationRuleTriggerConfigSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.EntityCountQuerySchemaSchema = zod_1.z.object({
    "entityFilter": exports.EntityFilterSchema,
    "keyFilters": zod_1.z.array(exports.KeyFilterSchema)
});
exports.EntityDataSchemaSchema = zod_1.z.object({
    "aggLatest": zod_1.z.record(zod_1.z.string(), exports.ComparisonTsValueSchema),
    "entityId": exports.EntityIdSchema,
    "latest": zod_1.z.record(zod_1.z.string(), zod_1.z.object({})),
    "readAttrs": zod_1.z.boolean(),
    "readTs": zod_1.z.boolean(),
    "timeseries": zod_1.z.record(zod_1.z.string(), zod_1.z.array(exports.TsValueSchema))
});
exports.EntityDataDiffSchemaSchema = zod_1.z.object({
    "currentVersion": exports.EntityExportData_Of_objectSchema,
    "otherVersion": exports.EntityExportData_Of_objectSchema
});
exports.EntityDataInfoSchemaSchema = zod_1.z.object({
    "hasAttributes": zod_1.z.boolean(),
    "hasCredentials": zod_1.z.boolean(),
    "hasGroupEntities": zod_1.z.boolean(),
    "hasPermissions": zod_1.z.boolean(),
    "hasRelations": zod_1.z.boolean()
});
exports.EntityDataPageLinkSchemaSchema = zod_1.z.object({
    "dynamic": zod_1.z.boolean(),
    "page": zod_1.z.number(),
    "pageSize": zod_1.z.number(),
    "sortOrder": exports.EntityDataSortOrderSchema,
    "textSearch": zod_1.z.string()
});
exports.EntityDataQuerySchemaSchema = zod_1.z.object({
    "entityFields": zod_1.z.array(exports.EntityKeySchema),
    "entityFilter": exports.EntityFilterSchema,
    "keyFilters": zod_1.z.array(exports.KeyFilterSchema),
    "latestValues": zod_1.z.array(exports.EntityKeySchema),
    "pageLink": exports.EntityDataPageLinkSchema
});
exports.EntityDataSortOrderSchemaSchema = zod_1.z.object({
    "direction": zod_1.z.enum(["ASC", "DESC"]),
    "key": exports.EntityKeySchema
});
exports.EntityExportData_Of_objectSchemaSchema = zod_1.z.object({
    "attributes": zod_1.z.record(zod_1.z.string(), zod_1.z.array(exports.AttributeExportDataSchema)),
    "entity": zod_1.z.object({}),
    "entityType": zod_1.z.enum(["ALARM", "API_USAGE_STATE", "ASSET", "ASSET_PROFILE", "BLOB_ENTITY", "CONVERTER", "CUSTOMER", "DASHBOARD", "DEVICE", "DEVICE_PROFILE", "EDGE", "ENTITY_GROUP", "ENTITY_VIEW", "GROUP_PERMISSION", "INTEGRATION", "NOTIFICATION", "NOTIFICATION_REQUEST", "NOTIFICATION_RULE", "NOTIFICATION_TARGET", "NOTIFICATION_TEMPLATE", "OTA_PACKAGE", "QUEUE", "ROLE", "RPC", "RULE_CHAIN", "RULE_NODE", "SCHEDULER_EVENT", "TB_RESOURCE", "TENANT", "TENANT_PROFILE", "USER", "WIDGETS_BUNDLE", "WIDGET_TYPE"]),
    "relations": zod_1.z.array(exports.EntityRelationSchema)
});
exports.EntityFilterSchemaSchema = zod_1.z.object({});
exports.EntityGroupSchemaSchema = zod_1.z.object({
    "id": exports.EntityGroupIdSchema,
    "createdTime": zod_1.z.number(),
    "ownerId": exports.EntityIdSchema,
    "name": zod_1.z.string(),
    "type": zod_1.z.enum(["ASSET", "CUSTOMER", "DASHBOARD", "DEVICE", "EDGE", "ENTITY_VIEW", "USER"]),
    "additionalInfo": exports.JsonNodeSchema,
    "configuration": exports.JsonNodeSchema,
    "groupAll": zod_1.z.boolean(),
    "edgeGroupAll": zod_1.z.boolean()
});
exports.EntityGroupExportDataSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.EntityGroupFilterSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.EntityGroupIdSchemaSchema = zod_1.z.object({
    "id": zod_1.z.string(),
    "entityType": zod_1.z.enum(["ENTITY_GROUP"])
});
exports.EntityGroupInfoSchemaSchema = zod_1.z.object({
    "id": exports.EntityGroupIdSchema,
    "createdTime": zod_1.z.number(),
    "ownerId": exports.EntityIdSchema,
    "name": zod_1.z.string(),
    "type": zod_1.z.enum(["ASSET", "CUSTOMER", "DASHBOARD", "DEVICE", "EDGE", "ENTITY_VIEW", "USER"]),
    "additionalInfo": exports.JsonNodeSchema,
    "configuration": exports.JsonNodeSchema,
    "groupAll": zod_1.z.boolean(),
    "edgeGroupAll": zod_1.z.boolean(),
    "ownerIds": zod_1.z.array(exports.EntityIdSchema)
});
exports.EntityGroupListFilterSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.EntityGroupNameFilterSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.EntityIdSchemaSchema = zod_1.z.object({
    "id": zod_1.z.string(),
    "entityType": zod_1.z.enum(["ALARM", "API_USAGE_STATE", "ASSET", "ASSET_PROFILE", "BLOB_ENTITY", "CONVERTER", "CUSTOMER", "DASHBOARD", "DEVICE", "DEVICE_PROFILE", "EDGE", "ENTITY_GROUP", "ENTITY_VIEW", "GROUP_PERMISSION", "INTEGRATION", "NOTIFICATION", "NOTIFICATION_REQUEST", "NOTIFICATION_RULE", "NOTIFICATION_TARGET", "NOTIFICATION_TEMPLATE", "OTA_PACKAGE", "QUEUE", "ROLE", "RPC", "RULE_CHAIN", "RULE_NODE", "SCHEDULER_EVENT", "TB_RESOURCE", "TENANT", "TENANT_PROFILE", "USER", "WIDGETS_BUNDLE", "WIDGET_TYPE"])
});
exports.EntityInfoSchemaSchema = zod_1.z.object({
    "id": exports.EntityIdSchema,
    "name": zod_1.z.string()
});
exports.EntityKeySchemaSchema = zod_1.z.object({
    "key": zod_1.z.string(),
    "type": zod_1.z.enum(["ALARM_FIELD", "ATTRIBUTE", "CLIENT_ATTRIBUTE", "ENTITY_FIELD", "SERVER_ATTRIBUTE", "SHARED_ATTRIBUTE", "TIME_SERIES"])
});
exports.EntityListFilterSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.EntityLoadErrorSchemaSchema = zod_1.z.object({
    "message": zod_1.z.string(),
    "source": exports.EntityIdSchema,
    "target": exports.EntityIdSchema,
    "type": zod_1.z.string()
});
exports.EntityNameFilterSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.EntityRelationSchemaSchema = zod_1.z.object({
    "from": exports.EntityIdSchema,
    "to": exports.EntityIdSchema,
    "type": zod_1.z.string(),
    "typeGroup": zod_1.z.enum(["COMMON", "DASHBOARD", "EDGE", "EDGE_AUTO_ASSIGN_RULE_CHAIN", "FROM_ENTITY_GROUP", "RULE_CHAIN", "RULE_NODE"]),
    "additionalInfo": exports.JsonNodeSchema
});
exports.EntityRelationInfoSchemaSchema = zod_1.z.object({
    "from": exports.EntityIdSchema,
    "to": exports.EntityIdSchema,
    "type": zod_1.z.string(),
    "typeGroup": zod_1.z.enum(["COMMON", "DASHBOARD", "EDGE", "EDGE_AUTO_ASSIGN_RULE_CHAIN", "FROM_ENTITY_GROUP", "RULE_CHAIN", "RULE_NODE"]),
    "additionalInfo": exports.JsonNodeSchema,
    "fromName": zod_1.z.string(),
    "toName": zod_1.z.string()
});
exports.EntityRelationsQuerySchemaSchema = zod_1.z.object({
    "filters": zod_1.z.array(exports.RelationEntityTypeFilterSchema),
    "parameters": exports.RelationsSearchParametersSchema
});
exports.EntitySubtypeSchemaSchema = zod_1.z.object({
    "entityType": zod_1.z.enum(["ALARM", "API_USAGE_STATE", "ASSET", "ASSET_PROFILE", "BLOB_ENTITY", "CONVERTER", "CUSTOMER", "DASHBOARD", "DEVICE", "DEVICE_PROFILE", "EDGE", "ENTITY_GROUP", "ENTITY_VIEW", "GROUP_PERMISSION", "INTEGRATION", "NOTIFICATION", "NOTIFICATION_REQUEST", "NOTIFICATION_RULE", "NOTIFICATION_TARGET", "NOTIFICATION_TEMPLATE", "OTA_PACKAGE", "QUEUE", "ROLE", "RPC", "RULE_CHAIN", "RULE_NODE", "SCHEDULER_EVENT", "TB_RESOURCE", "TENANT", "TENANT_PROFILE", "USER", "WIDGETS_BUNDLE", "WIDGET_TYPE"]),
    "tenantId": exports.TenantIdSchema,
    "type": zod_1.z.string()
});
exports.EntityTypeFilterSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.EntityTypeLoadResultSchemaSchema = zod_1.z.object({
    "created": zod_1.z.number(),
    "deleted": zod_1.z.number(),
    "entityType": zod_1.z.enum(["ALARM", "API_USAGE_STATE", "ASSET", "ASSET_PROFILE", "BLOB_ENTITY", "CONVERTER", "CUSTOMER", "DASHBOARD", "DEVICE", "DEVICE_PROFILE", "EDGE", "ENTITY_GROUP", "ENTITY_VIEW", "GROUP_PERMISSION", "INTEGRATION", "NOTIFICATION", "NOTIFICATION_REQUEST", "NOTIFICATION_RULE", "NOTIFICATION_TARGET", "NOTIFICATION_TEMPLATE", "OTA_PACKAGE", "QUEUE", "ROLE", "RPC", "RULE_CHAIN", "RULE_NODE", "SCHEDULER_EVENT", "TB_RESOURCE", "TENANT", "TENANT_PROFILE", "USER", "WIDGETS_BUNDLE", "WIDGET_TYPE"]),
    "groupsCreated": zod_1.z.number(),
    "groupsDeleted": zod_1.z.number(),
    "groupsUpdated": zod_1.z.number(),
    "updated": zod_1.z.number()
});
exports.EntityTypeVersionCreateConfigSchemaSchema = zod_1.z.object({
    "allEntities": zod_1.z.boolean(),
    "entityIds": zod_1.z.array(zod_1.z.string()),
    "saveAttributes": zod_1.z.boolean(),
    "saveCredentials": zod_1.z.boolean(),
    "saveGroupEntities": zod_1.z.boolean(),
    "savePermissions": zod_1.z.boolean(),
    "saveRelations": zod_1.z.boolean(),
    "syncStrategy": zod_1.z.enum(["MERGE", "OVERWRITE"])
});
exports.EntityTypeVersionLoadConfigSchemaSchema = zod_1.z.object({
    "autoGenerateIntegrationKey": zod_1.z.boolean(),
    "findExistingEntityByName": zod_1.z.boolean(),
    "loadAttributes": zod_1.z.boolean(),
    "loadCredentials": zod_1.z.boolean(),
    "loadGroupEntities": zod_1.z.boolean(),
    "loadPermissions": zod_1.z.boolean(),
    "loadRelations": zod_1.z.boolean(),
    "removeOtherEntities": zod_1.z.boolean()
});
exports.EntityTypeVersionLoadRequestSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.EntityVersionSchemaSchema = zod_1.z.object({
    "author": zod_1.z.string(),
    "id": zod_1.z.string(),
    "name": zod_1.z.string(),
    "timestamp": zod_1.z.number()
});
exports.EntityViewSchemaSchema = zod_1.z.object({
    "id": exports.EntityViewIdSchema,
    "createdTime": zod_1.z.number(),
    "tenantId": exports.TenantIdSchema,
    "customerId": exports.CustomerIdSchema,
    "name": zod_1.z.string(),
    "type": zod_1.z.string(),
    "entityId": exports.EntityIdSchema,
    "keys": exports.TelemetryEntityViewSchema,
    "startTimeMs": zod_1.z.number(),
    "endTimeMs": zod_1.z.number(),
    "additionalInfo": exports.JsonNodeSchema,
    "ownerId": exports.EntityIdSchema
});
exports.EntityViewIdSchemaSchema = zod_1.z.object({
    "id": zod_1.z.string(),
    "entityType": zod_1.z.enum(["ENTITY_VIEW"])
});
exports.EntityViewInfoSchemaSchema = zod_1.z.object({
    "id": exports.EntityViewIdSchema,
    "createdTime": zod_1.z.number(),
    "tenantId": exports.TenantIdSchema,
    "customerId": exports.CustomerIdSchema,
    "name": zod_1.z.string(),
    "type": zod_1.z.string(),
    "entityId": exports.EntityIdSchema,
    "keys": exports.TelemetryEntityViewSchema,
    "startTimeMs": zod_1.z.number(),
    "endTimeMs": zod_1.z.number(),
    "additionalInfo": exports.JsonNodeSchema,
    "ownerName": zod_1.z.string(),
    "groups": zod_1.z.array(exports.EntityInfoSchema),
    "ownerId": exports.EntityIdSchema
});
exports.EntityViewSearchQuerySchemaSchema = zod_1.z.object({
    "relationType": zod_1.z.string(),
    "entityViewTypes": zod_1.z.array(zod_1.z.string()),
    "parameters": exports.RelationsSearchParametersSchema
});
exports.EntityViewSearchQueryFilterSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.EntityViewTypeFilterSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.ErrorEventFilterSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.EscalatedNotificationRuleRecipientsConfigSchemaSchema = zod_1.z.object({
    "escalationTable": zod_1.z.record(zod_1.z.string(), zod_1.z.array(zod_1.z.string())),
    "triggerType": zod_1.z.enum(["ALARM", "ALARM_ASSIGNMENT", "ALARM_COMMENT", "API_USAGE_LIMIT", "DEVICE_ACTIVITY", "ENTITIES_LIMIT", "ENTITY_ACTION", "INTEGRATION_LIFECYCLE_EVENT", "NEW_PLATFORM_VERSION", "RATE_LIMITS", "RULE_ENGINE_COMPONENT_LIFECYCLE_EVENT"])
});
exports.EventFilterSchemaSchema = zod_1.z.object({
    "notEmpty": zod_1.z.boolean(),
    "eventType": zod_1.z.enum(["DEBUG_CONVERTER", "DEBUG_INTEGRATION", "DEBUG_RULE_CHAIN", "DEBUG_RULE_NODE", "ERROR", "LC_EVENT", "RAW_DATA", "STATS"])
});
exports.EventIdSchemaSchema = zod_1.z.object({
    "id": zod_1.z.string()
});
exports.EventInfoSchemaSchema = zod_1.z.object({
    "id": exports.EventIdSchema,
    "tenantId": exports.TenantIdSchema,
    "type": zod_1.z.string(),
    "uid": zod_1.z.string(),
    "entityId": exports.EntityIdSchema,
    "body": exports.JsonNodeSchema,
    "createdTime": zod_1.z.number()
});
exports.ExportableEntity_Of_EntityIdSchemaSchema = zod_1.z.object({
    "createdTime": zod_1.z.number(),
    "id": exports.EntityIdSchema,
    "name": zod_1.z.string()
});
exports.FaviconSchemaSchema = zod_1.z.object({
    "url": zod_1.z.string()
});
exports.FeaturesInfoSchemaSchema = zod_1.z.object({
    "emailEnabled": zod_1.z.boolean(),
    "notificationEnabled": zod_1.z.boolean(),
    "oauthEnabled": zod_1.z.boolean(),
    "smsEnabled": zod_1.z.boolean(),
    "twoFaEnabled": zod_1.z.boolean(),
    "whiteLabelingEnabled": zod_1.z.boolean()
});
exports.FilterPredicateValue_Of_booleanSchemaSchema = zod_1.z.object({
    "defaultValue": zod_1.z.boolean(),
    "dynamicValue": exports.DynamicValue_Of_booleanSchema,
    "userValue": zod_1.z.boolean()
});
exports.FilterPredicateValue_Of_doubleSchemaSchema = zod_1.z.object({
    "defaultValue": zod_1.z.number(),
    "dynamicValue": exports.DynamicValue_Of_doubleSchema,
    "userValue": zod_1.z.number()
});
exports.FilterPredicateValue_Of_intSchemaSchema = zod_1.z.object({
    "defaultValue": zod_1.z.number(),
    "dynamicValue": exports.DynamicValue_Of_intSchema,
    "userValue": zod_1.z.number()
});
exports.FilterPredicateValue_Of_longSchemaSchema = zod_1.z.object({
    "defaultValue": zod_1.z.number(),
    "dynamicValue": exports.DynamicValue_Of_longSchema,
    "userValue": zod_1.z.number()
});
exports.FilterPredicateValue_Of_stringSchemaSchema = zod_1.z.object({
    "defaultValue": zod_1.z.string(),
    "dynamicValue": exports.DynamicValue_Of_stringSchema,
    "userValue": zod_1.z.string()
});
exports.GroupEntityExportDataSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.GroupPermissionSchemaSchema = zod_1.z.object({
    "public": zod_1.z.boolean(),
    "id": exports.GroupPermissionIdSchema,
    "createdTime": zod_1.z.number(),
    "tenantId": exports.TenantIdSchema,
    "userGroupId": exports.EntityGroupIdSchema,
    "roleId": exports.RoleIdSchema,
    "entityGroupId": exports.EntityGroupIdSchema,
    "entityGroupType": zod_1.z.enum(["ALARM", "API_USAGE_STATE", "ASSET", "ASSET_PROFILE", "BLOB_ENTITY", "CONVERTER", "CUSTOMER", "DASHBOARD", "DEVICE", "DEVICE_PROFILE", "EDGE", "ENTITY_GROUP", "ENTITY_VIEW", "GROUP_PERMISSION", "INTEGRATION", "NOTIFICATION", "NOTIFICATION_REQUEST", "NOTIFICATION_RULE", "NOTIFICATION_TARGET", "NOTIFICATION_TEMPLATE", "OTA_PACKAGE", "QUEUE", "ROLE", "RPC", "RULE_CHAIN", "RULE_NODE", "SCHEDULER_EVENT", "TB_RESOURCE", "TENANT", "TENANT_PROFILE", "USER", "WIDGETS_BUNDLE", "WIDGET_TYPE"]),
    "name": zod_1.z.string()
});
exports.GroupPermissionIdSchemaSchema = zod_1.z.object({
    "id": zod_1.z.string(),
    "entityType": zod_1.z.enum(["GROUP_PERMISSION"])
});
exports.GroupPermissionInfoSchemaSchema = zod_1.z.object({
    "public": zod_1.z.boolean(),
    "readOnly": zod_1.z.boolean(),
    "id": exports.GroupPermissionIdSchema,
    "createdTime": zod_1.z.number(),
    "tenantId": exports.TenantIdSchema,
    "userGroupId": exports.EntityGroupIdSchema,
    "roleId": exports.RoleIdSchema,
    "entityGroupId": exports.EntityGroupIdSchema,
    "entityGroupType": zod_1.z.enum(["ALARM", "API_USAGE_STATE", "ASSET", "ASSET_PROFILE", "BLOB_ENTITY", "CONVERTER", "CUSTOMER", "DASHBOARD", "DEVICE", "DEVICE_PROFILE", "EDGE", "ENTITY_GROUP", "ENTITY_VIEW", "GROUP_PERMISSION", "INTEGRATION", "NOTIFICATION", "NOTIFICATION_REQUEST", "NOTIFICATION_RULE", "NOTIFICATION_TARGET", "NOTIFICATION_TEMPLATE", "OTA_PACKAGE", "QUEUE", "ROLE", "RPC", "RULE_CHAIN", "RULE_NODE", "SCHEDULER_EVENT", "TB_RESOURCE", "TENANT", "TENANT_PROFILE", "USER", "WIDGETS_BUNDLE", "WIDGET_TYPE"]),
    "name": zod_1.z.string(),
    "role": exports.RoleSchema,
    "entityGroupName": zod_1.z.string(),
    "entityGroupOwnerId": exports.EntityIdSchema,
    "entityGroupOwnerName": zod_1.z.string(),
    "userGroupName": zod_1.z.string(),
    "userGroupOwnerId": exports.EntityIdSchema,
    "userGroupOwnerName": zod_1.z.string()
});
exports.HasId_Of_objectSchemaSchema = zod_1.z.object({
    "id": zod_1.z.object({})
});
exports.HomeDashboardSchemaSchema = zod_1.z.object({
    "id": exports.DashboardIdSchema,
    "createdTime": zod_1.z.number(),
    "tenantId": exports.TenantIdSchema,
    "customerId": exports.CustomerIdSchema,
    "ownerId": exports.EntityIdSchema,
    "title": zod_1.z.string(),
    "image": zod_1.z.string(),
    "assignedCustomers": zod_1.z.array(exports.ShortCustomerInfoSchema),
    "mobileHide": zod_1.z.boolean(),
    "mobileOrder": zod_1.z.number(),
    "name": zod_1.z.string(),
    "configuration": exports.JsonNodeSchema,
    "hideDashboardToolbar": zod_1.z.boolean()
});
exports.HomeDashboardInfoSchemaSchema = zod_1.z.object({
    "dashboardId": exports.DashboardIdSchema,
    "hideDashboardToolbar": zod_1.z.boolean()
});
exports.ImageExportDataSchemaSchema = zod_1.z.object({
    "data": zod_1.z.string(),
    "fileName": zod_1.z.string(),
    "mediaType": zod_1.z.string(),
    "public": zod_1.z.boolean(),
    "publicResourceKey": zod_1.z.string(),
    "resourceKey": zod_1.z.string(),
    "title": zod_1.z.string()
});
exports.InputStreamSchemaSchema = zod_1.z.object({});
exports.IntegrationSchemaSchema = zod_1.z.object({
    "id": exports.IntegrationIdSchema,
    "createdTime": zod_1.z.number(),
    "tenantId": exports.TenantIdSchema,
    "defaultConverterId": exports.ConverterIdSchema,
    "downlinkConverterId": exports.ConverterIdSchema,
    "routingKey": zod_1.z.string(),
    "type": zod_1.z.enum(["APACHE_PULSAR", "AWS_IOT", "AWS_KINESIS", "AWS_SQS", "AZURE_EVENT_HUB", "AZURE_IOT_HUB", "AZURE_SERVICE_BUS", "CHIRPSTACK", "COAP", "CUSTOM", "HTTP", "IBM_WATSON_IOT", "KAFKA", "KPN", "LORIOT", "MQTT", "OCEANCONNECT", "OPC_UA", "PARTICLE", "PUB_SUB", "RABBITMQ", "SIGFOX", "TCP", "THINGPARK", "TMOBILE_IOT_CDP", "TPE", "TTI", "TTN", "TUYA", "UDP"]),
    "debugMode": zod_1.z.boolean(),
    "enabled": zod_1.z.boolean(),
    "remote": zod_1.z.boolean(),
    "allowCreateDevicesOrAssets": zod_1.z.boolean(),
    "secret": zod_1.z.string(),
    "configuration": exports.JsonNodeSchema,
    "additionalInfo": exports.JsonNodeSchema,
    "name": zod_1.z.string(),
    "edgeTemplate": zod_1.z.boolean()
});
exports.IntegrationIdSchemaSchema = zod_1.z.object({
    "id": zod_1.z.string(),
    "entityType": zod_1.z.enum(["INTEGRATION"])
});
exports.IntegrationInfoSchemaSchema = zod_1.z.object({
    "stats": exports.ArrayNodeSchema,
    "status": exports.ObjectNodeSchema,
    "id": exports.IntegrationIdSchema,
    "createdTime": zod_1.z.number(),
    "tenantId": exports.TenantIdSchema,
    "type": zod_1.z.enum(["APACHE_PULSAR", "AWS_IOT", "AWS_KINESIS", "AWS_SQS", "AZURE_EVENT_HUB", "AZURE_IOT_HUB", "AZURE_SERVICE_BUS", "CHIRPSTACK", "COAP", "CUSTOM", "HTTP", "IBM_WATSON_IOT", "KAFKA", "KPN", "LORIOT", "MQTT", "OCEANCONNECT", "OPC_UA", "PARTICLE", "PUB_SUB", "RABBITMQ", "SIGFOX", "TCP", "THINGPARK", "TMOBILE_IOT_CDP", "TPE", "TTI", "TTN", "TUYA", "UDP"]),
    "debugMode": zod_1.z.boolean(),
    "enabled": zod_1.z.boolean(),
    "remote": zod_1.z.boolean(),
    "allowCreateDevicesOrAssets": zod_1.z.boolean(),
    "name": zod_1.z.string(),
    "edgeTemplate": zod_1.z.boolean()
});
exports.IntegrationLifecycleEventNotificationRuleTriggerConfigSchemaSchema = zod_1.z.object({
    "integrationTypes": zod_1.z.array(zod_1.z.enum(["APACHE_PULSAR", "AWS_IOT", "AWS_KINESIS", "AWS_SQS", "AZURE_EVENT_HUB", "AZURE_IOT_HUB", "AZURE_SERVICE_BUS", "CHIRPSTACK", "COAP", "CUSTOM", "HTTP", "IBM_WATSON_IOT", "KAFKA", "KPN", "LORIOT", "MQTT", "OCEANCONNECT", "OPC_UA", "PARTICLE", "PUB_SUB", "RABBITMQ", "SIGFOX", "TCP", "THINGPARK", "TMOBILE_IOT_CDP", "TPE", "TTI", "TTN", "TUYA", "UDP"])),
    "integrations": zod_1.z.array(zod_1.z.string()),
    "notifyOn": zod_1.z.array(zod_1.z.enum(["ACTIVATED", "CREATED", "DEACTIVATED", "DELETED", "FAILED", "STARTED", "STOPPED", "SUSPENDED", "UPDATED"])),
    "onlyOnError": zod_1.z.boolean(),
    "triggerType": zod_1.z.enum(["ALARM", "ALARM_ASSIGNMENT", "ALARM_COMMENT", "API_USAGE_LIMIT", "DEVICE_ACTIVITY", "ENTITIES_LIMIT", "ENTITY_ACTION", "INTEGRATION_LIFECYCLE_EVENT", "NEW_PLATFORM_VERSION", "RATE_LIMITS", "RULE_ENGINE_COMPONENT_LIFECYCLE_EVENT"])
});
exports.JWT_PairSchemaSchema = zod_1.z.object({
    "scope": zod_1.z.enum(["CUSTOMER_USER", "PRE_VERIFICATION_TOKEN", "REFRESH_TOKEN", "SYS_ADMIN", "TENANT_ADMIN"]),
    "refreshToken": zod_1.z.string(),
    "token": zod_1.z.string()
});
exports.JWT_SettingsSchemaSchema = zod_1.z.object({
    "tokenExpirationTime": zod_1.z.number(),
    "refreshTokenExpTime": zod_1.z.number(),
    "tokenIssuer": zod_1.z.string(),
    "tokenSigningKey": zod_1.z.string()
});
exports.JsonNodeSchemaSchema = zod_1.z.object({});
exports.JsonTransportPayloadConfigurationSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.KeyFilterSchemaSchema = zod_1.z.object({
    "key": exports.EntityKeySchema,
    "predicate": exports.KeyFilterPredicateSchema,
    "valueType": zod_1.z.enum(["BOOLEAN", "DATE_TIME", "NUMERIC", "STRING"])
});
exports.KeyFilterPredicateSchemaSchema = zod_1.z.object({});
exports.LastVisitedDashboardInfoSchemaSchema = zod_1.z.object({
    "id": zod_1.z.string(),
    "title": zod_1.z.string(),
    "starred": zod_1.z.boolean(),
    "lastVisited": zod_1.z.number()
});
exports.LicenseUsageInfoSchemaSchema = zod_1.z.object({
    "assetsCount": zod_1.z.number(),
    "dashboardsCount": zod_1.z.number(),
    "development": zod_1.z.boolean(),
    "devicesCount": zod_1.z.number(),
    "integrationsCount": zod_1.z.number(),
    "maxAssets": zod_1.z.number(),
    "maxDevices": zod_1.z.number(),
    "plan": zod_1.z.string(),
    "whiteLabelingEnabled": zod_1.z.boolean()
});
exports.LifeCycleEventFilterSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.LoginRequestSchemaSchema = zod_1.z.object({
    "username": zod_1.z.string(),
    "password": zod_1.z.string()
});
exports.LoginResponseSchemaSchema = zod_1.z.object({
    "token": zod_1.z.string(),
    "refreshToken": zod_1.z.string()
});
exports.LoginWhiteLabelingParamsSchemaSchema = zod_1.z.object({
    "logoImageUrl": zod_1.z.string(),
    "logoImageHeight": zod_1.z.number(),
    "appTitle": zod_1.z.string(),
    "favicon": exports.FaviconSchema,
    "paletteSettings": exports.PaletteSettingsSchema,
    "helpLinkBaseUrl": zod_1.z.string(),
    "uiHelpBaseUrl": zod_1.z.string(),
    "enableHelpLinks": zod_1.z.boolean(),
    "whiteLabelingEnabled": zod_1.z.boolean(),
    "showNameVersion": zod_1.z.boolean(),
    "platformName": zod_1.z.string(),
    "platformVersion": zod_1.z.string(),
    "customCss": zod_1.z.string(),
    "pageBackgroundColor": zod_1.z.string(),
    "darkForeground": zod_1.z.boolean(),
    "domainName": zod_1.z.string(),
    "baseUrl": zod_1.z.string(),
    "prohibitDifferentUrl": zod_1.z.boolean(),
    "adminSettingsId": zod_1.z.string(),
    "showNameBottom": zod_1.z.boolean()
});
exports.LwM2MBootstrapServerCredentialSchemaSchema = zod_1.z.object({});
exports.LwM2mInstanceSchemaSchema = zod_1.z.object({
    "id": zod_1.z.number(),
    "resources": zod_1.z.array(exports.LwM2mResourceObserveSchema)
});
exports.LwM2mObjectSchemaSchema = zod_1.z.object({
    "id": zod_1.z.number(),
    "keyId": zod_1.z.string(),
    "name": zod_1.z.string(),
    "multiple": zod_1.z.boolean(),
    "mandatory": zod_1.z.boolean(),
    "instances": zod_1.z.array(exports.LwM2mInstanceSchema)
});
exports.LwM2mResourceObserveSchemaSchema = zod_1.z.object({
    "id": zod_1.z.number(),
    "name": zod_1.z.string(),
    "observe": zod_1.z.boolean(),
    "attribute": zod_1.z.boolean(),
    "telemetry": zod_1.z.boolean(),
    "keyName": zod_1.z.string()
});
exports.Lwm2mDeviceProfileTransportConfigurationSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.Lwm2mDeviceTransportConfigurationSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.MappingSchemaSchema = zod_1.z.object({
    "columns": zod_1.z.array(exports.ColumnMappingSchema),
    "delimiter": zod_1.z.string(),
    "header": zod_1.z.boolean(),
    "update": zod_1.z.boolean()
});
exports.MergedGroupPermissionInfoSchemaSchema = zod_1.z.object({
    "entityType": zod_1.z.enum(["ALARM", "API_USAGE_STATE", "ASSET", "ASSET_PROFILE", "BLOB_ENTITY", "CONVERTER", "CUSTOMER", "DASHBOARD", "DEVICE", "DEVICE_PROFILE", "EDGE", "ENTITY_GROUP", "ENTITY_VIEW", "GROUP_PERMISSION", "INTEGRATION", "NOTIFICATION", "NOTIFICATION_REQUEST", "NOTIFICATION_RULE", "NOTIFICATION_TARGET", "NOTIFICATION_TEMPLATE", "OTA_PACKAGE", "QUEUE", "ROLE", "RPC", "RULE_CHAIN", "RULE_NODE", "SCHEDULER_EVENT", "TB_RESOURCE", "TENANT", "TENANT_PROFILE", "USER", "WIDGETS_BUNDLE", "WIDGET_TYPE"]),
    "operations": zod_1.z.array(zod_1.z.enum(["ADD_TO_GROUP", "ALL", "ASSIGN_TO_TENANT", "CHANGE_OWNER", "CLAIM_DEVICES", "CREATE", "DELETE", "IMPERSONATE", "READ", "READ_ATTRIBUTES", "READ_CREDENTIALS", "READ_TELEMETRY", "REMOVE_FROM_GROUP", "RPC_CALL", "SHARE_GROUP", "WRITE", "WRITE_ATTRIBUTES", "WRITE_CREDENTIALS", "WRITE_TELEMETRY"]))
});
exports.MergedGroupTypePermissionInfoSchemaSchema = zod_1.z.object({
    "hasGenericRead": zod_1.z.boolean(),
    "entityGroupIds": zod_1.z.array(exports.EntityGroupIdSchema)
});
exports.MergedUserPermissionsSchemaSchema = zod_1.z.object({
    "genericPermissions": zod_1.z.record(zod_1.z.string(), zod_1.z.array(zod_1.z.string())),
    "groupPermissions": zod_1.z.record(zod_1.z.string(), exports.MergedGroupPermissionInfoSchema),
    "readGroupPermissions": zod_1.z.record(zod_1.z.string(), exports.MergedGroupTypePermissionInfoSchema),
    "readEntityPermissions": zod_1.z.record(zod_1.z.string(), exports.MergedGroupTypePermissionInfoSchema),
    "readAttrPermissions": zod_1.z.record(zod_1.z.string(), exports.MergedGroupTypePermissionInfoSchema),
    "readTsPermissions": zod_1.z.record(zod_1.z.string(), exports.MergedGroupTypePermissionInfoSchema)
});
exports.MicrosoftTeamsDeliveryMethodNotificationTemplateSchemaSchema = zod_1.z.object({
    "body": zod_1.z.string(),
    "button": exports.ButtonSchema,
    "enabled": zod_1.z.boolean(),
    "subject": zod_1.z.string(),
    "themeColor": zod_1.z.string()
});
exports.MicrosoftTeamsNotificationTargetConfigSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.MqttDeviceProfileTransportConfigurationSchemaSchema = zod_1.z.object({
    "deviceAttributesSubscribeTopic": zod_1.z.string(),
    "deviceAttributesTopic": zod_1.z.string(),
    "deviceTelemetryTopic": zod_1.z.string(),
    "sendAckOnValidationException": zod_1.z.boolean(),
    "sparkplug": zod_1.z.boolean(),
    "sparkplugAttributesMetricNames": zod_1.z.array(zod_1.z.string()),
    "transportPayloadTypeConfiguration": exports.TransportPayloadTypeConfigurationSchema
});
exports.MqttDeviceTransportConfigurationSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.NewPlatformVersionNotificationRuleTriggerConfigSchemaSchema = zod_1.z.object({
    "triggerType": zod_1.z.enum(["ALARM", "ALARM_ASSIGNMENT", "ALARM_COMMENT", "API_USAGE_LIMIT", "DEVICE_ACTIVITY", "ENTITIES_LIMIT", "ENTITY_ACTION", "INTEGRATION_LIFECYCLE_EVENT", "NEW_PLATFORM_VERSION", "RATE_LIMITS", "RULE_ENGINE_COMPONENT_LIFECYCLE_EVENT"])
});
exports.NoSecLwM2MBootstrapServerCredentialSchemaSchema = zod_1.z.object({
    "shortServerId": zod_1.z.number(),
    "bootstrapServerIs": zod_1.z.boolean(),
    "host": zod_1.z.string(),
    "port": zod_1.z.number(),
    "clientHoldOffTime": zod_1.z.number(),
    "serverPublicKey": zod_1.z.string(),
    "serverCertificate": zod_1.z.string(),
    "bootstrapServerAccountTimeout": zod_1.z.number(),
    "lifetime": zod_1.z.number(),
    "defaultMinPeriod": zod_1.z.number(),
    "notifIfDisabled": zod_1.z.boolean(),
    "binding": zod_1.z.string()
});
exports.NodeConnectionInfoSchemaSchema = zod_1.z.object({
    "fromIndex": zod_1.z.number(),
    "toIndex": zod_1.z.number(),
    "type": zod_1.z.string()
});
exports.NotificationSchemaSchema = zod_1.z.object({
    "additionalConfig": exports.JsonNodeSchema,
    "createdTime": zod_1.z.number(),
    "id": exports.NotificationIdSchema,
    "info": exports.NotificationInfoSchema,
    "recipientId": exports.UserIdSchema,
    "requestId": exports.NotificationRequestIdSchema,
    "status": zod_1.z.enum(["READ", "SENT"]),
    "subject": zod_1.z.string(),
    "text": zod_1.z.string(),
    "type": zod_1.z.enum(["ALARM", "ALARM_ASSIGNMENT", "ALARM_COMMENT", "API_USAGE_LIMIT", "DEVICE_ACTIVITY", "ENTITIES_LIMIT", "ENTITY_ACTION", "GENERAL", "INTEGRATION_LIFECYCLE_EVENT", "NEW_PLATFORM_VERSION", "RATE_LIMITS", "RULE_ENGINE_COMPONENT_LIFECYCLE_EVENT", "RULE_NODE"])
});
exports.NotificationDeliveryMethodConfigSchemaSchema = zod_1.z.object({});
exports.NotificationIdSchemaSchema = zod_1.z.object({
    "id": zod_1.z.string(),
    "entityType": zod_1.z.enum(["NOTIFICATION"])
});
exports.NotificationInfoSchemaSchema = zod_1.z.object({
    "stateEntityId": exports.EntityIdSchema
});
exports.NotificationPrefSchemaSchema = zod_1.z.object({
    "enabled": zod_1.z.boolean(),
    "enabledDeliveryMethods": zod_1.z.record(zod_1.z.string(), zod_1.z.boolean())
});
exports.NotificationRequestSchemaSchema = zod_1.z.object({
    "additionalConfig": exports.NotificationRequestConfigSchema,
    "createdTime": zod_1.z.number(),
    "id": exports.NotificationRequestIdSchema,
    "info": exports.NotificationInfoSchema,
    "originatorEntityId": exports.EntityIdSchema,
    "ruleId": exports.NotificationRuleIdSchema,
    "stats": exports.NotificationRequestStatsSchema,
    "status": zod_1.z.enum(["PROCESSING", "SCHEDULED", "SENT"]),
    "targets": zod_1.z.array(zod_1.z.string()),
    "template": exports.NotificationTemplateSchema,
    "templateId": exports.NotificationTemplateIdSchema,
    "tenantId": exports.TenantIdSchema
});
exports.NotificationRequestConfigSchemaSchema = zod_1.z.object({
    "sendingDelayInSec": zod_1.z.number()
});
exports.NotificationRequestIdSchemaSchema = zod_1.z.object({
    "id": zod_1.z.string(),
    "entityType": zod_1.z.enum(["NOTIFICATION_REQUEST"])
});
exports.NotificationRequestInfoSchemaSchema = zod_1.z.object({
    "additionalConfig": exports.NotificationRequestConfigSchema,
    "createdTime": zod_1.z.number(),
    "deliveryMethods": zod_1.z.array(zod_1.z.enum(["EMAIL", "MICROSOFT_TEAMS", "SLACK", "SMS", "WEB"])),
    "id": exports.NotificationRequestIdSchema,
    "info": exports.NotificationInfoSchema,
    "originatorEntityId": exports.EntityIdSchema,
    "ruleId": exports.NotificationRuleIdSchema,
    "stats": exports.NotificationRequestStatsSchema,
    "status": zod_1.z.enum(["PROCESSING", "SCHEDULED", "SENT"]),
    "targets": zod_1.z.array(zod_1.z.string()),
    "template": exports.NotificationTemplateSchema,
    "templateId": exports.NotificationTemplateIdSchema,
    "templateName": zod_1.z.string(),
    "tenantId": exports.TenantIdSchema
});
exports.NotificationRequestPreviewSchemaSchema = zod_1.z.object({
    "processedTemplates": zod_1.z.record(zod_1.z.string(), exports.DeliveryMethodNotificationTemplateSchema),
    "recipientsCountByTarget": zod_1.z.record(zod_1.z.string(), zod_1.z.number()),
    "recipientsPreview": zod_1.z.array(zod_1.z.string()),
    "totalRecipientsCount": zod_1.z.number()
});
exports.NotificationRequestStatsSchemaSchema = zod_1.z.object({
    "error": zod_1.z.string(),
    "errors": zod_1.z.record(zod_1.z.string(), zod_1.z.object({})),
    "sent": zod_1.z.record(zod_1.z.string(), exports.AtomicIntegerSchema)
});
exports.NotificationRuleSchemaSchema = zod_1.z.object({
    "additionalConfig": exports.NotificationRuleConfigSchema,
    "createdTime": zod_1.z.number(),
    "enabled": zod_1.z.boolean(),
    "name": zod_1.z.string(),
    "recipientsConfig": exports.NotificationRuleRecipientsConfigSchema,
    "templateId": exports.NotificationTemplateIdSchema,
    "tenantId": exports.TenantIdSchema,
    "triggerConfig": exports.NotificationRuleTriggerConfigSchema,
    "triggerType": zod_1.z.enum(["ALARM", "ALARM_ASSIGNMENT", "ALARM_COMMENT", "API_USAGE_LIMIT", "DEVICE_ACTIVITY", "ENTITIES_LIMIT", "ENTITY_ACTION", "INTEGRATION_LIFECYCLE_EVENT", "NEW_PLATFORM_VERSION", "RATE_LIMITS", "RULE_ENGINE_COMPONENT_LIFECYCLE_EVENT"])
});
exports.NotificationRuleConfigSchemaSchema = zod_1.z.object({
    "description": zod_1.z.string()
});
exports.NotificationRuleIdSchemaSchema = zod_1.z.object({
    "id": zod_1.z.string(),
    "entityType": zod_1.z.enum(["NOTIFICATION_RULE"])
});
exports.NotificationRuleInfoSchemaSchema = zod_1.z.object({
    "additionalConfig": exports.NotificationRuleConfigSchema,
    "createdTime": zod_1.z.number(),
    "deliveryMethods": zod_1.z.array(zod_1.z.enum(["EMAIL", "MICROSOFT_TEAMS", "SLACK", "SMS", "WEB"])),
    "enabled": zod_1.z.boolean(),
    "name": zod_1.z.string(),
    "recipientsConfig": exports.NotificationRuleRecipientsConfigSchema,
    "templateId": exports.NotificationTemplateIdSchema,
    "templateName": zod_1.z.string(),
    "tenantId": exports.TenantIdSchema,
    "triggerConfig": exports.NotificationRuleTriggerConfigSchema,
    "triggerType": zod_1.z.enum(["ALARM", "ALARM_ASSIGNMENT", "ALARM_COMMENT", "API_USAGE_LIMIT", "DEVICE_ACTIVITY", "ENTITIES_LIMIT", "ENTITY_ACTION", "INTEGRATION_LIFECYCLE_EVENT", "NEW_PLATFORM_VERSION", "RATE_LIMITS", "RULE_ENGINE_COMPONENT_LIFECYCLE_EVENT"])
});
exports.NotificationRuleRecipientsConfigSchemaSchema = zod_1.z.object({
    "triggerType": zod_1.z.enum(["ALARM", "ALARM_ASSIGNMENT", "ALARM_COMMENT", "API_USAGE_LIMIT", "DEVICE_ACTIVITY", "ENTITIES_LIMIT", "ENTITY_ACTION", "INTEGRATION_LIFECYCLE_EVENT", "NEW_PLATFORM_VERSION", "RATE_LIMITS", "RULE_ENGINE_COMPONENT_LIFECYCLE_EVENT"])
});
exports.NotificationRuleTriggerConfigSchemaSchema = zod_1.z.object({
    "triggerType": zod_1.z.enum(["ALARM", "ALARM_ASSIGNMENT", "ALARM_COMMENT", "API_USAGE_LIMIT", "DEVICE_ACTIVITY", "ENTITIES_LIMIT", "ENTITY_ACTION", "INTEGRATION_LIFECYCLE_EVENT", "NEW_PLATFORM_VERSION", "RATE_LIMITS", "RULE_ENGINE_COMPONENT_LIFECYCLE_EVENT"])
});
exports.NotificationSettingsSchemaSchema = zod_1.z.object({
    "deliveryMethodsConfigs": zod_1.z.record(zod_1.z.string(), exports.NotificationDeliveryMethodConfigSchema)
});
exports.NotificationTargetSchemaSchema = zod_1.z.object({
    "configuration": exports.NotificationTargetConfigSchema,
    "createdTime": zod_1.z.number(),
    "name": zod_1.z.string(),
    "tenantId": exports.TenantIdSchema
});
exports.NotificationTargetConfigSchemaSchema = zod_1.z.object({
    "description": zod_1.z.string()
});
exports.NotificationTemplateSchemaSchema = zod_1.z.object({
    "configuration": exports.NotificationTemplateConfigSchema,
    "createdTime": zod_1.z.number(),
    "name": zod_1.z.string(),
    "notificationType": zod_1.z.enum(["ALARM", "ALARM_ASSIGNMENT", "ALARM_COMMENT", "API_USAGE_LIMIT", "DEVICE_ACTIVITY", "ENTITIES_LIMIT", "ENTITY_ACTION", "GENERAL", "INTEGRATION_LIFECYCLE_EVENT", "NEW_PLATFORM_VERSION", "RATE_LIMITS", "RULE_ENGINE_COMPONENT_LIFECYCLE_EVENT", "RULE_NODE"]),
    "tenantId": exports.TenantIdSchema
});
exports.NotificationTemplateConfigSchemaSchema = zod_1.z.object({
    "deliveryMethodsTemplates": zod_1.z.record(zod_1.z.string(), exports.DeliveryMethodNotificationTemplateSchema)
});
exports.NotificationTemplateIdSchemaSchema = zod_1.z.object({
    "id": zod_1.z.string(),
    "entityType": zod_1.z.enum(["NOTIFICATION_TEMPLATE"])
});
exports.NumericFilterPredicateSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.OAuth2BasicMapperConfigSchemaSchema = zod_1.z.object({
    "alwaysFullScreen": zod_1.z.boolean(),
    "customerNamePattern": zod_1.z.string(),
    "defaultDashboardName": zod_1.z.string(),
    "emailAttributeKey": zod_1.z.string(),
    "firstNameAttributeKey": zod_1.z.string(),
    "lastNameAttributeKey": zod_1.z.string(),
    "parentCustomerNamePattern": zod_1.z.string(),
    "tenantNamePattern": zod_1.z.string(),
    "tenantNameStrategy": zod_1.z.enum(["CUSTOM", "DOMAIN", "EMAIL"]),
    "userGroupsNamePattern": zod_1.z.array(zod_1.z.string())
});
exports.OAuth2ClientInfoSchemaSchema = zod_1.z.object({
    "icon": zod_1.z.string(),
    "name": zod_1.z.string(),
    "url": zod_1.z.string()
});
exports.OAuth2ClientRegistrationTemplateSchemaSchema = zod_1.z.object({
    "accessTokenUri": zod_1.z.string(),
    "additionalInfo": exports.JsonNodeSchema,
    "authorizationUri": zod_1.z.string(),
    "clientAuthenticationMethod": zod_1.z.string(),
    "comment": zod_1.z.string(),
    "createdTime": zod_1.z.number(),
    "helpLink": zod_1.z.string(),
    "id": exports.OAuth2ClientRegistrationTemplateIdSchema,
    "jwkSetUri": zod_1.z.string(),
    "loginButtonIcon": zod_1.z.string(),
    "loginButtonLabel": zod_1.z.string(),
    "mapperConfig": exports.OAuth2MapperConfigSchema,
    "name": zod_1.z.string(),
    "providerId": zod_1.z.string(),
    "scope": zod_1.z.array(zod_1.z.string()),
    "userInfoUri": zod_1.z.string(),
    "userNameAttributeName": zod_1.z.string()
});
exports.OAuth2ClientRegistrationTemplateIdSchemaSchema = zod_1.z.object({
    "id": zod_1.z.string()
});
exports.OAuth2CustomMapperConfigSchemaSchema = zod_1.z.object({
    "password": zod_1.z.string(),
    "sendToken": zod_1.z.boolean(),
    "url": zod_1.z.string(),
    "username": zod_1.z.string()
});
exports.OAuth2DomainInfoSchemaSchema = zod_1.z.object({
    "name": zod_1.z.string(),
    "scheme": zod_1.z.enum(["HTTP", "HTTPS", "MIXED"])
});
exports.OAuth2InfoSchemaSchema = zod_1.z.object({
    "enabled": zod_1.z.boolean(),
    "oauth2ParamsInfos": zod_1.z.array(exports.OAuth2ParamsInfoSchema)
});
exports.OAuth2MapperConfigSchemaSchema = zod_1.z.object({
    "activateUser": zod_1.z.boolean(),
    "allowUserCreation": zod_1.z.boolean(),
    "basic": exports.OAuth2BasicMapperConfigSchema,
    "custom": exports.OAuth2CustomMapperConfigSchema,
    "type": zod_1.z.enum(["APPLE", "BASIC", "CUSTOM", "GITHUB"])
});
exports.OAuth2MobileInfoSchemaSchema = zod_1.z.object({
    "appSecret": zod_1.z.string(),
    "pkgName": zod_1.z.string()
});
exports.OAuth2ParamsInfoSchemaSchema = zod_1.z.object({
    "clientRegistrations": zod_1.z.array(exports.OAuth2RegistrationInfoSchema),
    "domainInfos": zod_1.z.array(exports.OAuth2DomainInfoSchema),
    "mobileInfos": zod_1.z.array(exports.OAuth2MobileInfoSchema)
});
exports.OAuth2RegistrationInfoSchemaSchema = zod_1.z.object({
    "accessTokenUri": zod_1.z.string(),
    "additionalInfo": exports.JsonNodeSchema,
    "authorizationUri": zod_1.z.string(),
    "clientAuthenticationMethod": zod_1.z.string(),
    "clientId": zod_1.z.string(),
    "clientSecret": zod_1.z.string(),
    "jwkSetUri": zod_1.z.string(),
    "loginButtonIcon": zod_1.z.string(),
    "loginButtonLabel": zod_1.z.string(),
    "mapperConfig": exports.OAuth2MapperConfigSchema,
    "platforms": zod_1.z.array(zod_1.z.enum(["ANDROID", "IOS", "WEB"])),
    "scope": zod_1.z.array(zod_1.z.string()),
    "userInfoUri": zod_1.z.string(),
    "userNameAttributeName": zod_1.z.string()
});
exports.ObjectAttributesSchemaSchema = zod_1.z.object({
    "dim": zod_1.z.number(),
    "gt": zod_1.z.number(),
    "lt": zod_1.z.number(),
    "pmax": zod_1.z.number(),
    "pmin": zod_1.z.number(),
    "st": zod_1.z.number(),
    "ver": zod_1.z.string()
});
exports.ObjectNodeSchemaSchema = zod_1.z.object({});
exports.OriginatorEntityOwnerUsersFilterSchemaSchema = zod_1.z.object({});
exports.OtaPackageSchemaSchema = zod_1.z.object({
    "id": exports.OtaPackageIdSchema,
    "createdTime": zod_1.z.number(),
    "tenantId": exports.TenantIdSchema,
    "deviceProfileId": exports.DeviceProfileIdSchema,
    "type": zod_1.z.enum(["FIRMWARE", "SOFTWARE"]),
    "title": zod_1.z.string(),
    "version": zod_1.z.string(),
    "tag": zod_1.z.string(),
    "url": zod_1.z.string(),
    "hasData": zod_1.z.boolean(),
    "fileName": zod_1.z.string(),
    "contentType": zod_1.z.string(),
    "checksumAlgorithm": zod_1.z.enum(["CRC32", "MD5", "MURMUR3_128", "MURMUR3_32", "SHA256", "SHA384", "SHA512"]),
    "checksum": zod_1.z.string(),
    "dataSize": zod_1.z.number(),
    "data": exports.ByteBufferSchema,
    "additionalInfo": exports.JsonNodeSchema
});
exports.OtaPackageIdSchemaSchema = zod_1.z.object({
    "id": zod_1.z.string(),
    "entityType": zod_1.z.enum(["OTA_PACKAGE"])
});
exports.OtaPackageInfoSchemaSchema = zod_1.z.object({
    "id": exports.OtaPackageIdSchema,
    "createdTime": zod_1.z.number(),
    "tenantId": exports.TenantIdSchema,
    "deviceProfileId": exports.DeviceProfileIdSchema,
    "type": zod_1.z.enum(["FIRMWARE", "SOFTWARE"]),
    "title": zod_1.z.string(),
    "version": zod_1.z.string(),
    "tag": zod_1.z.string(),
    "url": zod_1.z.string(),
    "hasData": zod_1.z.boolean(),
    "fileName": zod_1.z.string(),
    "contentType": zod_1.z.string(),
    "checksumAlgorithm": zod_1.z.enum(["CRC32", "MD5", "MURMUR3_128", "MURMUR3_32", "SHA256", "SHA384", "SHA512"]),
    "checksum": zod_1.z.string(),
    "dataSize": zod_1.z.number(),
    "additionalInfo": exports.JsonNodeSchema
});
exports.OtherConfigurationSchemaSchema = zod_1.z.object({
    "clientOnlyObserveAfterConnect": zod_1.z.number(),
    "edrxCycle": zod_1.z.number(),
    "fwUpdateResource": zod_1.z.string(),
    "fwUpdateStrategy": zod_1.z.number(),
    "pagingTransmissionWindow": zod_1.z.number(),
    "powerMode": zod_1.z.enum(["DRX", "E_DRX", "PSM"]),
    "psmActivityTimer": zod_1.z.number(),
    "swUpdateResource": zod_1.z.string(),
    "swUpdateStrategy": zod_1.z.number()
});
exports.PSKLwM2MBootstrapServerCredentialSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.PageData_Of_AlarmCommentInfoSchemaSchema = zod_1.z.object({
    "data": zod_1.z.array(exports.AlarmCommentInfoSchema),
    "totalPages": zod_1.z.number(),
    "totalElements": zod_1.z.number(),
    "hasNext": zod_1.z.boolean()
});
exports.PageData_Of_AlarmDataSchemaSchema = zod_1.z.object({
    "data": zod_1.z.array(exports.AlarmDataSchema),
    "totalPages": zod_1.z.number(),
    "totalElements": zod_1.z.number(),
    "hasNext": zod_1.z.boolean()
});
exports.PageData_Of_AlarmInfoSchemaSchema = zod_1.z.object({
    "data": zod_1.z.array(exports.AlarmInfoSchema),
    "totalPages": zod_1.z.number(),
    "totalElements": zod_1.z.number(),
    "hasNext": zod_1.z.boolean()
});
exports.PageData_Of_AssetInfoSchemaSchema = zod_1.z.object({
    "data": zod_1.z.array(exports.AssetInfoSchema),
    "totalPages": zod_1.z.number(),
    "totalElements": zod_1.z.number(),
    "hasNext": zod_1.z.boolean()
});
exports.PageData_Of_AssetProfileInfoSchemaSchema = zod_1.z.object({
    "data": zod_1.z.array(exports.AssetProfileInfoSchema),
    "totalPages": zod_1.z.number(),
    "totalElements": zod_1.z.number(),
    "hasNext": zod_1.z.boolean()
});
exports.PageData_Of_AssetProfileSchemaSchema = zod_1.z.object({
    "data": zod_1.z.array(exports.AssetProfileSchema),
    "totalPages": zod_1.z.number(),
    "totalElements": zod_1.z.number(),
    "hasNext": zod_1.z.boolean()
});
exports.PageData_Of_AssetSchemaSchema = zod_1.z.object({
    "data": zod_1.z.array(exports.AssetSchema),
    "totalPages": zod_1.z.number(),
    "totalElements": zod_1.z.number(),
    "hasNext": zod_1.z.boolean()
});
exports.PageData_Of_AuditLogSchemaSchema = zod_1.z.object({
    "data": zod_1.z.array(exports.AuditLogSchema),
    "totalPages": zod_1.z.number(),
    "totalElements": zod_1.z.number(),
    "hasNext": zod_1.z.boolean()
});
exports.PageData_Of_BlobEntityWithCustomerInfoSchemaSchema = zod_1.z.object({
    "data": zod_1.z.array(exports.BlobEntityWithCustomerInfoSchema),
    "totalPages": zod_1.z.number(),
    "totalElements": zod_1.z.number(),
    "hasNext": zod_1.z.boolean()
});
exports.PageData_Of_ContactBased_object_SchemaSchema = zod_1.z.object({
    "data": zod_1.z.array(exports.ContactBased_Of_objectSchema),
    "totalPages": zod_1.z.number(),
    "totalElements": zod_1.z.number(),
    "hasNext": zod_1.z.boolean()
});
exports.PageData_Of_ConverterSchemaSchema = zod_1.z.object({
    "data": zod_1.z.array(exports.ConverterSchema),
    "totalPages": zod_1.z.number(),
    "totalElements": zod_1.z.number(),
    "hasNext": zod_1.z.boolean()
});
exports.PageData_Of_CustomerInfoSchemaSchema = zod_1.z.object({
    "data": zod_1.z.array(exports.CustomerInfoSchema),
    "totalPages": zod_1.z.number(),
    "totalElements": zod_1.z.number(),
    "hasNext": zod_1.z.boolean()
});
exports.PageData_Of_CustomerSchemaSchema = zod_1.z.object({
    "data": zod_1.z.array(exports.CustomerSchema),
    "totalPages": zod_1.z.number(),
    "totalElements": zod_1.z.number(),
    "hasNext": zod_1.z.boolean()
});
exports.PageData_Of_DashboardInfoSchemaSchema = zod_1.z.object({
    "data": zod_1.z.array(exports.DashboardInfoSchema),
    "totalPages": zod_1.z.number(),
    "totalElements": zod_1.z.number(),
    "hasNext": zod_1.z.boolean()
});
exports.PageData_Of_DeviceInfoSchemaSchema = zod_1.z.object({
    "data": zod_1.z.array(exports.DeviceInfoSchema),
    "totalPages": zod_1.z.number(),
    "totalElements": zod_1.z.number(),
    "hasNext": zod_1.z.boolean()
});
exports.PageData_Of_DeviceProfileInfoSchemaSchema = zod_1.z.object({
    "data": zod_1.z.array(exports.DeviceProfileInfoSchema),
    "totalPages": zod_1.z.number(),
    "totalElements": zod_1.z.number(),
    "hasNext": zod_1.z.boolean()
});
exports.PageData_Of_DeviceProfileSchemaSchema = zod_1.z.object({
    "data": zod_1.z.array(exports.DeviceProfileSchema),
    "totalPages": zod_1.z.number(),
    "totalElements": zod_1.z.number(),
    "hasNext": zod_1.z.boolean()
});
exports.PageData_Of_DeviceSchemaSchema = zod_1.z.object({
    "data": zod_1.z.array(exports.DeviceSchema),
    "totalPages": zod_1.z.number(),
    "totalElements": zod_1.z.number(),
    "hasNext": zod_1.z.boolean()
});
exports.PageData_Of_EdgeEventSchemaSchema = zod_1.z.object({
    "data": zod_1.z.array(exports.EdgeEventSchema),
    "totalPages": zod_1.z.number(),
    "totalElements": zod_1.z.number(),
    "hasNext": zod_1.z.boolean()
});
exports.PageData_Of_EdgeInfoSchemaSchema = zod_1.z.object({
    "data": zod_1.z.array(exports.EdgeInfoSchema),
    "totalPages": zod_1.z.number(),
    "totalElements": zod_1.z.number(),
    "hasNext": zod_1.z.boolean()
});
exports.PageData_Of_EdgeSchemaSchema = zod_1.z.object({
    "data": zod_1.z.array(exports.EdgeSchema),
    "totalPages": zod_1.z.number(),
    "totalElements": zod_1.z.number(),
    "hasNext": zod_1.z.boolean()
});
exports.PageData_Of_EntityDataSchemaSchema = zod_1.z.object({
    "data": zod_1.z.array(exports.EntityDataSchema),
    "totalPages": zod_1.z.number(),
    "totalElements": zod_1.z.number(),
    "hasNext": zod_1.z.boolean()
});
exports.PageData_Of_EntityGroupInfoSchemaSchema = zod_1.z.object({
    "data": zod_1.z.array(exports.EntityGroupInfoSchema),
    "totalPages": zod_1.z.number(),
    "totalElements": zod_1.z.number(),
    "hasNext": zod_1.z.boolean()
});
exports.PageData_Of_EntityInfoSchemaSchema = zod_1.z.object({
    "data": zod_1.z.array(exports.EntityInfoSchema),
    "totalPages": zod_1.z.number(),
    "totalElements": zod_1.z.number(),
    "hasNext": zod_1.z.boolean()
});
exports.PageData_Of_EntitySubtypeSchemaSchema = zod_1.z.object({
    "data": zod_1.z.array(exports.EntitySubtypeSchema),
    "totalPages": zod_1.z.number(),
    "totalElements": zod_1.z.number(),
    "hasNext": zod_1.z.boolean()
});
exports.PageData_Of_EntityVersionSchemaSchema = zod_1.z.object({
    "data": zod_1.z.array(exports.EntityVersionSchema),
    "totalPages": zod_1.z.number(),
    "totalElements": zod_1.z.number(),
    "hasNext": zod_1.z.boolean()
});
exports.PageData_Of_EntityViewInfoSchemaSchema = zod_1.z.object({
    "data": zod_1.z.array(exports.EntityViewInfoSchema),
    "totalPages": zod_1.z.number(),
    "totalElements": zod_1.z.number(),
    "hasNext": zod_1.z.boolean()
});
exports.PageData_Of_EntityViewSchemaSchema = zod_1.z.object({
    "data": zod_1.z.array(exports.EntityViewSchema),
    "totalPages": zod_1.z.number(),
    "totalElements": zod_1.z.number(),
    "hasNext": zod_1.z.boolean()
});
exports.PageData_Of_EventInfoSchemaSchema = zod_1.z.object({
    "data": zod_1.z.array(exports.EventInfoSchema),
    "totalPages": zod_1.z.number(),
    "totalElements": zod_1.z.number(),
    "hasNext": zod_1.z.boolean()
});
exports.PageData_Of_IntegrationInfoSchemaSchema = zod_1.z.object({
    "data": zod_1.z.array(exports.IntegrationInfoSchema),
    "totalPages": zod_1.z.number(),
    "totalElements": zod_1.z.number(),
    "hasNext": zod_1.z.boolean()
});
exports.PageData_Of_IntegrationSchemaSchema = zod_1.z.object({
    "data": zod_1.z.array(exports.IntegrationSchema),
    "totalPages": zod_1.z.number(),
    "totalElements": zod_1.z.number(),
    "hasNext": zod_1.z.boolean()
});
exports.PageData_Of_NotificationRequestInfoSchemaSchema = zod_1.z.object({
    "data": zod_1.z.array(exports.NotificationRequestInfoSchema),
    "totalPages": zod_1.z.number(),
    "totalElements": zod_1.z.number(),
    "hasNext": zod_1.z.boolean()
});
exports.PageData_Of_NotificationRuleInfoSchemaSchema = zod_1.z.object({
    "data": zod_1.z.array(exports.NotificationRuleInfoSchema),
    "totalPages": zod_1.z.number(),
    "totalElements": zod_1.z.number(),
    "hasNext": zod_1.z.boolean()
});
exports.PageData_Of_NotificationTargetSchemaSchema = zod_1.z.object({
    "data": zod_1.z.array(exports.NotificationTargetSchema),
    "totalPages": zod_1.z.number(),
    "totalElements": zod_1.z.number(),
    "hasNext": zod_1.z.boolean()
});
exports.PageData_Of_NotificationTemplateSchemaSchema = zod_1.z.object({
    "data": zod_1.z.array(exports.NotificationTemplateSchema),
    "totalPages": zod_1.z.number(),
    "totalElements": zod_1.z.number(),
    "hasNext": zod_1.z.boolean()
});
exports.PageData_Of_NotificationSchemaSchema = zod_1.z.object({
    "data": zod_1.z.array(exports.NotificationSchema),
    "totalPages": zod_1.z.number(),
    "totalElements": zod_1.z.number(),
    "hasNext": zod_1.z.boolean()
});
exports.PageData_Of_OtaPackageInfoSchemaSchema = zod_1.z.object({
    "data": zod_1.z.array(exports.OtaPackageInfoSchema),
    "totalPages": zod_1.z.number(),
    "totalElements": zod_1.z.number(),
    "hasNext": zod_1.z.boolean()
});
exports.PageData_Of_QueueSchemaSchema = zod_1.z.object({
    "data": zod_1.z.array(exports.QueueSchema),
    "totalPages": zod_1.z.number(),
    "totalElements": zod_1.z.number(),
    "hasNext": zod_1.z.boolean()
});
exports.PageData_Of_RoleSchemaSchema = zod_1.z.object({
    "data": zod_1.z.array(exports.RoleSchema),
    "totalPages": zod_1.z.number(),
    "totalElements": zod_1.z.number(),
    "hasNext": zod_1.z.boolean()
});
exports.PageData_Of_RuleChainSchemaSchema = zod_1.z.object({
    "data": zod_1.z.array(exports.RuleChainSchema),
    "totalPages": zod_1.z.number(),
    "totalElements": zod_1.z.number(),
    "hasNext": zod_1.z.boolean()
});
exports.PageData_Of_SchedulerEventInfoSchemaSchema = zod_1.z.object({
    "data": zod_1.z.array(exports.SchedulerEventInfoSchema),
    "totalPages": zod_1.z.number(),
    "totalElements": zod_1.z.number(),
    "hasNext": zod_1.z.boolean()
});
exports.PageData_Of_ShortEntityViewSchemaSchema = zod_1.z.object({
    "data": zod_1.z.array(exports.ShortEntityViewSchema),
    "totalPages": zod_1.z.number(),
    "totalElements": zod_1.z.number(),
    "hasNext": zod_1.z.boolean()
});
exports.PageData_Of_TbResourceInfoSchemaSchema = zod_1.z.object({
    "data": zod_1.z.array(exports.TbResourceInfoSchema),
    "totalPages": zod_1.z.number(),
    "totalElements": zod_1.z.number(),
    "hasNext": zod_1.z.boolean()
});
exports.PageData_Of_TenantInfoSchemaSchema = zod_1.z.object({
    "data": zod_1.z.array(exports.TenantInfoSchema),
    "totalPages": zod_1.z.number(),
    "totalElements": zod_1.z.number(),
    "hasNext": zod_1.z.boolean()
});
exports.PageData_Of_TenantProfileSchemaSchema = zod_1.z.object({
    "data": zod_1.z.array(exports.TenantProfileSchema),
    "totalPages": zod_1.z.number(),
    "totalElements": zod_1.z.number(),
    "hasNext": zod_1.z.boolean()
});
exports.PageData_Of_TenantSchemaSchema = zod_1.z.object({
    "data": zod_1.z.array(exports.TenantSchema),
    "totalPages": zod_1.z.number(),
    "totalElements": zod_1.z.number(),
    "hasNext": zod_1.z.boolean()
});
exports.PageData_Of_UserEmailInfoSchemaSchema = zod_1.z.object({
    "data": zod_1.z.array(exports.UserEmailInfoSchema),
    "totalPages": zod_1.z.number(),
    "totalElements": zod_1.z.number(),
    "hasNext": zod_1.z.boolean()
});
exports.PageData_Of_UserInfoSchemaSchema = zod_1.z.object({
    "data": zod_1.z.array(exports.UserInfoSchema),
    "totalPages": zod_1.z.number(),
    "totalElements": zod_1.z.number(),
    "hasNext": zod_1.z.boolean()
});
exports.PageData_Of_UserSchemaSchema = zod_1.z.object({
    "data": zod_1.z.array(exports.UserSchema),
    "totalPages": zod_1.z.number(),
    "totalElements": zod_1.z.number(),
    "hasNext": zod_1.z.boolean()
});
exports.PageData_Of_WidgetTypeInfoSchemaSchema = zod_1.z.object({
    "data": zod_1.z.array(exports.WidgetTypeInfoSchema),
    "totalPages": zod_1.z.number(),
    "totalElements": zod_1.z.number(),
    "hasNext": zod_1.z.boolean()
});
exports.PageData_Of_WidgetsBundleSchemaSchema = zod_1.z.object({
    "data": zod_1.z.array(exports.WidgetsBundleSchema),
    "totalPages": zod_1.z.number(),
    "totalElements": zod_1.z.number(),
    "hasNext": zod_1.z.boolean()
});
exports.PaletteSchemaSchema = zod_1.z.object({
    "type": zod_1.z.string(),
    "extends": zod_1.z.string(),
    "colors": zod_1.z.record(zod_1.z.string(), zod_1.z.string())
});
exports.PaletteSettingsSchemaSchema = zod_1.z.object({
    "primaryPalette": exports.PaletteSchema,
    "accentPalette": exports.PaletteSchema
});
exports.PlatformTwoFaSettingsSchemaSchema = zod_1.z.object({
    "maxVerificationFailuresBeforeUserLockout": zod_1.z.number(),
    "minVerificationCodeSendPeriod": zod_1.z.number(),
    "providers": zod_1.z.array(exports.TwoFaProviderConfigSchema),
    "totalAllowedTimeForVerification": zod_1.z.number(),
    "useSystemTwoFactorAuthSettings": zod_1.z.boolean(),
    "verificationCodeCheckRateLimit": zod_1.z.string()
});
exports.PlatformUsersNotificationTargetConfigSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.PowerSavingConfigurationSchemaSchema = zod_1.z.object({
    "edrxCycle": zod_1.z.number(),
    "pagingTransmissionWindow": zod_1.z.number(),
    "powerMode": zod_1.z.enum(["DRX", "E_DRX", "PSM"]),
    "psmActivityTimer": zod_1.z.number()
});
exports.ProcessingStrategySchemaSchema = zod_1.z.object({
    "failurePercentage": zod_1.z.number(),
    "maxPauseBetweenRetries": zod_1.z.number(),
    "pauseBetweenRetries": zod_1.z.number(),
    "retries": zod_1.z.number(),
    "type": zod_1.z.enum(["RETRY_ALL", "RETRY_FAILED", "RETRY_FAILED_AND_TIMED_OUT", "RETRY_TIMED_OUT", "SKIP_ALL_FAILURES", "SKIP_ALL_FAILURES_AND_TIMED_OUT"])
});
exports.ProtoTransportPayloadConfigurationSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.QueueSchemaSchema = zod_1.z.object({
    "additionalInfo": exports.JsonNodeSchema,
    "consumerPerPartition": zod_1.z.boolean(),
    "createdTime": zod_1.z.number(),
    "id": exports.QueueIdSchema,
    "name": zod_1.z.string(),
    "packProcessingTimeout": zod_1.z.number(),
    "partitions": zod_1.z.number(),
    "pollInterval": zod_1.z.number(),
    "processingStrategy": exports.ProcessingStrategySchema,
    "submitStrategy": exports.SubmitStrategySchema,
    "tenantId": exports.TenantIdSchema,
    "topic": zod_1.z.string()
});
exports.QueueIdSchemaSchema = zod_1.z.object({
    "id": zod_1.z.string(),
    "entityType": zod_1.z.enum(["QUEUE"])
});
exports.RPKLwM2MBootstrapServerCredentialSchemaSchema = zod_1.z.object({
    "shortServerId": zod_1.z.number(),
    "bootstrapServerIs": zod_1.z.boolean(),
    "host": zod_1.z.string(),
    "port": zod_1.z.number(),
    "clientHoldOffTime": zod_1.z.number(),
    "serverPublicKey": zod_1.z.string(),
    "serverCertificate": zod_1.z.string(),
    "bootstrapServerAccountTimeout": zod_1.z.number(),
    "lifetime": zod_1.z.number(),
    "defaultMinPeriod": zod_1.z.number(),
    "notifIfDisabled": zod_1.z.boolean(),
    "binding": zod_1.z.string()
});
exports.RateLimitsNotificationRuleTriggerConfigSchemaSchema = zod_1.z.object({
    "apis": zod_1.z.array(zod_1.z.enum(["CASSANDRA_QUERIES", "ENTITY_EXPORT", "ENTITY_IMPORT", "INTEGRATION_MSGS_PER_DEVICE", "INTEGRATION_MSGS_PER_TENANT", "NOTIFICATION_REQUESTS", "NOTIFICATION_REQUESTS_PER_RULE", "PASSWORD_RESET", "REPORTS", "REST_REQUESTS_PER_CUSTOMER", "REST_REQUESTS_PER_TENANT", "TRANSPORT_MESSAGES_PER_DEVICE", "TRANSPORT_MESSAGES_PER_TENANT", "TWO_FA_VERIFICATION_CODE_CHECK", "TWO_FA_VERIFICATION_CODE_SEND", "WS_UPDATES_PER_SESSION"])),
    "triggerType": zod_1.z.enum(["ALARM", "ALARM_ASSIGNMENT", "ALARM_COMMENT", "API_USAGE_LIMIT", "DEVICE_ACTIVITY", "ENTITIES_LIMIT", "ENTITY_ACTION", "INTEGRATION_LIFECYCLE_EVENT", "NEW_PLATFORM_VERSION", "RATE_LIMITS", "RULE_ENGINE_COMPONENT_LIFECYCLE_EVENT"])
});
exports.RawDataEventFilterSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.RelationEntityTypeFilterSchemaSchema = zod_1.z.object({
    "relationType": zod_1.z.string(),
    "entityTypes": zod_1.z.array(zod_1.z.enum(["ALARM", "API_USAGE_STATE", "ASSET", "ASSET_PROFILE", "BLOB_ENTITY", "CONVERTER", "CUSTOMER", "DASHBOARD", "DEVICE", "DEVICE_PROFILE", "EDGE", "ENTITY_GROUP", "ENTITY_VIEW", "GROUP_PERMISSION", "INTEGRATION", "NOTIFICATION", "NOTIFICATION_REQUEST", "NOTIFICATION_RULE", "NOTIFICATION_TARGET", "NOTIFICATION_TEMPLATE", "OTA_PACKAGE", "QUEUE", "ROLE", "RPC", "RULE_CHAIN", "RULE_NODE", "SCHEDULER_EVENT", "TB_RESOURCE", "TENANT", "TENANT_PROFILE", "USER", "WIDGETS_BUNDLE", "WIDGET_TYPE"]))
});
exports.RelationsQueryFilterSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.RelationsSearchParametersSchemaSchema = zod_1.z.object({
    "rootId": zod_1.z.string(),
    "rootType": zod_1.z.enum(["ALARM", "API_USAGE_STATE", "ASSET", "ASSET_PROFILE", "BLOB_ENTITY", "CONVERTER", "CUSTOMER", "DASHBOARD", "DEVICE", "DEVICE_PROFILE", "EDGE", "ENTITY_GROUP", "ENTITY_VIEW", "GROUP_PERMISSION", "INTEGRATION", "NOTIFICATION", "NOTIFICATION_REQUEST", "NOTIFICATION_RULE", "NOTIFICATION_TARGET", "NOTIFICATION_TEMPLATE", "OTA_PACKAGE", "QUEUE", "ROLE", "RPC", "RULE_CHAIN", "RULE_NODE", "SCHEDULER_EVENT", "TB_RESOURCE", "TENANT", "TENANT_PROFILE", "USER", "WIDGETS_BUNDLE", "WIDGET_TYPE"]),
    "direction": zod_1.z.enum(["FROM", "TO"]),
    "relationTypeGroup": zod_1.z.enum(["COMMON", "DASHBOARD", "EDGE", "EDGE_AUTO_ASSIGN_RULE_CHAIN", "FROM_ENTITY_GROUP", "RULE_CHAIN", "RULE_NODE"]),
    "maxLevel": zod_1.z.number(),
    "fetchLastLevelOnly": zod_1.z.boolean()
});
exports.RepeatingAlarmConditionSpecSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.ReportConfigSchemaSchema = zod_1.z.object({
    "baseUrl": zod_1.z.string(),
    "dashboardId": zod_1.z.string(),
    "namePattern": zod_1.z.string(),
    "state": zod_1.z.string(),
    "timewindow": exports.JsonNodeSchema,
    "timezone": zod_1.z.string(),
    "type": zod_1.z.string(),
    "useCurrentUserCredentials": zod_1.z.boolean(),
    "useDashboardTimewindow": zod_1.z.boolean(),
    "userId": zod_1.z.string()
});
exports.RepositorySettingsSchemaSchema = zod_1.z.object({
    "authMethod": zod_1.z.enum(["PRIVATE_KEY", "USERNAME_PASSWORD"]),
    "defaultBranch": zod_1.z.string(),
    "password": zod_1.z.string(),
    "privateKey": zod_1.z.string(),
    "privateKeyFileName": zod_1.z.string(),
    "privateKeyPassword": zod_1.z.string(),
    "readOnly": zod_1.z.boolean(),
    "repositoryUri": zod_1.z.string(),
    "showMergeCommits": zod_1.z.boolean(),
    "username": zod_1.z.string()
});
exports.RepositorySettingsInfoSchemaSchema = zod_1.z.object({
    "configured": zod_1.z.boolean(),
    "readOnly": zod_1.z.boolean()
});
exports.ResetPasswordEmailRequestSchemaSchema = zod_1.z.object({
    "email": zod_1.z.string()
});
exports.ResetPasswordRequestSchemaSchema = zod_1.z.object({
    "resetToken": zod_1.z.string(),
    "password": zod_1.z.string()
});
exports.ResourceSchemaSchema = zod_1.z.object({
    "description": zod_1.z.string(),
    "file": zod_1.z.string(),
    "filename": zod_1.z.string(),
    "inputStream": exports.InputStreamSchema,
    "open": zod_1.z.boolean(),
    "readable": zod_1.z.boolean(),
    "uri": zod_1.z.string(),
    "url": zod_1.z.string()
});
exports.ResponseEntitySchemaSchema = zod_1.z.object({
    "body": zod_1.z.object({}),
    "statusCode": zod_1.z.enum(["ACCEPTED", "ALREADY_REPORTED", "BAD_GATEWAY", "BAD_REQUEST", "BANDWIDTH_LIMIT_EXCEEDED", "CHECKPOINT", "CONFLICT", "CONTINUE", "CREATED", "DESTINATION_LOCKED", "EXPECTATION_FAILED", "FAILED_DEPENDENCY", "FORBIDDEN", "FOUND", "GATEWAY_TIMEOUT", "GONE", "HTTP_VERSION_NOT_SUPPORTED", "IM_USED", "INSUFFICIENT_SPACE_ON_RESOURCE", "INSUFFICIENT_STORAGE", "INTERNAL_SERVER_ERROR", "I_AM_A_TEAPOT", "LENGTH_REQUIRED", "LOCKED", "LOOP_DETECTED", "METHOD_FAILURE", "METHOD_NOT_ALLOWED", "MOVED_PERMANENTLY", "MOVED_TEMPORARILY", "MULTIPLE_CHOICES", "MULTI_STATUS", "NETWORK_AUTHENTICATION_REQUIRED", "NON_AUTHORITATIVE_INFORMATION", "NOT_ACCEPTABLE", "NOT_EXTENDED", "NOT_FOUND", "NOT_IMPLEMENTED", "NOT_MODIFIED", "NO_CONTENT", "OK", "PARTIAL_CONTENT", "PAYLOAD_TOO_LARGE", "PAYMENT_REQUIRED", "PERMANENT_REDIRECT", "PRECONDITION_FAILED", "PRECONDITION_REQUIRED", "PROCESSING", "PROXY_AUTHENTICATION_REQUIRED", "REQUESTED_RANGE_NOT_SATISFIABLE", "REQUEST_ENTITY_TOO_LARGE", "REQUEST_HEADER_FIELDS_TOO_LARGE", "REQUEST_TIMEOUT", "REQUEST_URI_TOO_LONG", "RESET_CONTENT", "SEE_OTHER", "SERVICE_UNAVAILABLE", "SWITCHING_PROTOCOLS", "TEMPORARY_REDIRECT", "TOO_EARLY", "TOO_MANY_REQUESTS", "UNAUTHORIZED", "UNAVAILABLE_FOR_LEGAL_REASONS", "UNPROCESSABLE_ENTITY", "UNSUPPORTED_MEDIA_TYPE", "UPGRADE_REQUIRED", "URI_TOO_LONG", "USE_PROXY", "VARIANT_ALSO_NEGOTIATES"]),
    "statusCodeValue": zod_1.z.number()
});
exports.RoleSchemaSchema = zod_1.z.object({
    "id": exports.RoleIdSchema,
    "createdTime": zod_1.z.number(),
    "tenantId": exports.TenantIdSchema,
    "customerId": exports.CustomerIdSchema,
    "ownerId": exports.EntityIdSchema,
    "name": zod_1.z.string(),
    "type": zod_1.z.enum(["GENERIC", "GROUP"]),
    "permissions": exports.JsonNodeSchema,
    "additionalInfo": exports.JsonNodeSchema
});
exports.RoleIdSchemaSchema = zod_1.z.object({
    "id": zod_1.z.string(),
    "entityType": zod_1.z.enum(["ROLE"])
});
exports.RpcSchemaSchema = zod_1.z.object({
    "id": exports.RpcIdSchema,
    "createdTime": zod_1.z.number(),
    "tenantId": exports.TenantIdSchema,
    "deviceId": exports.DeviceIdSchema,
    "expirationTime": zod_1.z.number(),
    "request": exports.JsonNodeSchema,
    "response": exports.JsonNodeSchema,
    "status": zod_1.z.enum(["DELETED", "DELIVERED", "EXPIRED", "FAILED", "QUEUED", "SENT", "SUCCESSFUL", "TIMEOUT"]),
    "additionalInfo": exports.JsonNodeSchema
});
exports.RpcIdSchemaSchema = zod_1.z.object({
    "id": zod_1.z.string(),
    "entityType": zod_1.z.enum(["RPC"])
});
exports.RuleChainSchemaSchema = zod_1.z.object({
    "additionalInfo": exports.JsonNodeSchema,
    "id": exports.RuleChainIdSchema,
    "createdTime": zod_1.z.number(),
    "tenantId": exports.TenantIdSchema,
    "name": zod_1.z.string(),
    "type": zod_1.z.enum(["CORE", "EDGE"]),
    "firstRuleNodeId": exports.RuleNodeIdSchema,
    "root": zod_1.z.boolean(),
    "debugMode": zod_1.z.boolean(),
    "configuration": exports.JsonNodeSchema
});
exports.RuleChainConnectionInfoSchemaSchema = zod_1.z.object({
    "fromIndex": zod_1.z.number(),
    "targetRuleChainId": exports.RuleChainIdSchema,
    "additionalInfo": exports.JsonNodeSchema,
    "type": zod_1.z.string()
});
exports.RuleChainDataSchemaSchema = zod_1.z.object({
    "ruleChains": zod_1.z.array(exports.RuleChainSchema),
    "metadata": zod_1.z.array(exports.RuleChainMetaDataSchema)
});
exports.RuleChainDebugEventFilterSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.RuleChainExportDataSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.RuleChainIdSchemaSchema = zod_1.z.object({
    "id": zod_1.z.string(),
    "entityType": zod_1.z.enum(["RULE_CHAIN"])
});
exports.RuleChainImportResultSchemaSchema = zod_1.z.object({
    "error": zod_1.z.string(),
    "ruleChainId": exports.RuleChainIdSchema,
    "ruleChainName": zod_1.z.string(),
    "updated": zod_1.z.boolean()
});
exports.RuleChainMetaDataSchemaSchema = zod_1.z.object({
    "ruleChainId": exports.RuleChainIdSchema,
    "firstNodeIndex": zod_1.z.number(),
    "nodes": zod_1.z.array(exports.RuleNodeSchema),
    "connections": zod_1.z.array(exports.NodeConnectionInfoSchema),
    "ruleChainConnections": zod_1.z.array(exports.RuleChainConnectionInfoSchema)
});
exports.RuleChainOutputLabelsUsageSchemaSchema = zod_1.z.object({
    "ruleChainId": exports.RuleChainIdSchema,
    "ruleNodeId": exports.RuleNodeIdSchema,
    "ruleChainName": zod_1.z.string(),
    "ruleNodeName": zod_1.z.string(),
    "labels": zod_1.z.array(zod_1.z.string())
});
exports.RuleEngineComponentLifecycleEventNotificationRuleTriggerConfigSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.RuleNodeSchemaSchema = zod_1.z.object({
    "externalId": exports.RuleNodeIdSchema,
    "id": exports.RuleNodeIdSchema,
    "createdTime": zod_1.z.number(),
    "ruleChainId": exports.RuleChainIdSchema,
    "type": zod_1.z.string(),
    "name": zod_1.z.string(),
    "debugMode": zod_1.z.boolean(),
    "singletonMode": zod_1.z.boolean(),
    "configurationVersion": zod_1.z.number(),
    "configuration": exports.JsonNodeSchema,
    "additionalInfo": exports.JsonNodeSchema
});
exports.RuleNodeDebugEventFilterSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.RuleNodeIdSchemaSchema = zod_1.z.object({
    "id": zod_1.z.string(),
    "entityType": zod_1.z.enum(["RULE_NODE"])
});
exports.SaveDeviceWithCredentialsRequestSchemaSchema = zod_1.z.object({
    "device": exports.DeviceSchema,
    "credentials": exports.DeviceCredentialsSchema
});
exports.SaveOtaPackageInfoRequestSchemaSchema = zod_1.z.object({
    "id": exports.OtaPackageIdSchema,
    "createdTime": zod_1.z.number(),
    "tenantId": exports.TenantIdSchema,
    "deviceProfileId": exports.DeviceProfileIdSchema,
    "type": zod_1.z.enum(["FIRMWARE", "SOFTWARE"]),
    "title": zod_1.z.string(),
    "version": zod_1.z.string(),
    "tag": zod_1.z.string(),
    "url": zod_1.z.string(),
    "hasData": zod_1.z.boolean(),
    "fileName": zod_1.z.string(),
    "contentType": zod_1.z.string(),
    "checksumAlgorithm": zod_1.z.enum(["CRC32", "MD5", "MURMUR3_128", "MURMUR3_32", "SHA256", "SHA384", "SHA512"]),
    "checksum": zod_1.z.string(),
    "dataSize": zod_1.z.number(),
    "usesUrl": zod_1.z.boolean(),
    "additionalInfo": exports.JsonNodeSchema
});
exports.SchedulerEventSchemaSchema = zod_1.z.object({
    "id": exports.SchedulerEventIdSchema,
    "createdTime": zod_1.z.number(),
    "tenantId": exports.TenantIdSchema,
    "customerId": exports.CustomerIdSchema,
    "originatorId": exports.EntityIdSchema,
    "ownerId": exports.EntityIdSchema,
    "name": zod_1.z.string(),
    "type": zod_1.z.string(),
    "schedule": exports.JsonNodeSchema,
    "configuration": exports.JsonNodeSchema,
    "additionalInfo": exports.JsonNodeSchema
});
exports.SchedulerEventFilterSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.SchedulerEventIdSchemaSchema = zod_1.z.object({
    "id": zod_1.z.string(),
    "entityType": zod_1.z.enum(["SCHEDULER_EVENT"])
});
exports.SchedulerEventInfoSchemaSchema = zod_1.z.object({
    "id": exports.SchedulerEventIdSchema,
    "createdTime": zod_1.z.number(),
    "tenantId": exports.TenantIdSchema,
    "customerId": exports.CustomerIdSchema,
    "originatorId": exports.EntityIdSchema,
    "ownerId": exports.EntityIdSchema,
    "name": zod_1.z.string(),
    "type": zod_1.z.string(),
    "schedule": exports.JsonNodeSchema,
    "additionalInfo": exports.JsonNodeSchema
});
exports.SchedulerEventWithCustomerInfoSchemaSchema = zod_1.z.object({
    "id": exports.SchedulerEventIdSchema,
    "createdTime": zod_1.z.number(),
    "tenantId": exports.TenantIdSchema,
    "customerId": exports.CustomerIdSchema,
    "originatorId": exports.EntityIdSchema,
    "ownerId": exports.EntityIdSchema,
    "name": zod_1.z.string(),
    "type": zod_1.z.string(),
    "schedule": exports.JsonNodeSchema,
    "additionalInfo": exports.JsonNodeSchema,
    "customerTitle": zod_1.z.string(),
    "customerIsPublic": zod_1.z.object({})
});
exports.SecuritySettingsSchemaSchema = zod_1.z.object({
    "passwordPolicy": exports.UserPasswordPolicySchema,
    "maxFailedLoginAttempts": zod_1.z.number(),
    "userLockoutNotificationEmail": zod_1.z.string()
});
exports.SelfRegistrationParamsSchemaSchema = zod_1.z.object({
    "adminSettingsId": zod_1.z.string(),
    "signUpTextMessage": zod_1.z.string(),
    "captchaSiteKey": zod_1.z.string(),
    "captchaVersion": zod_1.z.string(),
    "captchaAction": zod_1.z.string(),
    "showPrivacyPolicy": zod_1.z.boolean(),
    "showTermsOfUse": zod_1.z.boolean(),
    "domainName": zod_1.z.string(),
    "captchaSecretKey": zod_1.z.string(),
    "privacyPolicy": zod_1.z.string(),
    "termsOfUse": zod_1.z.string(),
    "notificationEmail": zod_1.z.string(),
    "defaultDashboardId": zod_1.z.string(),
    "defaultDashboardFullscreen": zod_1.z.boolean(),
    "permissions": zod_1.z.array(exports.GroupPermissionSchema),
    "pkgName": zod_1.z.string(),
    "appSecret": zod_1.z.string(),
    "appScheme": zod_1.z.string(),
    "appHost": zod_1.z.string()
});
exports.ShareGroupRequestSchemaSchema = zod_1.z.object({
    "allUserGroup": zod_1.z.boolean(),
    "ownerId": exports.EntityIdSchema,
    "userGroupId": exports.EntityGroupIdSchema,
    "readElseWrite": zod_1.z.boolean(),
    "roleIds": zod_1.z.array(exports.RoleIdSchema)
});
exports.SharedAttributesSettingSnmpCommunicationConfigSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.ShortCustomerInfoSchemaSchema = zod_1.z.object({
    "public": zod_1.z.boolean(),
    "customerId": exports.CustomerIdSchema,
    "title": zod_1.z.string()
});
exports.ShortEntityViewSchemaSchema = zod_1.z.object({
    "id": exports.EntityIdSchema,
    "name": zod_1.z.string()
});
exports.SignUpRequestSchemaSchema = zod_1.z.object({
    "firstName": zod_1.z.string(),
    "lastName": zod_1.z.string(),
    "email": zod_1.z.string(),
    "password": zod_1.z.string(),
    "recaptchaResponse": zod_1.z.string(),
    "pkgName": zod_1.z.string(),
    "appSecret": zod_1.z.string()
});
exports.SignUpSelfRegistrationParamsSchemaSchema = zod_1.z.object({
    "signUpTextMessage": zod_1.z.string(),
    "captchaSiteKey": zod_1.z.string(),
    "captchaVersion": zod_1.z.string(),
    "captchaAction": zod_1.z.string(),
    "showPrivacyPolicy": zod_1.z.boolean(),
    "showTermsOfUse": zod_1.z.boolean()
});
exports.SimpleAlarmConditionSpecSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.SingleEntityFilterSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.SingleEntityVersionCreateRequestSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.SingleEntityVersionLoadRequestSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.SlackConversationSchemaSchema = zod_1.z.object({
    "email": zod_1.z.string(),
    "id": zod_1.z.string(),
    "name": zod_1.z.string(),
    "title": zod_1.z.string(),
    "type": zod_1.z.enum(["DIRECT", "PRIVATE_CHANNEL", "PUBLIC_CHANNEL"]),
    "wholeName": zod_1.z.string()
});
exports.SlackDeliveryMethodNotificationTemplateSchemaSchema = zod_1.z.object({
    "body": zod_1.z.string(),
    "enabled": zod_1.z.boolean()
});
exports.SlackNotificationDeliveryMethodConfigSchemaSchema = zod_1.z.object({
    "botToken": zod_1.z.string()
});
exports.SlackNotificationTargetConfigSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.SmppSmsProviderConfigurationSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.SmsDeliveryMethodNotificationTemplateSchemaSchema = zod_1.z.object({
    "body": zod_1.z.string(),
    "enabled": zod_1.z.boolean()
});
exports.SmsProviderConfigurationSchemaSchema = zod_1.z.object({});
exports.SmsTwoFaAccountConfigSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.SmsTwoFaProviderConfigSchemaSchema = zod_1.z.object({
    "smsVerificationMessageTemplate": zod_1.z.string(),
    "verificationCodeLifetime": zod_1.z.number()
});
exports.SnmpCommunicationConfigSchemaSchema = zod_1.z.object({
    "spec": zod_1.z.enum(["CLIENT_ATTRIBUTES_QUERYING", "SHARED_ATTRIBUTES_SETTING", "TELEMETRY_QUERYING", "TO_DEVICE_RPC_REQUEST", "TO_SERVER_RPC_REQUEST"])
});
exports.SnmpDeviceProfileTransportConfigurationSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.SnmpDeviceTransportConfigurationSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.SnmpMappingSchemaSchema = zod_1.z.object({
    "dataType": zod_1.z.enum(["BOOLEAN", "DOUBLE", "JSON", "LONG", "STRING"]),
    "key": zod_1.z.string(),
    "oid": zod_1.z.string()
});
exports.SolutionInstallResponseSchemaSchema = zod_1.z.object({
    "dashboardGroupId": exports.EntityGroupIdSchema,
    "dashboardId": exports.DashboardIdSchema,
    "publicId": exports.CustomerIdSchema,
    "mainDashboardPublic": zod_1.z.boolean(),
    "success": zod_1.z.boolean(),
    "details": zod_1.z.string()
});
exports.SpecificTimeScheduleSchemaSchema = zod_1.z.object({
    "daysOfWeek": zod_1.z.array(zod_1.z.number()),
    "dynamicValue": exports.DynamicValue_Of_stringSchema,
    "endsOn": zod_1.z.number(),
    "startsOn": zod_1.z.number(),
    "timezone": zod_1.z.string(),
    "type": zod_1.z.enum(["ANY_TIME", "CUSTOM", "SPECIFIC_TIME"])
});
exports.StarredDashboardInfoSchemaSchema = zod_1.z.object({
    "id": zod_1.z.string(),
    "title": zod_1.z.string(),
    "starredAt": zod_1.z.number()
});
exports.StateEntityOwnerFilterSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.StatisticsEventFilterSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.StringFilterPredicateSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.SubmitStrategySchemaSchema = zod_1.z.object({
    "batchSize": zod_1.z.number(),
    "type": zod_1.z.enum(["BATCH", "BURST", "SEQUENTIAL", "SEQUENTIAL_BY_ORIGINATOR", "SEQUENTIAL_BY_TENANT"])
});
exports.SystemAdministratorsFilterSchemaSchema = zod_1.z.object({});
exports.SystemInfoSchemaSchema = zod_1.z.object({
    "monolith": zod_1.z.boolean(),
    "systemData": zod_1.z.array(exports.SystemInfoDataSchema)
});
exports.SystemInfoDataSchemaSchema = zod_1.z.object({
    "serviceId": zod_1.z.string(),
    "serviceType": zod_1.z.string(),
    "cpuUsage": zod_1.z.number(),
    "cpuCount": zod_1.z.number(),
    "memoryUsage": zod_1.z.number(),
    "totalMemory": zod_1.z.number(),
    "discUsage": zod_1.z.number(),
    "totalDiscSpace": zod_1.z.number()
});
exports.TbImageDeleteResultSchemaSchema = zod_1.z.object({
    "references": zod_1.z.record(zod_1.z.string(), zod_1.z.array(exports.HasId_Of_objectSchema)),
    "success": zod_1.z.boolean(),
    "whiteLabelingList": zod_1.z.array(exports.WhiteLabelingSchema)
});
exports.TbResourceSchemaSchema = zod_1.z.object({
    "descriptor": exports.JsonNodeSchema,
    "link": zod_1.z.string(),
    "name": zod_1.z.string(),
    "preview": zod_1.z.string(),
    "public": zod_1.z.boolean(),
    "publicLink": zod_1.z.string(),
    "publicResourceKey": zod_1.z.string(),
    "id": exports.TbResourceIdSchema,
    "createdTime": zod_1.z.number(),
    "tenantId": exports.TenantIdSchema,
    "customerId": exports.CustomerIdSchema,
    "title": zod_1.z.string(),
    "resourceType": zod_1.z.enum(["IMAGE", "JKS", "JS_MODULE", "LWM2M_MODEL", "PKCS_12"]),
    "resourceKey": zod_1.z.string(),
    "etag": zod_1.z.string(),
    "fileName": zod_1.z.string(),
    "data": zod_1.z.string()
});
exports.TbResourceIdSchemaSchema = zod_1.z.object({
    "id": zod_1.z.string(),
    "entityType": zod_1.z.enum(["TB_RESOURCE"])
});
exports.TbResourceInfoSchemaSchema = zod_1.z.object({
    "descriptor": exports.JsonNodeSchema,
    "link": zod_1.z.string(),
    "name": zod_1.z.string(),
    "public": zod_1.z.boolean(),
    "publicLink": zod_1.z.string(),
    "publicResourceKey": zod_1.z.string(),
    "id": exports.TbResourceIdSchema,
    "createdTime": zod_1.z.number(),
    "tenantId": exports.TenantIdSchema,
    "customerId": exports.CustomerIdSchema,
    "title": zod_1.z.string(),
    "resourceType": zod_1.z.enum(["IMAGE", "JKS", "JS_MODULE", "LWM2M_MODEL", "PKCS_12"]),
    "resourceKey": zod_1.z.string(),
    "etag": zod_1.z.string(),
    "fileName": zod_1.z.string()
});
exports.TelemetryEntityViewSchemaSchema = zod_1.z.object({
    "timeseries": zod_1.z.array(zod_1.z.string()),
    "attributes": exports.AttributesEntityViewSchema
});
exports.TelemetryMappingConfigurationSchemaSchema = zod_1.z.object({
    "attribute": zod_1.z.array(zod_1.z.string()),
    "attributeLwm2m": zod_1.z.record(zod_1.z.string(), exports.ObjectAttributesSchema),
    "keyName": zod_1.z.record(zod_1.z.string(), zod_1.z.string()),
    "observe": zod_1.z.array(zod_1.z.string()),
    "telemetry": zod_1.z.array(zod_1.z.string())
});
exports.TelemetryQueryingSnmpCommunicationConfigSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.TenantSchemaSchema = zod_1.z.object({
    "id": exports.TenantIdSchema,
    "createdTime": zod_1.z.number(),
    "title": zod_1.z.string(),
    "name": zod_1.z.string(),
    "region": zod_1.z.string(),
    "tenantProfileId": exports.TenantProfileIdSchema,
    "country": zod_1.z.string(),
    "state": zod_1.z.string(),
    "city": zod_1.z.string(),
    "address": zod_1.z.string(),
    "address2": zod_1.z.string(),
    "zip": zod_1.z.string(),
    "phone": zod_1.z.string(),
    "email": zod_1.z.string(),
    "additionalInfo": exports.JsonNodeSchema
});
exports.TenantAdministratorsFilterSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.TenantIdSchemaSchema = zod_1.z.object({
    "id": zod_1.z.string(),
    "entityType": zod_1.z.enum(["TENANT"])
});
exports.TenantInfoSchemaSchema = zod_1.z.object({
    "id": exports.TenantIdSchema,
    "createdTime": zod_1.z.number(),
    "title": zod_1.z.string(),
    "name": zod_1.z.string(),
    "region": zod_1.z.string(),
    "tenantProfileId": exports.TenantProfileIdSchema,
    "country": zod_1.z.string(),
    "state": zod_1.z.string(),
    "city": zod_1.z.string(),
    "address": zod_1.z.string(),
    "address2": zod_1.z.string(),
    "zip": zod_1.z.string(),
    "phone": zod_1.z.string(),
    "email": zod_1.z.string(),
    "additionalInfo": exports.JsonNodeSchema,
    "tenantProfileName": zod_1.z.string()
});
exports.TenantProfileSchemaSchema = zod_1.z.object({
    "default": zod_1.z.boolean(),
    "id": exports.TenantProfileIdSchema,
    "createdTime": zod_1.z.number(),
    "name": zod_1.z.string(),
    "description": zod_1.z.string(),
    "isolatedTbRuleEngine": zod_1.z.boolean(),
    "profileData": exports.TenantProfileDataSchema
});
exports.TenantProfileConfigurationSchemaSchema = zod_1.z.object({});
exports.TenantProfileDataSchemaSchema = zod_1.z.object({
    "configuration": exports.TenantProfileConfigurationSchema,
    "queueConfiguration": zod_1.z.array(exports.TenantProfileQueueConfigurationSchema)
});
exports.TenantProfileIdSchemaSchema = zod_1.z.object({
    "id": zod_1.z.string(),
    "entityType": zod_1.z.enum(["TENANT_PROFILE"])
});
exports.TenantProfileQueueConfigurationSchemaSchema = zod_1.z.object({
    "additionalInfo": exports.JsonNodeSchema,
    "consumerPerPartition": zod_1.z.boolean(),
    "name": zod_1.z.string(),
    "packProcessingTimeout": zod_1.z.number(),
    "partitions": zod_1.z.number(),
    "pollInterval": zod_1.z.number(),
    "processingStrategy": exports.ProcessingStrategySchema,
    "submitStrategy": exports.SubmitStrategySchema,
    "topic": zod_1.z.string()
});
exports.TenantSolutionTemplateDetailsSchemaSchema = zod_1.z.object({
    "description": zod_1.z.string(),
    "highlights": zod_1.z.string(),
    "imageUrls": zod_1.z.array(zod_1.z.string()),
    "installed": zod_1.z.boolean(),
    "id": zod_1.z.string(),
    "title": zod_1.z.string(),
    "level": zod_1.z.enum(["MAKER", "PROTOTYPE", "STARTUP"]),
    "installTimeoutMs": zod_1.z.number(),
    "tenantTelemetryKeys": zod_1.z.array(zod_1.z.string()),
    "tenantAttributeKeys": zod_1.z.array(zod_1.z.string())
});
exports.TenantSolutionTemplateInfoSchemaSchema = zod_1.z.object({
    "id": zod_1.z.string(),
    "title": zod_1.z.string(),
    "level": zod_1.z.enum(["MAKER", "PROTOTYPE", "STARTUP"]),
    "installTimeoutMs": zod_1.z.number(),
    "tenantTelemetryKeys": zod_1.z.array(zod_1.z.string()),
    "tenantAttributeKeys": zod_1.z.array(zod_1.z.string()),
    "previewImageUrl": zod_1.z.string(),
    "shortDescription": zod_1.z.string(),
    "installed": zod_1.z.boolean(),
    "videoPreviewImageUrl": zod_1.z.string(),
    "previewMp4Url": zod_1.z.string(),
    "previewWebmUrl": zod_1.z.string()
});
exports.TenantSolutionTemplateInstructionsSchemaSchema = zod_1.z.object({
    "dashboardGroupId": exports.EntityGroupIdSchema,
    "dashboardId": exports.DashboardIdSchema,
    "publicId": exports.CustomerIdSchema,
    "mainDashboardPublic": zod_1.z.boolean(),
    "details": zod_1.z.string()
});
exports.TestSmsRequestSchemaSchema = zod_1.z.object({
    "providerConfiguration": exports.SmsProviderConfigurationSchema,
    "numberTo": zod_1.z.string(),
    "message": zod_1.z.string()
});
exports.ThingsboardCredentialsExpiredResponseSchemaSchema = zod_1.z.object({
    "subscriptionEntry": zod_1.z.enum(["ASSET_COUNT", "DEVICE_COUNT", "WHITE_LABELING"]),
    "subscriptionErrorCode": zod_1.z.enum(["FEATURE_DISABLED", "LIMIT_REACHED", "UNSUPPORTED_SOLUTION_TEMPLATE_PLAN"]),
    "subscriptionValue": exports.JsonNodeSchema,
    "status": zod_1.z.number(),
    "message": zod_1.z.string(),
    "errorCode": zod_1.z.object({}),
    "timestamp": zod_1.z.string(),
    "resetToken": zod_1.z.string()
});
exports.ThingsboardErrorResponseSchemaSchema = zod_1.z.object({
    "subscriptionEntry": zod_1.z.enum(["ASSET_COUNT", "DEVICE_COUNT", "WHITE_LABELING"]),
    "subscriptionErrorCode": zod_1.z.enum(["FEATURE_DISABLED", "LIMIT_REACHED", "UNSUPPORTED_SOLUTION_TEMPLATE_PLAN"]),
    "subscriptionValue": exports.JsonNodeSchema,
    "status": zod_1.z.number(),
    "message": zod_1.z.string(),
    "errorCode": zod_1.z.object({}),
    "timestamp": zod_1.z.string()
});
exports.ToDeviceRpcRequestSnmpCommunicationConfigSchemaSchema = zod_1.z.object({
    "mappings": zod_1.z.array(exports.SnmpMappingSchema),
    "spec": zod_1.z.enum(["CLIENT_ATTRIBUTES_QUERYING", "SHARED_ATTRIBUTES_SETTING", "TELEMETRY_QUERYING", "TO_DEVICE_RPC_REQUEST", "TO_SERVER_RPC_REQUEST"])
});
exports.ToServerRpcRequestSnmpCommunicationConfigSchemaSchema = zod_1.z.object({
    "mappings": zod_1.z.array(exports.SnmpMappingSchema),
    "spec": zod_1.z.enum(["CLIENT_ATTRIBUTES_QUERYING", "SHARED_ATTRIBUTES_SETTING", "TELEMETRY_QUERYING", "TO_DEVICE_RPC_REQUEST", "TO_SERVER_RPC_REQUEST"])
});
exports.TotpTwoFaAccountConfigSchemaSchema = zod_1.z.object({
    "authUrl": zod_1.z.string(),
    "useByDefault": zod_1.z.boolean()
});
exports.TotpTwoFaProviderConfigSchemaSchema = zod_1.z.object({
    "issuerName": zod_1.z.string()
});
exports.TransportPayloadTypeConfigurationSchemaSchema = zod_1.z.object({});
exports.TsValueSchemaSchema = zod_1.z.object({
    "count": zod_1.z.number(),
    "ts": zod_1.z.number(),
    "value": zod_1.z.string()
});
exports.TwilioSmsProviderConfigurationSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.TwoFaAccountConfigSchemaSchema = zod_1.z.object({
    "useByDefault": zod_1.z.boolean()
});
exports.TwoFaAccountConfigUpdateRequestSchemaSchema = zod_1.z.object({
    "useByDefault": zod_1.z.boolean()
});
exports.TwoFaProviderConfigSchemaSchema = zod_1.z.object({});
exports.TwoFaProviderInfoSchemaSchema = zod_1.z.object({
    "contact": zod_1.z.string(),
    "default": zod_1.z.boolean(),
    "minVerificationCodeSendPeriod": zod_1.z.number(),
    "type": zod_1.z.enum(["BACKUP_CODE", "EMAIL", "SMS", "TOTP"])
});
exports.UpdateMessageSchemaSchema = zod_1.z.object({
    "updateAvailable": zod_1.z.boolean(),
    "currentVersion": zod_1.z.string(),
    "latestVersion": zod_1.z.string(),
    "upgradeInstructionsUrl": zod_1.z.string(),
    "currentVersionReleaseNotesUrl": zod_1.z.string(),
    "latestVersionReleaseNotesUrl": zod_1.z.string()
});
exports.UsageInfoSchemaSchema = zod_1.z.object({
    "alarms": zod_1.z.number(),
    "assets": zod_1.z.number(),
    "customers": zod_1.z.number(),
    "dashboards": zod_1.z.number(),
    "devices": zod_1.z.number(),
    "emails": zod_1.z.number(),
    "jsExecutions": zod_1.z.number(),
    "maxAlarms": zod_1.z.number(),
    "maxAssets": zod_1.z.number(),
    "maxCustomers": zod_1.z.number(),
    "maxDashboards": zod_1.z.number(),
    "maxDevices": zod_1.z.number(),
    "maxEmails": zod_1.z.number(),
    "maxJsExecutions": zod_1.z.number(),
    "maxSms": zod_1.z.number(),
    "maxTbelExecutions": zod_1.z.number(),
    "maxTransportMessages": zod_1.z.number(),
    "maxUsers": zod_1.z.number(),
    "sms": zod_1.z.number(),
    "smsEnabled": zod_1.z.boolean(),
    "tbelExecutions": zod_1.z.number(),
    "transportMessages": zod_1.z.number(),
    "users": zod_1.z.number()
});
exports.UserSchemaSchema = zod_1.z.object({
    "id": exports.UserIdSchema,
    "createdTime": zod_1.z.number(),
    "tenantId": exports.TenantIdSchema,
    "customerId": exports.CustomerIdSchema,
    "email": zod_1.z.string(),
    "name": zod_1.z.string(),
    "authority": zod_1.z.enum(["CUSTOMER_USER", "PRE_VERIFICATION_TOKEN", "REFRESH_TOKEN", "SYS_ADMIN", "TENANT_ADMIN"]),
    "firstName": zod_1.z.string(),
    "lastName": zod_1.z.string(),
    "phone": zod_1.z.string(),
    "additionalInfo": exports.JsonNodeSchema,
    "ownerId": exports.EntityIdSchema
});
exports.UserDashboardsInfoSchemaSchema = zod_1.z.object({
    "last": zod_1.z.array(exports.LastVisitedDashboardInfoSchema),
    "starred": zod_1.z.array(exports.StarredDashboardInfoSchema)
});
exports.UserEmailInfoSchemaSchema = zod_1.z.object({
    "id": exports.UserIdSchema,
    "email": zod_1.z.string(),
    "firstName": zod_1.z.string(),
    "lastName": zod_1.z.string()
});
exports.UserGroupListFilterSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.UserIdSchemaSchema = zod_1.z.object({
    "id": zod_1.z.string(),
    "entityType": zod_1.z.enum(["USER"])
});
exports.UserInfoSchemaSchema = zod_1.z.object({
    "id": exports.UserIdSchema,
    "createdTime": zod_1.z.number(),
    "tenantId": exports.TenantIdSchema,
    "customerId": exports.CustomerIdSchema,
    "email": zod_1.z.string(),
    "name": zod_1.z.string(),
    "authority": zod_1.z.enum(["CUSTOMER_USER", "PRE_VERIFICATION_TOKEN", "REFRESH_TOKEN", "SYS_ADMIN", "TENANT_ADMIN"]),
    "firstName": zod_1.z.string(),
    "lastName": zod_1.z.string(),
    "phone": zod_1.z.string(),
    "additionalInfo": exports.JsonNodeSchema,
    "ownerId": exports.EntityIdSchema,
    "ownerName": zod_1.z.string(),
    "groups": zod_1.z.array(exports.EntityInfoSchema)
});
exports.UserListFilterSchemaSchema = zod_1.z.object({
    "usersIds": zod_1.z.array(zod_1.z.string())
});
exports.UserNotificationSettingsSchemaSchema = zod_1.z.object({
    "prefs": zod_1.z.record(zod_1.z.string(), exports.NotificationPrefSchema)
});
exports.UserPasswordPolicySchemaSchema = zod_1.z.object({
    "allowWhitespaces": zod_1.z.boolean(),
    "forceUserToResetPasswordIfNotValid": zod_1.z.boolean(),
    "maximumLength": zod_1.z.number(),
    "minimumDigits": zod_1.z.number(),
    "minimumLength": zod_1.z.number(),
    "minimumLowercaseLetters": zod_1.z.number(),
    "minimumSpecialCharacters": zod_1.z.number(),
    "minimumUppercaseLetters": zod_1.z.number(),
    "passwordExpirationPeriodDays": zod_1.z.number(),
    "passwordReuseFrequencyDays": zod_1.z.number()
});
exports.UserRoleFilterSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.UsersFilterSchemaSchema = zod_1.z.object({});
exports.VersionCreateConfigSchemaSchema = zod_1.z.object({
    "saveAttributes": zod_1.z.boolean(),
    "saveCredentials": zod_1.z.boolean(),
    "saveGroupEntities": zod_1.z.boolean(),
    "savePermissions": zod_1.z.boolean(),
    "saveRelations": zod_1.z.boolean()
});
exports.VersionCreateRequestSchemaSchema = zod_1.z.object({
    "branch": zod_1.z.string(),
    "type": zod_1.z.enum(["COMPLEX", "SINGLE_ENTITY"]),
    "versionName": zod_1.z.string()
});
exports.VersionCreationResultSchemaSchema = zod_1.z.object({
    "added": zod_1.z.number(),
    "done": zod_1.z.boolean(),
    "error": zod_1.z.string(),
    "modified": zod_1.z.number(),
    "removed": zod_1.z.number(),
    "version": exports.EntityVersionSchema
});
exports.VersionLoadConfigSchemaSchema = zod_1.z.object({
    "autoGenerateIntegrationKey": zod_1.z.boolean(),
    "loadAttributes": zod_1.z.boolean(),
    "loadCredentials": zod_1.z.boolean(),
    "loadGroupEntities": zod_1.z.boolean(),
    "loadPermissions": zod_1.z.boolean(),
    "loadRelations": zod_1.z.boolean()
});
exports.VersionLoadRequestSchemaSchema = zod_1.z.object({
    "type": zod_1.z.enum(["ENTITY_TYPE", "SINGLE_ENTITY"]),
    "versionId": zod_1.z.string()
});
exports.VersionLoadResultSchemaSchema = zod_1.z.object({
    "done": zod_1.z.boolean(),
    "error": exports.EntityLoadErrorSchema,
    "result": zod_1.z.array(exports.EntityTypeLoadResultSchema)
});
exports.VersionedEntityInfoSchemaSchema = zod_1.z.object({
    "externalId": exports.EntityIdSchema,
    "path": zod_1.z.string()
});
exports.WebDeliveryMethodNotificationTemplateSchemaSchema = zod_1.z.object({
    "additionalConfig": exports.JsonNodeSchema,
    "body": zod_1.z.string(),
    "enabled": zod_1.z.boolean(),
    "subject": zod_1.z.string()
});
exports.WhiteLabelingSchemaSchema = zod_1.z.object({
    "customerId": exports.CustomerIdSchema,
    "domain": zod_1.z.string(),
    "settings": exports.JsonNodeSchema,
    "tenantId": exports.TenantIdSchema,
    "type": zod_1.z.enum(["GENERAL", "LOGIN", "MAIL_TEMPLATES"])
});
exports.WhiteLabelingParamsSchemaSchema = zod_1.z.object({
    "logoImageUrl": zod_1.z.string(),
    "logoImageHeight": zod_1.z.number(),
    "appTitle": zod_1.z.string(),
    "favicon": exports.FaviconSchema,
    "paletteSettings": exports.PaletteSettingsSchema,
    "helpLinkBaseUrl": zod_1.z.string(),
    "uiHelpBaseUrl": zod_1.z.string(),
    "enableHelpLinks": zod_1.z.boolean(),
    "whiteLabelingEnabled": zod_1.z.boolean(),
    "showNameVersion": zod_1.z.boolean(),
    "platformName": zod_1.z.string(),
    "platformVersion": zod_1.z.string(),
    "customCss": zod_1.z.string()
});
exports.WidgetTypeSchemaSchema = zod_1.z.object({
    "id": exports.WidgetTypeIdSchema,
    "createdTime": zod_1.z.number(),
    "tenantId": exports.TenantIdSchema,
    "fqn": zod_1.z.string(),
    "name": zod_1.z.string(),
    "deprecated": zod_1.z.boolean(),
    "descriptor": exports.JsonNodeSchema
});
exports.WidgetTypeDetailsSchemaSchema = zod_1.z.object({
    "createdTime": zod_1.z.number(),
    "tenantId": exports.TenantIdSchema,
    "fqn": zod_1.z.string(),
    "name": zod_1.z.string(),
    "deprecated": zod_1.z.boolean(),
    "descriptor": exports.JsonNodeSchema,
    "image": zod_1.z.string(),
    "description": zod_1.z.string(),
    "tags": zod_1.z.array(zod_1.z.string())
});
exports.WidgetTypeExportDataSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.WidgetTypeIdSchemaSchema = zod_1.z.object({
    "id": zod_1.z.string(),
    "entityType": zod_1.z.enum(["WIDGET_TYPE"])
});
exports.WidgetTypeInfoSchemaSchema = zod_1.z.object({
    "id": exports.WidgetTypeIdSchema,
    "createdTime": zod_1.z.number(),
    "tenantId": exports.TenantIdSchema,
    "fqn": zod_1.z.string(),
    "name": zod_1.z.string(),
    "deprecated": zod_1.z.boolean(),
    "image": zod_1.z.string(),
    "description": zod_1.z.string(),
    "tags": zod_1.z.array(zod_1.z.string()),
    "widgetType": zod_1.z.string()
});
exports.WidgetsBundleSchemaSchema = zod_1.z.object({
    "id": exports.WidgetsBundleIdSchema,
    "createdTime": zod_1.z.number(),
    "name": zod_1.z.string(),
    "tenantId": exports.TenantIdSchema,
    "alias": zod_1.z.string(),
    "title": zod_1.z.string(),
    "image": zod_1.z.string(),
    "description": zod_1.z.string(),
    "order": zod_1.z.number()
});
exports.WidgetsBundleExportDataSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.WidgetsBundleIdSchemaSchema = zod_1.z.object({
    "id": zod_1.z.string(),
    "entityType": zod_1.z.enum(["WIDGETS_BUNDLE"])
});
exports.X509CertificateChainProvisionConfigurationSchemaSchema = zod_1.z.lazy(() => zod_1.z.object({}));
exports.X509LwM2MBootstrapServerCredentialSchemaSchema = zod_1.z.object({
    "shortServerId": zod_1.z.number(),
    "bootstrapServerIs": zod_1.z.boolean(),
    "host": zod_1.z.string(),
    "port": zod_1.z.number(),
    "clientHoldOffTime": zod_1.z.number(),
    "serverPublicKey": zod_1.z.string(),
    "serverCertificate": zod_1.z.string(),
    "bootstrapServerAccountTimeout": zod_1.z.number(),
    "lifetime": zod_1.z.number(),
    "defaultMinPeriod": zod_1.z.number(),
    "notifIfDisabled": zod_1.z.boolean(),
    "binding": zod_1.z.string()
});
