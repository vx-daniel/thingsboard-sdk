import { BaseVXOlympusClient } from '../../base-client';
import * as schemas from '../schemas';
export declare class IntegrationControllerClient extends BaseVXOlympusClient {
    findEdgeMissingAttributesUsingGET(edgeId: string, integrationIds: string, options?: RequestInit): Promise<any>;
    findAllRelatedEdgesMissingAttributesUsingGET(integrationId: string, options?: RequestInit): Promise<any>;
    assignIntegrationToEdgeUsingPOST(edgeId: string, integrationId: string, options?: RequestInit): Promise<{
        type: "CUSTOM" | "COAP" | "MQTT" | "APACHE_PULSAR" | "AWS_IOT" | "AWS_KINESIS" | "AWS_SQS" | "AZURE_EVENT_HUB" | "AZURE_IOT_HUB" | "AZURE_SERVICE_BUS" | "CHIRPSTACK" | "HTTP" | "IBM_WATSON_IOT" | "KAFKA" | "KPN" | "LORIOT" | "OCEANCONNECT" | "OPC_UA" | "PARTICLE" | "PUB_SUB" | "RABBITMQ" | "SIGFOX" | "TCP" | "THINGPARK" | "TMOBILE_IOT_CDP" | "TPE" | "TTI" | "TTN" | "TUYA" | "UDP";
        createdTime: number;
        name: string;
        enabled: boolean;
        debugMode: boolean;
        edgeTemplate: boolean;
        routingKey: string;
        secret: string;
        remote: boolean;
        allowCreateDevicesOrAssets: boolean;
        id?: any;
        tenantId?: any;
        additionalInfo?: any;
        configuration?: any;
        defaultConverterId?: any;
        downlinkConverterId?: any;
    }>;
    unassignIntegrationFromEdgeUsingDELETE(edgeId: string, integrationId: string, options?: RequestInit): Promise<{
        type: "CUSTOM" | "COAP" | "MQTT" | "APACHE_PULSAR" | "AWS_IOT" | "AWS_KINESIS" | "AWS_SQS" | "AZURE_EVENT_HUB" | "AZURE_IOT_HUB" | "AZURE_SERVICE_BUS" | "CHIRPSTACK" | "HTTP" | "IBM_WATSON_IOT" | "KAFKA" | "KPN" | "LORIOT" | "OCEANCONNECT" | "OPC_UA" | "PARTICLE" | "PUB_SUB" | "RABBITMQ" | "SIGFOX" | "TCP" | "THINGPARK" | "TMOBILE_IOT_CDP" | "TPE" | "TTI" | "TTN" | "TUYA" | "UDP";
        createdTime: number;
        name: string;
        enabled: boolean;
        debugMode: boolean;
        edgeTemplate: boolean;
        routingKey: string;
        secret: string;
        remote: boolean;
        allowCreateDevicesOrAssets: boolean;
        id?: any;
        tenantId?: any;
        additionalInfo?: any;
        configuration?: any;
        defaultConverterId?: any;
        downlinkConverterId?: any;
    }>;
    getEdgeIntegrationInfosUsingGET(edgeId: string, pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, options?: RequestInit): Promise<{
        data: any[];
        totalPages: number;
        totalElements: number;
        hasNext: boolean;
    }>;
    getEdgeIntegrationsUsingGET(edgeId: string, pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, options?: RequestInit): Promise<{
        data: any[];
        totalPages: number;
        totalElements: number;
        hasNext: boolean;
    }>;
    saveIntegrationUsingPOST(data: schemas.Integration, options?: RequestInit): Promise<{
        type: "CUSTOM" | "COAP" | "MQTT" | "APACHE_PULSAR" | "AWS_IOT" | "AWS_KINESIS" | "AWS_SQS" | "AZURE_EVENT_HUB" | "AZURE_IOT_HUB" | "AZURE_SERVICE_BUS" | "CHIRPSTACK" | "HTTP" | "IBM_WATSON_IOT" | "KAFKA" | "KPN" | "LORIOT" | "OCEANCONNECT" | "OPC_UA" | "PARTICLE" | "PUB_SUB" | "RABBITMQ" | "SIGFOX" | "TCP" | "THINGPARK" | "TMOBILE_IOT_CDP" | "TPE" | "TTI" | "TTN" | "TUYA" | "UDP";
        createdTime: number;
        name: string;
        enabled: boolean;
        debugMode: boolean;
        edgeTemplate: boolean;
        routingKey: string;
        secret: string;
        remote: boolean;
        allowCreateDevicesOrAssets: boolean;
        id?: any;
        tenantId?: any;
        additionalInfo?: any;
        configuration?: any;
        defaultConverterId?: any;
        downlinkConverterId?: any;
    }>;
    checkIntegrationConnectionUsingPOST(data: schemas.Integration, options?: RequestInit): Promise<any>;
    getIntegrationByRoutingKeyUsingGET(routingKey: string, options?: RequestInit): Promise<{
        type: "CUSTOM" | "COAP" | "MQTT" | "APACHE_PULSAR" | "AWS_IOT" | "AWS_KINESIS" | "AWS_SQS" | "AZURE_EVENT_HUB" | "AZURE_IOT_HUB" | "AZURE_SERVICE_BUS" | "CHIRPSTACK" | "HTTP" | "IBM_WATSON_IOT" | "KAFKA" | "KPN" | "LORIOT" | "OCEANCONNECT" | "OPC_UA" | "PARTICLE" | "PUB_SUB" | "RABBITMQ" | "SIGFOX" | "TCP" | "THINGPARK" | "TMOBILE_IOT_CDP" | "TPE" | "TTI" | "TTN" | "TUYA" | "UDP";
        createdTime: number;
        name: string;
        enabled: boolean;
        debugMode: boolean;
        edgeTemplate: boolean;
        routingKey: string;
        secret: string;
        remote: boolean;
        allowCreateDevicesOrAssets: boolean;
        id?: any;
        tenantId?: any;
        additionalInfo?: any;
        configuration?: any;
        defaultConverterId?: any;
        downlinkConverterId?: any;
    }>;
    getIntegrationByIdUsingGET(integrationId: string, options?: RequestInit): Promise<{
        type: "CUSTOM" | "COAP" | "MQTT" | "APACHE_PULSAR" | "AWS_IOT" | "AWS_KINESIS" | "AWS_SQS" | "AZURE_EVENT_HUB" | "AZURE_IOT_HUB" | "AZURE_SERVICE_BUS" | "CHIRPSTACK" | "HTTP" | "IBM_WATSON_IOT" | "KAFKA" | "KPN" | "LORIOT" | "OCEANCONNECT" | "OPC_UA" | "PARTICLE" | "PUB_SUB" | "RABBITMQ" | "SIGFOX" | "TCP" | "THINGPARK" | "TMOBILE_IOT_CDP" | "TPE" | "TTI" | "TTN" | "TUYA" | "UDP";
        createdTime: number;
        name: string;
        enabled: boolean;
        debugMode: boolean;
        edgeTemplate: boolean;
        routingKey: string;
        secret: string;
        remote: boolean;
        allowCreateDevicesOrAssets: boolean;
        id?: any;
        tenantId?: any;
        additionalInfo?: any;
        configuration?: any;
        defaultConverterId?: any;
        downlinkConverterId?: any;
    }>;
    deleteIntegrationUsingDELETE(integrationId: string, options?: RequestInit): Promise<any>;
    getIntegrationInfosUsingGET(isEdgeTemplate: boolean, pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, options?: RequestInit): Promise<{
        data: any[];
        totalPages: number;
        totalElements: number;
        hasNext: boolean;
    }>;
    getIntegrationsByIdsUsingGET(integrationIds: string, options?: RequestInit): Promise<any>;
    getIntegrationsUsingGET(isEdgeTemplate: boolean, pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, options?: RequestInit): Promise<{
        data: any[];
        totalPages: number;
        totalElements: number;
        hasNext: boolean;
    }>;
}
