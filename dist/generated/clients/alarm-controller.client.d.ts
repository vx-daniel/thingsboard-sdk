import { BaseVXOlympusClient } from '../../base-client';
import * as schemas from '../schemas';
export declare class AlarmControllerClient extends BaseVXOlympusClient {
    saveAlarmUsingPOST(data: schemas.Alarm, options?: RequestInit): Promise<{
        type: string;
        status: "ACTIVE_ACK" | "ACTIVE_UNACK" | "CLEARED_ACK" | "CLEARED_UNACK";
        createdTime: number;
        name: string;
        severity: "CRITICAL" | "INDETERMINATE" | "MAJOR" | "MINOR" | "WARNING";
        acknowledged: boolean;
        cleared: boolean;
        startTs: number;
        endTs: number;
        ackTs: number;
        clearTs: number;
        assignTs: number;
        propagateToOwnerHierarchy: boolean;
        propagate: boolean;
        propagateToTenant: boolean;
        propagateRelationTypes: string[];
        propagateToOwner: boolean;
        id?: any;
        tenantId?: any;
        customerId?: any;
        originator?: any;
        assigneeId?: any;
        details?: any;
    }>;
    getHighestAlarmSeverityUsingGET(entityType: string, entityId: string, searchStatus: string, status: string, assigneeId: string, options?: RequestInit): Promise<any>;
    getAlarmInfoByIdUsingGET(alarmId: string, options?: RequestInit): Promise<{
        type: string;
        status: "ACTIVE_ACK" | "ACTIVE_UNACK" | "CLEARED_ACK" | "CLEARED_UNACK";
        createdTime: number;
        name: string;
        severity: "CRITICAL" | "INDETERMINATE" | "MAJOR" | "MINOR" | "WARNING";
        acknowledged: boolean;
        cleared: boolean;
        startTs: number;
        endTs: number;
        ackTs: number;
        clearTs: number;
        assignTs: number;
        propagateToOwnerHierarchy: boolean;
        propagate: boolean;
        propagateToTenant: boolean;
        propagateRelationTypes: string[];
        propagateToOwner: boolean;
        originatorName: string;
        originatorLabel: string;
        id?: any;
        tenantId?: any;
        customerId?: any;
        originator?: any;
        assigneeId?: any;
        details?: any;
        assignee?: any;
    }>;
    getAlarmTypesUsingGET(pageSize: number, page: number, textSearch: string, sortOrder: string, options?: RequestInit): Promise<{
        data: any[];
        totalPages: number;
        totalElements: number;
        hasNext: boolean;
    }>;
    getAlarmByIdUsingGET(alarmId: string, options?: RequestInit): Promise<{
        type: string;
        status: "ACTIVE_ACK" | "ACTIVE_UNACK" | "CLEARED_ACK" | "CLEARED_UNACK";
        createdTime: number;
        name: string;
        severity: "CRITICAL" | "INDETERMINATE" | "MAJOR" | "MINOR" | "WARNING";
        acknowledged: boolean;
        cleared: boolean;
        startTs: number;
        endTs: number;
        ackTs: number;
        clearTs: number;
        assignTs: number;
        propagateToOwnerHierarchy: boolean;
        propagate: boolean;
        propagateToTenant: boolean;
        propagateRelationTypes: string[];
        propagateToOwner: boolean;
        id?: any;
        tenantId?: any;
        customerId?: any;
        originator?: any;
        assigneeId?: any;
        details?: any;
    }>;
    deleteAlarmUsingDELETE(alarmId: string, options?: RequestInit): Promise<any>;
    ackAlarmUsingPOST(alarmId: string, options?: RequestInit): Promise<{
        type: string;
        status: "ACTIVE_ACK" | "ACTIVE_UNACK" | "CLEARED_ACK" | "CLEARED_UNACK";
        createdTime: number;
        name: string;
        severity: "CRITICAL" | "INDETERMINATE" | "MAJOR" | "MINOR" | "WARNING";
        acknowledged: boolean;
        cleared: boolean;
        startTs: number;
        endTs: number;
        ackTs: number;
        clearTs: number;
        assignTs: number;
        propagateToOwnerHierarchy: boolean;
        propagate: boolean;
        propagateToTenant: boolean;
        propagateRelationTypes: string[];
        propagateToOwner: boolean;
        originatorName: string;
        originatorLabel: string;
        id?: any;
        tenantId?: any;
        customerId?: any;
        originator?: any;
        assigneeId?: any;
        details?: any;
        assignee?: any;
    }>;
    unassignAlarmUsingDELETE(alarmId: string, options?: RequestInit): Promise<{
        type: string;
        status: "ACTIVE_ACK" | "ACTIVE_UNACK" | "CLEARED_ACK" | "CLEARED_UNACK";
        createdTime: number;
        name: string;
        severity: "CRITICAL" | "INDETERMINATE" | "MAJOR" | "MINOR" | "WARNING";
        acknowledged: boolean;
        cleared: boolean;
        startTs: number;
        endTs: number;
        ackTs: number;
        clearTs: number;
        assignTs: number;
        propagateToOwnerHierarchy: boolean;
        propagate: boolean;
        propagateToTenant: boolean;
        propagateRelationTypes: string[];
        propagateToOwner: boolean;
        id?: any;
        tenantId?: any;
        customerId?: any;
        originator?: any;
        assigneeId?: any;
        details?: any;
    }>;
    assignAlarmUsingPOST(alarmId: string, assigneeId: string, options?: RequestInit): Promise<{
        type: string;
        status: "ACTIVE_ACK" | "ACTIVE_UNACK" | "CLEARED_ACK" | "CLEARED_UNACK";
        createdTime: number;
        name: string;
        severity: "CRITICAL" | "INDETERMINATE" | "MAJOR" | "MINOR" | "WARNING";
        acknowledged: boolean;
        cleared: boolean;
        startTs: number;
        endTs: number;
        ackTs: number;
        clearTs: number;
        assignTs: number;
        propagateToOwnerHierarchy: boolean;
        propagate: boolean;
        propagateToTenant: boolean;
        propagateRelationTypes: string[];
        propagateToOwner: boolean;
        id?: any;
        tenantId?: any;
        customerId?: any;
        originator?: any;
        assigneeId?: any;
        details?: any;
    }>;
    clearAlarmUsingPOST(alarmId: string, options?: RequestInit): Promise<{
        type: string;
        status: "ACTIVE_ACK" | "ACTIVE_UNACK" | "CLEARED_ACK" | "CLEARED_UNACK";
        createdTime: number;
        name: string;
        severity: "CRITICAL" | "INDETERMINATE" | "MAJOR" | "MINOR" | "WARNING";
        acknowledged: boolean;
        cleared: boolean;
        startTs: number;
        endTs: number;
        ackTs: number;
        clearTs: number;
        assignTs: number;
        propagateToOwnerHierarchy: boolean;
        propagate: boolean;
        propagateToTenant: boolean;
        propagateRelationTypes: string[];
        propagateToOwner: boolean;
        originatorName: string;
        originatorLabel: string;
        id?: any;
        tenantId?: any;
        customerId?: any;
        originator?: any;
        assigneeId?: any;
        details?: any;
        assignee?: any;
    }>;
    getAlarmsUsingGET(entityType: string, entityId: string, searchStatus: string, status: string, assigneeId: string, pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, startTime: number, endTime: number, fetchOriginator: boolean, options?: RequestInit): Promise<{
        data: any[];
        totalPages: number;
        totalElements: number;
        hasNext: boolean;
    }>;
    getAllAlarmsUsingGET(searchStatus: string, status: string, assigneeId: string, pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, startTime: number, endTime: number, fetchOriginator: boolean, options?: RequestInit): Promise<{
        data: any[];
        totalPages: number;
        totalElements: number;
        hasNext: boolean;
    }>;
    getAlarmsV2UsingGET(entityType: string, entityId: string, statusList: string, severityList: string, typeList: string, assigneeId: string, pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, startTime: number, endTime: number, options?: RequestInit): Promise<{
        data: any[];
        totalPages: number;
        totalElements: number;
        hasNext: boolean;
    }>;
    getAllAlarmsV2UsingGET(statusList: string, severityList: string, typeList: string, assigneeId: string, pageSize: number, page: number, textSearch: string, sortProperty: string, sortOrder: string, startTime: number, endTime: number, options?: RequestInit): Promise<{
        data: any[];
        totalPages: number;
        totalElements: number;
        hasNext: boolean;
    }>;
}
