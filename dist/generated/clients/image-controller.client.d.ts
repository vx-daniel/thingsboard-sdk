import { BaseVXOlympusClient } from '../../base-client';
import * as schemas from '../schemas';
export declare class ImageControllerClient extends BaseVXOlympusClient {
    uploadImageUsingPOST(options?: RequestInit): Promise<{
        createdTime: number;
        name: string;
        link: string;
        title: string;
        public: boolean;
        fileName: string;
        publicResourceKey: string;
        resourceKey: string;
        publicLink: string;
        resourceType: "IMAGE" | "JKS" | "JS_MODULE" | "LWM2M_MODEL" | "PKCS_12";
        etag: string;
        id?: any;
        tenantId?: any;
        customerId?: any;
        descriptor?: any;
    }>;
    importImageUsingPUT(data: schemas.ImageExportData, options?: RequestInit): Promise<{
        createdTime: number;
        name: string;
        link: string;
        title: string;
        public: boolean;
        fileName: string;
        publicResourceKey: string;
        resourceKey: string;
        publicLink: string;
        resourceType: "IMAGE" | "JKS" | "JS_MODULE" | "LWM2M_MODEL" | "PKCS_12";
        etag: string;
        id?: any;
        tenantId?: any;
        customerId?: any;
        descriptor?: any;
    }>;
    downloadPublicImageUsingGET(publicResourceKey: string, If_None_Match: string, options?: RequestInit): Promise<any>;
    downloadImageUsingGET(type: string, key: string, If_None_Match: string, options?: RequestInit): Promise<any>;
    updateImageUsingPUT(type: string, key: string, options?: RequestInit): Promise<{
        createdTime: number;
        name: string;
        link: string;
        title: string;
        public: boolean;
        fileName: string;
        publicResourceKey: string;
        resourceKey: string;
        publicLink: string;
        resourceType: "IMAGE" | "JKS" | "JS_MODULE" | "LWM2M_MODEL" | "PKCS_12";
        etag: string;
        id?: any;
        tenantId?: any;
        customerId?: any;
        descriptor?: any;
    }>;
    exportImageUsingGET(type: string, key: string, options?: RequestInit): Promise<{
        title: string;
        public: boolean;
        data: string;
        fileName: string;
        mediaType: string;
        publicResourceKey: string;
        resourceKey: string;
    }>;
    getImageInfoUsingGET(type: string, key: string, options?: RequestInit): Promise<{
        createdTime: number;
        name: string;
        link: string;
        title: string;
        public: boolean;
        fileName: string;
        publicResourceKey: string;
        resourceKey: string;
        publicLink: string;
        resourceType: "IMAGE" | "JKS" | "JS_MODULE" | "LWM2M_MODEL" | "PKCS_12";
        etag: string;
        id?: any;
        tenantId?: any;
        customerId?: any;
        descriptor?: any;
    }>;
    updateImageInfoUsingPUT(type: string, key: string, data: schemas.TbResourceInfo, options?: RequestInit): Promise<{
        createdTime: number;
        name: string;
        link: string;
        title: string;
        public: boolean;
        fileName: string;
        publicResourceKey: string;
        resourceKey: string;
        publicLink: string;
        resourceType: "IMAGE" | "JKS" | "JS_MODULE" | "LWM2M_MODEL" | "PKCS_12";
        etag: string;
        id?: any;
        tenantId?: any;
        customerId?: any;
        descriptor?: any;
    }>;
    downloadImagePreviewUsingGET(type: string, key: string, If_None_Match: string, options?: RequestInit): Promise<any>;
    updateImagePublicStatusUsingPUT(type: string, key: string, isPublic: boolean, options?: RequestInit): Promise<{
        createdTime: number;
        name: string;
        link: string;
        title: string;
        public: boolean;
        fileName: string;
        publicResourceKey: string;
        resourceKey: string;
        publicLink: string;
        resourceType: "IMAGE" | "JKS" | "JS_MODULE" | "LWM2M_MODEL" | "PKCS_12";
        etag: string;
        id?: any;
        tenantId?: any;
        customerId?: any;
        descriptor?: any;
    }>;
    deleteImageUsingDELETE(type: string, key: string, force: boolean, options?: RequestInit): Promise<{
        success: boolean;
        references: Record<string, any[]>;
        whiteLabelingList: any[];
    }>;
    getImagesUsingGET(pageSize: number, page: number, includeSystemImages: boolean, textSearch: string, sortProperty: string, sortOrder: string, options?: RequestInit): Promise<{
        data: any[];
        totalPages: number;
        totalElements: number;
        hasNext: boolean;
    }>;
    downloadLoginFaviconUsingGET(type: string, key: string, If_None_Match: string, options?: RequestInit): Promise<any>;
    downloadLoginLogoUsingGET(type: string, key: string, If_None_Match: string, options?: RequestInit): Promise<any>;
}
